/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./components/dropdown/demo/demo.js":
/*!******************************************!*\
  !*** ./components/dropdown/demo/demo.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var coherent_gameface_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! coherent-gameface-components */ \"./lib/components.js\");\n/* harmony import */ var _umd_dropdown_development_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../umd/dropdown.development.js */ \"./components/dropdown/umd/dropdown.development.js\");\n/* harmony import */ var _umd_dropdown_development_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_umd_dropdown_development_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var postmessage_polyfill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! postmessage-polyfill */ \"./components/dropdown/node_modules/postmessage-polyfill/postmessage.js\");\n/* harmony import */ var postmessage_polyfill__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(postmessage_polyfill__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var whatwg_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! whatwg-fetch */ \"./components/dropdown/node_modules/whatwg-fetch/fetch.js\");\n/* eslint-disable linebreak-style */\n/* eslint-disable no-unused-vars */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Coherent Labs AD. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\nwindow.postMessage = function (message) {\n    (0,postmessage_polyfill__WEBPACK_IMPORTED_MODULE_2__.pm)({\n        origin: 'http://127.0.0.1/:3000',\n        target: window,\n        data: message,\n    });\n};\n\n\n//# sourceURL=webpack://gameuicomponents/./components/dropdown/demo/demo.js?");

/***/ }),

/***/ "./components/dropdown/node_modules/postmessage-polyfill/postmessage.js":
/*!******************************************************************************!*\
  !*** ./components/dropdown/node_modules/postmessage-polyfill/postmessage.js ***!
  \******************************************************************************/
/***/ (function() {

eval("/**\n The MIT License\n\n Copyright (c) 2010 Daniel Park (http://metaweb.com, http://postmessage.freebaseapps.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n **/\nvar NO_JQUERY = {};\n(function(window, $, undefined) {\n\n     if (!(\"console\" in window)) {\n         var c = window.console = {};\n         c.log = c.warn = c.error = c.debug = function(){};\n     }\n\n     if ($ === NO_JQUERY) {\n         // jQuery is optional\n         $ = {\n             fn: {},\n             extend: function() {\n                 var a = arguments[0];\n                 for (var i=1,len=arguments.length; i<len; i++) {\n                     var b = arguments[i];\n                     for (var prop in b) {\n                         a[prop] = b[prop];\n                     }\n                 }\n                 return a;\n             }\n         };\n     }\n\n     $.fn.pm = function() {\n         console.log(\"usage: \\nto send:    $.pm(options)\\nto receive: $.pm.bind(type, fn, [origin])\");\n         return this;\n     };\n\n     // send postmessage\n     $.pm = window.pm = function(options) {\n         pm.send(options);\n     };\n\n     // bind postmessage handler\n     $.pm.bind = window.pm.bind = function(type, fn, origin, hash, async_reply) {\n         pm.bind(type, fn, origin, hash, async_reply === true);\n     };\n\n     // unbind postmessage handler\n     $.pm.unbind = window.pm.unbind = function(type, fn) {\n         pm.unbind(type, fn);\n     };\n\n     // default postmessage origin on bind\n     $.pm.origin = window.pm.origin = null;\n\n     // default postmessage polling if using location hash to pass postmessages\n     $.pm.poll = window.pm.poll = 200;\n\n     var pm = {\n\n         send: function(options) {\n             var o = $.extend({}, pm.defaults, options),\n             target = o.target;\n             if (!o.target) {\n                 console.warn(\"postmessage target window required\");\n                 return;\n             }\n             if (!o.type) {\n                 console.warn(\"postmessage type required\");\n                 return;\n             }\n             var msg = {data:o.data, type:o.type};\n             if (o.success) {\n                 msg.callback = pm._callback(o.success);\n             }\n             if (o.error) {\n                 msg.errback = pm._callback(o.error);\n             }\n             if ((\"postMessage\" in target) && !o.hash) {\n                 pm._bind();\n                 target.postMessage(JSON.stringify(msg), o.origin || '*');\n             }\n             else {\n                 pm.hash._bind();\n                 pm.hash.send(o, msg);\n             }\n         },\n\n         bind: function(type, fn, origin, hash, async_reply) {\n           pm._replyBind ( type, fn, origin, hash, async_reply );\n         },\n       \n         _replyBind: function(type, fn, origin, hash, isCallback) {\n           if ((\"postMessage\" in window) && !hash) {\n               pm._bind();\n           }\n           else {\n               pm.hash._bind();\n           }\n           var l = pm.data(\"listeners.postmessage\");\n           if (!l) {\n               l = {};\n               pm.data(\"listeners.postmessage\", l);\n           }\n           var fns = l[type];\n           if (!fns) {\n               fns = [];\n               l[type] = fns;\n           }\n           fns.push({fn:fn, callback: isCallback, origin:origin || $.pm.origin});\n         },\n\n         unbind: function(type, fn) {\n             var l = pm.data(\"listeners.postmessage\");\n             if (l) {\n                 if (type) {\n                     if (fn) {\n                         // remove specific listener\n                         var fns = l[type];\n                         if (fns) {\n                             var m = [];\n                             for (var i=0,len=fns.length; i<len; i++) {\n                                 var o = fns[i];\n                                 if (o.fn !== fn) {\n                                     m.push(o);\n                                 }\n                             }\n                             l[type] = m;\n                         }\n                     }\n                     else {\n                         // remove all listeners by type\n                         delete l[type];\n                     }\n                 }\n                 else {\n                     // unbind all listeners of all type\n                     for (var i in l) {\n                       delete l[i];\n                     }\n                 }\n             }\n         },\n\n         data: function(k, v) {\n             if (v === undefined) {\n                 return pm._data[k];\n             }\n             pm._data[k] = v;\n             return v;\n         },\n\n         _data: {},\n\n         _CHARS: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split(''),\n\n         _random: function() {\n             var r = [];\n             for (var i=0; i<32; i++) {\n                 r[i] = pm._CHARS[0 | Math.random() * 32];\n             };\n             return r.join(\"\");\n         },\n\n         _callback: function(fn) {\n             var cbs = pm.data(\"callbacks.postmessage\");\n             if (!cbs) {\n                 cbs = {};\n                 pm.data(\"callbacks.postmessage\", cbs);\n             }\n             var r = pm._random();\n             cbs[r] = fn;\n             return r;\n         },\n\n         _bind: function() {\n             // are we already listening to message events on this w?\n             if (!pm.data(\"listening.postmessage\")) {\n                 if (window.addEventListener) {\n                     window.addEventListener(\"message\", pm._dispatch, false);\n                 }\n                 else if (window.attachEvent) {\n                     window.attachEvent(\"onmessage\", pm._dispatch);\n                 }\n                 pm.data(\"listening.postmessage\", 1);\n             }\n         },\n\n         _dispatch: function(e) {\n             //console.log(\"$.pm.dispatch\", e, this);\n             try {\n                 var msg = JSON.parse(e.data);\n             }\n             catch (ex) {\n                 console.warn(\"postmessage data invalid json: \", ex);\n                 return;\n             }\n             if (!msg.type) {\n                 console.warn(\"postmessage message type required\");\n                 return;\n             }\n             var cbs = pm.data(\"callbacks.postmessage\") || {},\n             cb = cbs[msg.type];\n             if (cb) {\n                 cb(msg.data);\n             }\n             else {\n                 var l = pm.data(\"listeners.postmessage\") || {};\n                 var fns = l[msg.type] || [];\n                 for (var i=0,len=fns.length; i<len; i++) {\n                     var o = fns[i];\n                     if (o.origin && o.origin !== '*' && e.origin !== o.origin) {\n                         console.warn(\"postmessage message origin mismatch\", e.origin, o.origin);\n                         if (msg.errback) {\n                             // notify post message errback\n                             var error = {\n                                 message: \"postmessage origin mismatch\",\n                                 origin: [e.origin, o.origin]\n                             };\n                             pm.send({target:e.source, data:error, type:msg.errback});\n                         }\n                         continue;\n                     }\n\n                     function sendReply ( data ) {\n                       if (msg.callback) {\n                           pm.send({target:e.source, data:data, type:msg.callback});\n                       }\n                     }\n                     \n                     try {\n                         if ( o.callback ) {\n                           o.fn(msg.data, sendReply, e);\n                         } else {\n                           sendReply ( o.fn(msg.data, e) );\n                         }\n                     }\n                     catch (ex) {\n                         if (msg.errback) {\n                             // notify post message errback\n                             pm.send({target:e.source, data:ex, type:msg.errback});\n                         } else {\n                             throw ex;\n                         }\n                     }\n                 };\n             }\n         }\n     };\n\n     // location hash polling\n     pm.hash = {\n\n         send: function(options, msg) {\n             //console.log(\"hash.send\", target_window, options, msg);\n             var target_window = options.target,\n             target_url = options.url;\n             if (!target_url) {\n                 console.warn(\"postmessage target window url is required\");\n                 return;\n             }\n             target_url = pm.hash._url(target_url);\n             var source_window,\n             source_url = pm.hash._url(window.location.href);\n             if (window == target_window.parent) {\n                 source_window = \"parent\";\n             }\n             else {\n                 try {\n                     for (var i=0,len=parent.frames.length; i<len; i++) {\n                         var f = parent.frames[i];\n                         if (f == window) {\n                             source_window = i;\n                             break;\n                         }\n                     };\n                 }\n                 catch(ex) {\n                     // Opera: security error trying to access parent.frames x-origin\n                     // juse use window.name\n                     source_window = window.name;\n                 }\n             }\n             if (source_window == null) {\n                 console.warn(\"postmessage windows must be direct parent/child windows and the child must be available through the parent window.frames list\");\n                 return;\n             }\n             var hashmessage = {\n                 \"x-requested-with\": \"postmessage\",\n                 source: {\n                     name: source_window,\n                     url: source_url\n                 },\n                 postmessage: msg\n             };\n             var hash_id = \"#x-postmessage-id=\" + pm._random();\n             target_window.location = target_url + hash_id + encodeURIComponent(JSON.stringify(hashmessage));\n         },\n\n         _regex: /^\\#x\\-postmessage\\-id\\=(\\w{32})/,\n\n         _regex_len: \"#x-postmessage-id=\".length + 32,\n\n         _bind: function() {\n             // are we already listening to message events on this w?\n             if (!pm.data(\"polling.postmessage\")) {\n                 setInterval(function() {\n                                 var hash = \"\" + window.location.hash,\n                                 m = pm.hash._regex.exec(hash);\n                                 if (m) {\n                                     var id = m[1];\n                                     if (pm.hash._last !== id) {\n                                         pm.hash._last = id;\n                                         pm.hash._dispatch(hash.substring(pm.hash._regex_len));\n                                     }\n                                 }\n                             }, $.pm.poll || 200);\n                 pm.data(\"polling.postmessage\", 1);\n             }\n         },\n\n         _dispatch: function(hash) {\n             if (!hash) {\n                 return;\n             }\n             try {\n                 hash = JSON.parse(decodeURIComponent(hash));\n                 if (!(hash['x-requested-with'] === 'postmessage' &&\n                       hash.source && hash.source.name != null && hash.source.url && hash.postmessage)) {\n                     // ignore since hash could've come from somewhere else\n                     return;\n                 }\n             }\n             catch (ex) {\n                 // ignore since hash could've come from somewhere else\n                 return;\n             }\n             var msg = hash.postmessage,\n             cbs = pm.data(\"callbacks.postmessage\") || {},\n             cb = cbs[msg.type];\n             if (cb) {\n                 cb(msg.data);\n             }\n             else {\n                 var source_window;\n                 if (hash.source.name === \"parent\") {\n                     source_window = window.parent;\n                 }\n                 else {\n                     source_window = window.frames[hash.source.name];\n                 }\n                 var l = pm.data(\"listeners.postmessage\") || {};\n                 var fns = l[msg.type] || [];\n                 for (var i=0,len=fns.length; i<len; i++) {\n                     var o = fns[i];\n                     if (o.origin) {\n                         var origin = /https?\\:\\/\\/[^\\/]*/.exec(hash.source.url)[0];\n                         if (o.origin !== '*' && origin !== o.origin) {\n                             console.warn(\"postmessage message origin mismatch\", origin, o.origin);\n                             if (msg.errback) {\n                                 // notify post message errback\n                                 var error = {\n                                     message: \"postmessage origin mismatch\",\n                                     origin: [origin, o.origin]\n                                 };\n                                 pm.send({target:source_window, data:error, type:msg.errback, hash:true, url:hash.source.url});\n                             }\n                             continue;\n                         }\n                     }\n\n                     function sendReply ( data ) {\n                       if (msg.callback) {\n                         pm.send({target:source_window, data:data, type:msg.callback, hash:true, url:hash.source.url});\n                       }\n                     }\n                     \n                     try {\n                         if ( o.callback ) {\n                           o.fn(msg.data, sendReply);\n                         } else {\n                           sendReply ( o.fn(msg.data) );\n                         }\n                     }\n                     catch (ex) {\n                         if (msg.errback) {\n                             // notify post message errback\n                             pm.send({target:source_window, data:ex, type:msg.errback, hash:true, url:hash.source.url});\n                         } else {\n                             throw ex;\n                         }\n                     }\n                 };\n             }\n         },\n\n         _url: function(url) {\n             // url minus hash part\n             return (\"\"+url).replace(/#.*$/, \"\");\n         }\n\n     };\n\n     $.extend(pm, {\n                  defaults: {\n                      target: null,  /* target window (required) */\n                      url: null,     /* target window url (required if no window.postMessage or hash == true) */\n                      type: null,    /* message type (required) */\n                      data: null,    /* message data (required) */\n                      success: null, /* success callback (optional) */\n                      error: null,   /* error callback (optional) */\n                      origin: \"*\",   /* postmessage origin (optional) */\n                      hash: false    /* use location hash for message passing (optional) */\n                  }\n              });\n\n })(this, typeof jQuery === \"undefined\" ? NO_JQUERY : jQuery);\n\n/**\n * http://www.JSON.org/json2.js\n **/\nif (! (\"JSON\" in window && window.JSON)){JSON={}}(function(){function f(n){return n<10?\"0\"+n:n}if(typeof Date.prototype.toJSON!==\"function\"){Date.prototype.toJSON=function(key){return this.getUTCFullYear()+\"-\"+f(this.getUTCMonth()+1)+\"-\"+f(this.getUTCDate())+\"T\"+f(this.getUTCHours())+\":\"+f(this.getUTCMinutes())+\":\"+f(this.getUTCSeconds())+\"Z\"};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf()}}var cx=/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,escapable=/[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,gap,indent,meta={\"\\b\":\"\\\\b\",\"\\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\"},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'\"'+string.replace(escapable,function(a){var c=meta[a];return typeof c===\"string\"?c:\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)})+'\"':'\"'+string+'\"'}function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&&typeof value===\"object\"&&typeof value.toJSON===\"function\"){value=value.toJSON(key)}if(typeof rep===\"function\"){value=rep.call(holder,key,value)}switch(typeof value){case\"string\":return quote(value);case\"number\":return isFinite(value)?String(value):\"null\";case\"boolean\":case\"null\":return String(value);case\"object\":if(!value){return\"null\"}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)===\"[object Array]\"){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||\"null\"}v=partial.length===0?\"[]\":gap?\"[\\n\"+gap+partial.join(\",\\n\"+gap)+\"\\n\"+mind+\"]\":\"[\"+partial.join(\",\")+\"]\";gap=mind;return v}if(rep&&typeof rep===\"object\"){length=rep.length;for(i=0;i<length;i+=1){k=rep[i];if(typeof k===\"string\"){v=str(k,value);if(v){partial.push(quote(k)+(gap?\": \":\":\")+v)}}}}else{for(k in value){if(Object.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?\": \":\":\")+v)}}}}v=partial.length===0?\"{}\":gap?\"{\\n\"+gap+partial.join(\",\\n\"+gap)+\"\\n\"+mind+\"}\":\"{\"+partial.join(\",\")+\"}\";gap=mind;return v}}if(typeof JSON.stringify!==\"function\"){JSON.stringify=function(value,replacer,space){var i;gap=\"\";indent=\"\";if(typeof space===\"number\"){for(i=0;i<space;i+=1){indent+=\" \"}}else{if(typeof space===\"string\"){indent=space}}rep=replacer;if(replacer&&typeof replacer!==\"function\"&&(typeof replacer!==\"object\"||typeof replacer.length!==\"number\")){throw new Error(\"JSON.stringify\")}return str(\"\",{\"\":value})}}if(typeof JSON.parse!==\"function\"){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&&typeof value===\"object\"){for(k in value){if(Object.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v}else{delete value[k]}}}}return reviver.call(holder,key,value)}cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)})}if(/^[\\],:{}\\s]*$/.test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\"))){j=eval(\"(\"+text+\")\");return typeof reviver===\"function\"?walk({\"\":j},\"\"):j}throw new SyntaxError(\"JSON.parse\")}}}());\n\n\n//# sourceURL=webpack://gameuicomponents/./components/dropdown/node_modules/postmessage-polyfill/postmessage.js?");

/***/ }),

/***/ "./components/dropdown/node_modules/whatwg-fetch/fetch.js":
/*!****************************************************************!*\
  !*** ./components/dropdown/node_modules/whatwg-fetch/fetch.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Headers\": () => (/* binding */ Headers),\n/* harmony export */   \"Request\": () => (/* binding */ Request),\n/* harmony export */   \"Response\": () => (/* binding */ Response),\n/* harmony export */   \"DOMException\": () => (/* binding */ DOMException),\n/* harmony export */   \"fetch\": () => (/* binding */ fetch)\n/* harmony export */ });\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  (typeof global !== 'undefined' && global)\n\nvar support = {\n  searchParams: 'URLSearchParams' in global,\n  iterable: 'Symbol' in global && 'iterator' in Symbol,\n  blob:\n    'FileReader' in global &&\n    'Blob' in global &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in global,\n  arrayBuffer: 'ArrayBuffer' in global\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this)\n        if (isConsumed) {\n          return isConsumed\n        }\n        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n    var parts = line.split(':')\n    var key = parts.shift().trim()\n    if (key) {\n      var value = parts.join(':').trim()\n      headers.append(key, value)\n    }\n  })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = 'statusText' in options ? options.statusText : ''\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = global.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && global.location.href ? global.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get('Content-Type') &&\n        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!global.fetch) {\n  global.fetch = fetch\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n\n\n//# sourceURL=webpack://gameuicomponents/./components/dropdown/node_modules/whatwg-fetch/fetch.js?");

/***/ }),

/***/ "./components/dropdown/umd/dropdown.development.js":
/*!*********************************************************!*\
  !*** ./components/dropdown/umd/dropdown.development.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function (global, factory) {\n     true ? module.exports = factory(__webpack_require__(/*! coherent-gameface-components */ \"./lib/components.js\")) :\n    0;\n})(this, (function (components) { 'use strict';\n\n    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n    var components__default = /*#__PURE__*/_interopDefaultLegacy(components);\n\n    var verticalTemplate = \"<!--Copyright (c) Coherent Labs AD. All rights reserved. Licensed under the MIT License. See License.txt in the project root for license information. -->\\n<div class=\\\"guic-vertical-slider-wrapper\\\">\\n    <div class=\\\"guic-slider-vertical-arrow up\\\"><div class=\\\"guic-slider-arrow-up\\\"></div></div>\\n    <div class=\\\"guic-slider-vertical-slider\\\">\\n        <div class=\\\"guic-slider-vertical-handle handle\\\"></div>\\n    </div>\\n    <div class=\\\"guic-slider-vertical-arrow down\\\"><div class=\\\"guic-slider-arrow-down\\\"></div></div>\\n</div>\\n\";\n\n    var horizontalTemplate = \"<!--Copyright (c) Coherent Labs AD. All rights reserved. Licensed under the MIT License. See License.txt in the project root for license information. -->\\r\\n<div class=\\\"guic-horizontal-slider-wrapper\\\">\\r\\n    <div class=\\\"guic-slider-horizontal-arrow up\\\"><div class=\\\"guic-slider-arrow-left\\\"></div></div>\\r\\n    <div class=\\\"guic-slider-horizontal-slider\\\">\\r\\n        <div class=\\\"guic-slider-horizontal-handle handle\\\"></div>\\r\\n    </div>\\r\\n    <div class=\\\"guic-slider-horizontal-arrow down\\\"><div class=\\\"guic-slider-arrow-right\\\"></div></div>\\r\\n</div>\\r\\n\";\n\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Coherent Labs AD. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n\r\n    const orientationUnitsNames = new Map([\r\n        ['vertical', {\r\n            mouseAxisCoords: 'clientY',\r\n            size: 'height',\r\n            sizePX: 'heightPX',\r\n            position: 'top',\r\n            scroll: 'scrollHeight',\r\n        }],\r\n        ['horizontal', {\r\n            mouseAxisCoords: 'clientX',\r\n            size: 'width',\r\n            sizePX: 'widthPX',\r\n            position: 'left',\r\n            scroll: 'scrollWidth',\r\n        }]\r\n    ]);\n\n    /* eslint-disable linebreak-style */\n\n\n    /**\n     * Slider component; can be independently or as a building block of another\n     * component - for example a scrollbar. This is a custom slider control, do not\n     * confuse with the standard input type slider HTML element.\n    */\n    class Slider extends HTMLElement {\n        /**\n         * Set the position of the slider's handler.\n         * @param {number} value - the new value in percents.\n        */\n        set handlePosition(value) {\n            this._handlePosition = value;\n            // The names of the units vary depending on the orientation\n            // of the slider - width for horizontal, height for vertical etc.\n            this.handle.style[this.units.position] = value + '%';\n        }\n\n        /**\n         * Get the current position of the slider's handle in percents.\n         * @returns {number} - the value of the position.\n        */\n        get handlePosition() {\n            return this._handlePosition;\n        }\n\n        /**\n         * Get the current position of the slider's handle in pixels.\n         * @returns {number} - the value of the position.\n        */\n        get handlePositionPx() {\n            const sliderSize = this.slider.getBoundingClientRect()[this.units.size];\n            return this.handlePosition / 100 * sliderSize;\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        constructor() {\n            super();\n            // the amount of units that the slider will be updated\n            this.step = this.getAttribute('step') || 10;\n            // the initial position of the handle\n            this._handlePosition = 0;\n\n            // vertical or horizontal\n            this.orientation = this.getAttribute('orientation') || 'vertical';\n            // use the template for the current slider orientation\n            this.template = (this.orientation === 'vertical') ? verticalTemplate : horizontalTemplate;\n            /**\n             * The names of the units are different for the two slider types.\n             * ['clientY', 'height', 'heightPX', 'top', 'scrollHeight] for vertical and\n             * ['clientX', 'width', 'widthPX', 'left', 'scrollWidth] for horizontal\n            */\n            this.units = orientationUnitsNames.get(this.orientation);\n\n            this.onSlideUp = (e) => { this.onSlideWithArrorws(-1); };\n            this.onSlideDown = (e) => { this.onSlideWithArrorws(1); };\n            this.onClick = this.onClick.bind(this);\n            this.onWheel = this.onWheel.bind(this);\n            this.onMouseDown = this.onMouseDown.bind(this);\n            this.onMouseMove = this.onMouseMove.bind(this);\n            this.onMouseUp = this.onMouseUp.bind(this);\n        }\n\n        /**\n         * Called when the element was attached to the DOM.\n        */\n        connectedCallback() {\n            // Load the template\n            components__default[\"default\"].loadResource(this)\n                .then((result) => {\n                    this.template = result.template;\n                    // render the template\n                    components__default[\"default\"].renderOnce(this);\n                    // do the initial setup - add event listeners, assign members\n                    this.setup();\n                })\n                .catch(err => console.error(err));\n        }\n\n        /**\n         * Set the slider and handle members and add event listeners.\n        */\n        setup() {\n            this.slider = this.getElementsByClassName(`guic-slider-${this.orientation}-slider`)[0];\n            this.handle = this.getElementsByClassName(`guic-slider-${this.orientation}-handle`)[0];\n\n            this.attachEventListeners();\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        disconnectedCallback() {\n            this.removeEventListeners();\n        }\n        /**\n         * Gets the size of an element in px.\n         * Uses the computed styles which return the size in pixels as a string.\n         * @param {HTMLElement} element\n         * @returns {number} - the size in pixels.\n        */\n        _getPxSizeWithoutUnits(element) {\n            let unitsName = this.units.sizePX;\n            if (!navigator.userAgent.includes('Cohtml')) unitsName = unitsName.substring(0, unitsName.length - 2);\n\n            const size = getComputedStyle(element)[unitsName];\n            return Number(size.substring(0, size.length - 2));\n        }\n\n        /**\n         * Update the size of the slider thumb.\n         * @param {HTMLElement} scrollableContainer\n        */\n        resize(scrollableContainer) {\n            components__default[\"default\"].waitForFrames(() => {\n                // get the size of the whole slider element\n                const sliderWrapperSize = this._getPxSizeWithoutUnits(this.querySelector(`.guic-${this.orientation}-slider-wrapper`));\n                // get the size of the up or down buttons in px\n                const controlsSize = this._getPxSizeWithoutUnits(this.querySelector(`.guic-slider-${this.orientation}-arrow`));\n                // get the combined size of the up and down buttons in % of the sliderWrapperSize\n                const controlsSizePercent = controlsSize * 2 / sliderWrapperSize * 100;\n\n                // get the size of the slider area\n                const sliderSize = this.slider.getBoundingClientRect()[this.units.size];\n                // get the size of the handle in percents relative to the current scroll(Height/Width)\n                const handleSizePercent = (sliderSize / scrollableContainer[this.units.scroll]) * 100;\n                // get the size of the handle in px; exclude the controlsSizePercent from the whole size\n                const handleSize = (sliderSize / (100 - controlsSizePercent)) * handleSizePercent;\n                // set the new size of the handle\n                this.handle.style[this.units.size] = handleSize + 'px';\n\n                this.scrollTo(this.handlePositionPx);\n            });\n        }\n\n        /**\n         * Remove event listeners.\n         */\n        removeEventListeners() {\n            // document listeners\n            document.removeEventListener('mousemove', this.onMouseMove);\n            document.removeEventListener('mouseup', this.onMouseUp);\n        }\n\n        /**\n         * Add event listeners to handle user interaction.\n        */\n        attachEventListeners() {\n            // local listeners\n            this.slider.addEventListener('click', this.onClick);\n            this.slider.addEventListener('wheel', this.onWheel);\n            this.handle.addEventListener('mousedown', this.onMouseDown);\n            this.querySelector('.up').addEventListener('mousedown', this.onSlideUp);\n            this.querySelector('.down').addEventListener('mousedown', this.onSlideDown);\n\n            // document listeners\n            document.addEventListener('mousemove', this.onMouseMove);\n            document.addEventListener('mouseup', this.onMouseUp);\n        }\n\n        /**\n         * Executed on mousedown. Moves the handle towards the position of the mouse\n         * with one step.\n         * @param {MouseEvent} event\n        */\n        onMouseDown(event) {\n            // set a flag to help the detection of drag\n            this.mousedown = true;\n            // get the bounding rectangles of the slider area and the handle\n            const handleRect = this.handle.getBoundingClientRect();\n            const sliderRect = this.slider.getBoundingClientRect();\n\n            // get the current position of the slider (top or left)\n            const sliderY = sliderRect[this.units.position];\n            // get the handle position within the slider's coordinates\n            const handleY = handleRect[this.units.position] - sliderY;\n            const mouseY = event[this.units.mouseAxisCoords] - sliderY;\n\n            // set the difference between the mouse click and the handle position\n            // used for better looking drag\n            this.delta = mouseY - handleY;\n        }\n\n        /**\n         * Called on mouseup.\n         * Resets the mousedown, dragging and slidingWithArrows properties\n         * and clears intervals.\n        */\n        onMouseUp() {\n            this.mousedown = false;\n            this.dragging = false;\n\n            if (this.slidingWithArrows) {\n                this.slidingWithArrows = false;\n                clearInterval(this.interval);\n            }\n        }\n\n        /**\n         * Called on mousemove.\n         * Detects dragging and scrolls to the current position of the mouse.\n         * @param {MouseEvent} event\n        */\n        onMouseMove(event) {\n            if (!this.mousedown) return;\n            this.dragging = true;\n            const sliderRect = this.slider.getBoundingClientRect();\n            // get the mouse position within the slider coordinates\n            const mouseY = event[this.units.mouseAxisCoords] - sliderRect[this.units.position];\n            this.scrollTo(mouseY - this.delta);\n        }\n\n        /**\n         * Called when the arrow controls are used for sliding.\n         * Starts an interval and updates the slider position until mouseup occurs.\n         * @param {number} direction - 1 for down, -1 for up\n        */\n        onSlideWithArrorws(direction) {\n            this.slidingWithArrows = true;\n            this.interval = setInterval(() => this.scrollTo(this.getNextScrollPosition(direction, this.step)), 10);\n        }\n\n        /**\n         * Scrolls the a given position.\n         * @param {number} position\n        */\n        scrollTo(position) {\n            const handleRect = this.handle.getBoundingClientRect();\n            const sliderRect = this.slider.getBoundingClientRect();\n\n            const handleSizePercent = (handleRect[this.units.size] / sliderRect[this.units.size]) * 100;\n            // new position in %\n            let newPosPercents = (position / sliderRect[this.units.size]) * 100;\n\n            // the slider range in percents is [0 - 100 - handleSizePercent]\n            // if the new position is outside of this range - snap the handle and\n            // scroll to the top or to the bottom\n            if (newPosPercents < 0) newPosPercents = 0;\n            if (newPosPercents + handleSizePercent > 100) newPosPercents = 100 - handleSizePercent;\n            this.handlePosition = newPosPercents;\n\n            // dispatch an event in case something needs to be done on scroll\n            this.dispatchEvent(new CustomEvent('slider-scroll', { detail: { handlePosition: newPosPercents } }));\n        }\n\n        /**\n         * Called on wheel event of the mouse.\n         * Scrolls the slider in the position of which the wheel is rotated\n         * @param {WheelEvent} event\n        */\n        onWheel(event) {\n            const direction = (event.deltaY < 0) ? -1 : 1;\n            this.scrollTo(this.getNextScrollPosition(direction, this.step));\n        }\n\n        /**\n         * Called on click of the mouse.\n         * Updated the handle's position with one step towards the position of the\n         * mouse click.\n         * @param {MouseEvent} event\n        */\n        onClick(event) {\n            if (event.target.classList.contains('handle')) return;\n            let direction = -1;\n            if (this.handle.getBoundingClientRect()[this.units.position] < event[this.units.mouseAxisCoords]) direction = 1;\n            this.scrollTo(this.getNextScrollPosition(direction, this.step));\n        }\n\n        /**\n         * Gets the next value of the scroll.\n         * @param {number} direction\n         * @param {number} step\n         * @returns {number} - the new scroll position\n        */\n        getNextScrollPosition(direction, step = this.step) {\n            // get the current scroll postition in px\n            const scrollTop = this.handlePosition * this.slider.getBoundingClientRect()[this.units.size] / 100;\n            return scrollTop + (direction * step);\n        }\n    }\n\n    components__default[\"default\"].defineCustomElement('gameface-slider', Slider);\n\n    var template$1 = \"<!--Copyright (c) Coherent Labs AD. All rights reserved. Licensed under the MIT License. See License.txt in the project root for license information. -->\\n<div class=\\\"guic-scrollable-container-wrapper\\\">\\n    <div class=\\\"guic-scrollable-container\\\">\\n      <component-slot data-name=\\\"scrollable-content\\\"></component-slot>\\n    </div>\\n    <gameface-slider class=\\\"guic-slider-component\\\" orientation=\\\"vertical\\\"></gameface-slider>\\n</div>\\n\";\n\n    /* eslint-disable linebreak-style */\n\n    /**\n     * Scrollable container. If it's content overflows a scrollbar will appear.\n    */\n    class ScrollableContainer extends HTMLElement {\n        // eslint-disable-next-line require-jsdoc\n        static get observedAttributes() {\n            return ['automatic'];\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        get automatic() {\n            return this.hasAttribute('automatic');\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        set automatic(value) {\n            this._automatic = value;\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        attributeChangedCallback(name, oldValue, newValue) {\n            // boolean attributes' initial value is an empty string, so\n            // we need to check if the old value was null\n            if (oldValue !== null && !newValue) this.removeMutationObserver();\n            if (oldValue === null && newValue) this.initMutationObserver();\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        constructor() {\n            super();\n            this.template = template$1;\n            this.url = '/components/scrollable-container/template.html';\n\n            this.onScrollSlider = this.onScrollSlider.bind(this);\n            this.onScroll = this.onScroll.bind(this);\n            this.onResize = this.onResize.bind(this);\n        }\n\n        /**\n         * Called when the element is attached to the DOM.\n        */\n        connectedCallback() {\n            // load the template\n            components__default[\"default\"].loadResource(this)\n                .then((result) => {\n                    this.template = result.template;\n                    // render the component\n                    components__default[\"default\"].renderOnce(this);\n                    // do the initial setup - add event listeners, assign members\n\n                    this.setup();\n                    this.shouldShowScrollbar();\n                    if (this.automatic) this.initMutationObserver();\n                })\n                .catch(err => console.error(err));\n        }\n\n        /**\n         * Will initialize a mutation obeserver that will watch if the scrollbar should be visible or not\n         */\n        initMutationObserver() {\n            if (this.observer) this.removeMutationObserver();\n            this.observer = new MutationObserver(() => this.shouldShowScrollbar());\n\n            const options = {\n                attributes: true,\n                subtree: true,\n                childList: true,\n                attributesFilter: ['style', 'class'],\n            };\n\n            this.observer.observe(this, options);\n        }\n\n        /**\n         * Will remove mutation observer\n         */\n        removeMutationObserver() {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n\n        /**\n         * Set the scrollableContainer  and scrollbar members and attach event listeners.\n        */\n        setup() {\n            this.scrollableContainer = this.getElementsByClassName('guic-scrollable-container')[0];\n            this.scrollbar = this.getElementsByClassName('guic-slider-component')[0];\n\n            this.addEventListeners();\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        disconnectedCallback() {\n            this.removeEventListeners();\n        }\n\n        /**\n         * Add event listeners to handle resize, slider scroll\n         * and scroll of the scrollabe container.\n        */\n        addEventListeners() {\n            window.addEventListener('resize', this.onResize);\n            this.scrollbar.addEventListener('slider-scroll', this.onScrollSlider);\n            this.scrollableContainer.addEventListener('scroll', this.onScroll);\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        removeEventListeners() {\n            window.removeEventListener('resize', this.onResize);\n        }\n\n        /**\n         * Called on window resize\n         */\n        onResize() {\n            this.scrollbar.resize(this.scrollableContainer);\n        }\n\n        /**\n         * Called on scroll event of the slider.\n         * @param {CustomEvent} event\n        */\n        onScrollSlider(event) {\n            // get the new scroll position in pixels\n            const scrollTop = event.detail.handlePosition * this.scrollableContainer.scrollHeight / 100;\n            // set the new scroll position\n            this.scrollableContainer.scrollTop = scrollTop;\n            // force a scroll event as setting scrollTop doesn't automatically emit it\n            this.scrollableContainer.dispatchEvent(new CustomEvent('scroll'));\n        }\n\n        /**\n         * Called on scroll event of the scrollable container.\n         */\n        onScroll() {\n            // get the scroll position in percents\n            this.scrollPos = (this.scrollableContainer.scrollTop / this.scrollableContainer.scrollHeight) * 100;\n            // set the position of the scrollbar handle\n            this.scrollbar.handlePosition = this.scrollPos;\n        }\n\n        /**\n         * Shows a scrollbar.\n         * @param {HTMLElement} scrollbar\n        */\n        showScrollBar(scrollbar) {\n            scrollbar.style.display = 'block';\n        }\n\n        /**\n         * Hides a scrollbar.\n         * @param {HTMLElement} scrollbar\n        */\n        hideScrollBar(scrollbar) {\n            scrollbar.style.display = 'none';\n        }\n\n        /**\n         * Checks if a scrollbar should be visible.\n        */\n        shouldShowScrollbar() {\n            const scrollableContent = this.querySelector('[data-name=\"scrollable-content\"]');\n            components__default[\"default\"].waitForFrames(() => {\n                const scrollableContentRect = scrollableContent.getBoundingClientRect();\n                const boundingRect = this.getBoundingClientRect();\n                if (scrollableContentRect.height <= boundingRect.height) {\n                    return this.hideScrollBar(this.scrollbar);\n                }\n                this.showScrollBar(this.scrollbar);\n                this.scrollbar.resize(this.scrollableContainer);\n            });\n        }\n    }\n    components__default[\"default\"].defineCustomElement('gameface-scrollable-container', ScrollableContainer);\n\n    var template = \"<!--Copyright (c) Coherent Labs AD. All rights reserved. Licensed under the MIT License. See License.txt in the project root for license information. -->\\n<div class=\\\"guic-dropdown\\\">\\n    <div class=\\\"guic-dropdown-header\\\">\\n        <div class=\\\"guic-dropdown-selected-option\\\">Select an option</div>\\n        <div class=\\\"guic-dropdown-custom-select-arrow\\\"></div>\\n    </div>\\n    <div class=\\\"guic-dropdown-options-container guic-dropdown-hidden\\\">\\n        <gameface-scrollable-container class=\\\"scrollable-container-component\\\">\\n            <div slot=\\\"scrollable-content\\\" data-name=\\\"scrollable-content\\\">\\n                <div class=\\\"guic-dropdown-options\\\">\\n                    <component-slot data-name=\\\"option\\\"></component-slot>\\n                </div>\\n            </div>\\n        </gameface-scrollable-container>\\n    </div>\\n</div>\\n\";\n\n    /* eslint-disable linebreak-style */\n\n    const KEYCODES = components__default[\"default\"].KEYCODES;\n\n    const CustomElementValidator = components__default[\"default\"].CustomElementValidator;\n\n    /**\n     * Class definition of the gameface dropdown custom element\n     */\n    class GamefaceDropdown extends CustomElementValidator {\n        // eslint-disable-next-line require-jsdoc\n        constructor() {\n            super();\n            this.multiple = false;\n            this.collapsable = false;\n\n            this.selectedOption = null;\n            this.isOpened = false;\n            // the index of the currently selected option element\n            // the selectedList is intended to hold the indexes as they are from the allOptions getter.\n            this.selectedList = [];\n            this._hovered = 0;\n            this._pivotIndex = null;\n            this.template = template;\n\n            // save the built in array method so that we can use it for HTMLCollections\n            // without creating a new array each time\n            this.builtInIndexOf = [].indexOf;\n\n            // bound handlers\n            this.onDocumentClick = this.onDocumentClick.bind(this);\n            this.onClickOption = this.onClickOption.bind(this);\n            this.onKeydown = this.onKeydown.bind(this);\n            this.onClick = this.onClick.bind(this);\n            this.onMouseOverOption = this.onMouseOverOption.bind(this);\n            this.onMouseLeave = this.onMouseLeave.bind(this);\n        }\n\n        /**\n         * Returns the text content of the selected dropdown-option.\n         * @returns {String}\n        */\n        get value() {\n            if (this.isFormElement() && this.multiple) return this.selectedOptions.map(el => el.value);\n            if (this.selected) return this.selected.value || this.selected.textContent;\n\n            return '';\n        }\n\n        /**\n         * Returns all dropdown-option elements' indexes that don't have attribute disabled.\n         * @returns {Array<number>}\n        */\n        get enabledOptions() {\n            const enabled = [];\n            const allOptions = this.allOptions;\n\n            for (let i = 0; i < this.allOptions.length; i++) {\n                const option = allOptions[i];\n                if (!option.hasAttribute('disabled')) enabled.push(i);\n            }\n\n            return enabled;\n        }\n\n        /**\n         * Returns only the selected options from the allOptions array.\n         * @returns {Array<HTMLElement>}\n        */\n        get selectedOptions() {\n            return this.selectedList.map(selected => this.allOptions[selected]);\n        }\n\n        /**\n         * Returns the length of the selected options.\n         * @returns {number}\n        */\n        get selectedLength() {\n            return this.selectedList.length;\n        }\n\n        /**\n         * Returns the index of the last selected option\n         * @returns {number}\n        */\n        get lastSelectedIndex() {\n            return this.selectedLength ? this.selectedList[this.selectedLength - 1] : 0;\n        }\n\n        /**\n         * Returns the element from which a selection sequence has began.\n         * @returns {HTMLElement}\n        */\n        get pivotElement() {\n            return this.allOptions[this._pivotIndex] || this.allOptions[0];\n        }\n\n        /**\n         * Returns a boolean value that indicates if the dropdown is disabled.\n         * @returns {boolean}\n        */\n        get disabled() {\n            return this.hasAttribute('disabled');\n        }\n\n        /**\n         * Sets the disabled attribute of the dropdown.\n         * Also adds/removes the tabindex attribute to include/exclude the element from the focusable elements.\n         * @param {boolean} value - make disabled if true, make enabled if false.\n        */\n        set disabled(value) {\n            if (value) {\n                this.classList.add('guic-dropdown-disabled');\n                this.setAttribute('disabled', '');\n                this.setAttribute('tabindex', '-1');\n            } else {\n                this.classList.remove('guic-dropdown-disabled');\n                this.removeAttribute('disabled');\n                this.setAttribute('tabindex', '1');\n            }\n        }\n\n        /**\n         * Returns the currently selected option element.\n         * @returns {HTMLElement}\n        */\n        get selected() {\n            const allOptions = this.allOptions;\n            return allOptions[this.lastSelectedIndex] || allOptions[0];\n        }\n\n        /**\n         * Sets the currently selected option.\n         * Updates the select header if the select is single.\n         * Dispatches a change event to notify that the active option has been changed.\n         * @param {HTMLElement} option\n        */\n        set selected(option) {\n            // reset\n            if (option === null) return this.resetSelection();\n\n            if (!this.multiple) {\n                this.resetSelection();\n                this.updateSelectHeader(option);\n            }\n\n            this.select(option);\n            this.dispatchChangeEvent(option);\n        }\n\n        /**\n        * Returns the currently hovered element's index.\n        * @returns {Number}\n        */\n        get hoveredElIndex() {\n            return this._hovered;\n        }\n\n        /**\n         * Sets the currently hovered element's index.\n         * @param {Number} value\n        */\n        set hoveredElIndex(value) {\n            if (!this.allOptions[value]) return;\n            return this._hovered = value;\n        }\n\n        /**\n         * Call the built in Array.prototype.indexOf method.\n         * This function allows the user to use the indexOf\n         * function without needing to use .call.\n         *\n         * @argument {any} args\n         * @returns {number}\n        */\n        indexOf(...args) {\n            return this.builtInIndexOf.call(...args);\n        }\n\n        /**\n         * Checks if an element is selected by index.\n         * @param {number} index - the index of the element.\n         * @returns {boolean}\n        */\n        isSelected(index) {\n            if (typeof index === 'number') return this.selectedList.indexOf(index) > -1;\n            console.warn(`Using Dropdwon.isSelected with an unsupported argument type - make sure you passed an index of type number.`);\n            return false;\n        }\n\n        /**\n         * Validation method. Checks if there is a selected element by\n         *  checking the length of the selectedOptions.\n         * @returns {boolean} - true if the array is empty and false if not.\n        */\n        valueMissing() {\n            return !this.selectedOptions.length;\n        }\n\n        /**\n         * Get all options of the selected list and:\n         * 1. remove their active class\n         * 2. remove their selected attribute\n         * 3. reset the values of the selectedList and the hoveredElIndex.\n        */\n        resetSelection() {\n            for (const index of this.selectedList) {\n                const option = this.allOptions[index];\n                this.removeActiveClass(option);\n                option.removeAttribute('selected');\n            }\n            this.selectedList = [];\n            this.hoveredElIndex = 0;\n        }\n\n        /**\n         * Update the header of the select. Clone the content of the selected option\n         * to the content of the header. If the option is falsy - do nothing.\n         * @param {HTMLElement} option\n        */\n        updateSelectHeader(option) {\n            // check if cloneNode exists in case the user has set the selected\n            // to something that is not an HTMLElement instance\n            if (!option || !option.cloneNode) return;\n            components__default[\"default\"].transferContent(option.cloneNode(true), this.querySelector('.guic-dropdown-selected-option'));\n        }\n\n        /**\n         * Select an option.\n         * Add the active class and the selected attribute.\n         * Add the option's index to the selectedList array.\n         * @param {HTMLElement} option - the option that has to be selected.\n         */\n        select(option) {\n            const index = this.indexOf(this.allOptions, option);\n            if (!option || this.isSelected(index)) return;\n\n            this.addActiveClass(option);\n            option.setAttribute('selected', true);\n            this.selectedList.push(index);\n        }\n\n        /**\n         * Deselect an option.\n         * @param {HTMLElement} option - the option that has to be deselected.\n         * Remove the active class and the selected attribute.\n         * Remove the option's index from the selectedList array.\n        */\n        deselect(option) {\n            const index = this.indexOf(this.allOptions, option);\n            this.removeActiveClass(option);\n            option.removeAttribute('selected');\n            this.selectedList.splice(this.selectedList.indexOf(index), 1);\n        }\n\n        /**\n         * Select the options that have the selected attribute.\n         * This is executed when the dropdown is connected to the DOM.\n         * @returns {void}\n        */\n        preselectOptions() {\n            if (this.multiple) return this.setInitialMultipleSelection();\n            this.setInitialSingleSelection();\n        }\n\n        /**\n         * Select all options that have the selected attribute\n        */\n        setInitialMultipleSelection() {\n            for (const option of this.allOptions) {\n                if (!option.hasAttribute('selected')) continue;\n                this.setSelected(option);\n            }\n        }\n\n        /**\n         * Select the last found option that has the selected attribute.\n         * If none is found - selects the first element from the options list\n        */\n        setInitialSingleSelection() {\n            const allSelected = this.querySelectorAll('[selected]');\n            const selectedLength = allSelected.length;\n            // use the last option that has the selected attribute or the first element in the options list\n            const selectedDefault = selectedLength ? allSelected[selectedLength - 1] : this.selected;\n            this.setSelected(selectedDefault);\n        }\n\n        /**\n         * Setup the multiple dropdown.\n         * Hide the header element.\n         * Expand the options list by calling the click callback after 6 frames\n         * because of the cohtml style resolver and the scrollable container initialization.\n        */\n        setupMultiple() {\n            this.querySelector('.guic-dropdown-header').style.display = 'none';\n            components__default[\"default\"].waitForFrames(() => this.onClick(), 6);\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        connectedCallback() {\n            components__default[\"default\"].loadResource(this)\n                .then((result) => {\n                    this.template = result.template;\n                    components__default[\"default\"].renderOnce(this);\n\n                    // Check the type after the component has rendered.\n                    this.multiple = this.hasAttribute('multiple');\n                    this.collapsable = this.hasAttribute('collapsable');\n                    // make this element focusable\n                    this.setAttribute('tabindex', '1');\n\n                    if (this.multiple && !this.collapsable) this.setupMultiple();\n                    if (this.disabled) this.disabled = true;\n\n                    this.allOptions = this.querySelector('.guic-dropdown-options').children;\n\n                    this.preselectOptions();\n                    this.attachEventListeners();\n                })\n                .catch(err => console.error(err));\n        }\n\n        /**\n         * Dispatch a custom event to notify listeners for selection change.\n         * @param {HTMLElement} option - the newly selected option.\n        */\n        dispatchChangeEvent(option) {\n            this.dispatchEvent(new CustomEvent('change', {\n                detail: { target: option },\n            }));\n        }\n\n        /**\n         * Called on document click.\n         * Closes the options panel if it's opened.\n         * @param {MouseEvent} event - the current event object.\n        */\n        onDocumentClick(event) {\n            if (this.contains(event.target)) return;\n            if (this.multiple && !this.collapsable) return;\n            this.closeOptionsPanel();\n        }\n\n        /**\n         * Focuses an option by index. Updates the index of the hovered element.\n         * @param {number} nextOptionIndex - the index of the option that has to be focused.\n        */\n        focusOption(nextOptionIndex) {\n            this.setSelected(this.allOptions[nextOptionIndex], true);\n            this.hoveredElIndex = nextOptionIndex;\n        }\n\n        /**\n         * Check if a number is out of a given range.\n         * @param {number} current - the current value of the number.\n         * @param {number} limit - the limit that current must not exceed.\n         * @param {number} direction - the direction specifies on which side of the limit the current must be.\n         * @returns {boolean} - true if it is in range, false if it is not.\n         */\n        isOutOfRange(current, limit, direction) {\n            return direction === 1 ? current > limit : current < limit;\n        }\n\n        /**\n         * Select all enabled options from a given range defined by start and end indexes.\n         * @param {number} start - the low limit of the range.\n         * @param {number} end - the higher limit of the range.\n         * @param {number} direction - the direction of the selection.\n         * @param {boolean} reset - whether to reset the current selection or not:\n         * In a single selection we must reset the selected list, but in multiple we must not.\n         */\n        selectFromTo(start, end, direction = 1, reset = true) {\n            const enabledOptions = this.enabledOptions;\n            const allOptions = this.allOptions;\n\n            if (!enabledOptions.length) return;\n            if (reset) this.resetSelection();\n\n            // loop all enabled indexes and select the corresponding\n            // options from the full list\n            do {\n                this.selected = allOptions[enabledOptions[start]];\n                start += direction;\n            } while (!this.isOutOfRange(start, end, direction));\n\n            this.scrollToSelectedElement();\n        }\n\n        /**\n         * Select all options.\n         * Used for keyboard selection when holding Ctrl + A.\n         */\n        selectAll() {\n            this.selected = null;\n            const allOptions = this.allOptions;\n\n            this.enabledOptions.forEach(index => this.selected = allOptions[index]);\n        }\n\n        /**\n         * Toggles the selection of an element by given index.\n         * If the element is selected - deselect it.\n         * @param {number} currentOptionIndex - the index of the currently selected option.\n         * @param {number} direction - the direction in which the selection is going.\n         * @param {number[]} enabledOptions\n         */\n        toggleSelection(currentOptionIndex, direction, enabledOptions) {\n            const nextOptionIndex = currentOptionIndex + direction; // next enabled index\n            const nextFullListIndex = enabledOptions[nextOptionIndex]; // corresponding index in the allOptions list\n\n            if (this.isSelected(nextFullListIndex)) {\n                const indexToBeRemoved = enabledOptions[currentOptionIndex];\n                this.deselect(this.allOptions[indexToBeRemoved]);\n            } else {\n                this.selectFromTo(currentOptionIndex, nextOptionIndex, direction, 0);\n            }\n\n            this.scrollToSelectedElement();\n        }\n\n        /**\n         * Handles the focus of the dropdown options\n         * when the keyboard is used to navigate through the options.\n         * @param {number} keyCode - the code of the current key that is being pressed.\n        */\n        handleKeyboardFocus(keyCode) {\n            if (this.multiple) return;\n\n            switch (keyCode) {\n                case KEYCODES.ENTER:\n                    this.focusOption(this.hoveredElIndex);\n                    this.closeOptionsPanel();\n                    return;\n                case KEYCODES.TAB:\n                case KEYCODES.ESCAPE:\n                    this.closeOptionsPanel();\n                    return;\n            }\n        }\n\n        /**\n         * Handles the multiple selection of the dropdown options when the keyboard is used.\n         * @param {number} keyCode - the code of the current key that is being pressed.\n         * @param {Array<number>} enabledOptions - the list of the indexes of the enabled options.\n         * @param {number} currentOptionIndex - the index of the currently selected option.\n        */\n        handleMultipleKeyboardSelection(keyCode, enabledOptions, currentOptionIndex) {\n            switch (keyCode) {\n                case KEYCODES.DOWN:\n                case KEYCODES.RIGHT:\n                    this.toggleSelection(currentOptionIndex, 1, enabledOptions);\n                    break;\n                case KEYCODES.UP:\n                case KEYCODES.LEFT:\n                    this.toggleSelection(currentOptionIndex, -1, enabledOptions);\n                    break;\n                case KEYCODES.HOME:\n                    this.selectFromTo(enabledOptions.indexOf(this._pivotIndex), 0, -1);\n                    break;\n                case KEYCODES.END:\n                    this.selectFromTo(enabledOptions.indexOf(this._pivotIndex), this.allOptions.length - 1, 1);\n                    break;\n            }\n        }\n\n        /**\n         * Handles the single selection of the dropdown options when the keyboard is used.\n         * @param {number} keyCode - the code of the current key that is being pressed.\n         * @param {Array<number>} enabledOptions - the list of the indexes of the enabled options.\n         * @param {number} currentOptionIndex - the index of the currently selected option.\n        */\n        handleSingleKeyboardSelection(keyCode, enabledOptions, currentOptionIndex) {\n            let nextElement = currentOptionIndex;\n\n            switch (keyCode) {\n                case KEYCODES.HOME:\n                case KEYCODES.PAGE_UP:\n                    // focus first\n                    nextElement = 0;\n                    break;\n                case KEYCODES.END:\n                case KEYCODES.PAGE_DOWN:\n                    // focus last\n                    nextElement = enabledOptions.length - 1;\n                    break;\n                case KEYCODES.UP:\n                case KEYCODES.LEFT:\n                    nextElement = currentOptionIndex - 1;\n                    if (this.isOutOfRange(nextElement, 0, -1)) return;\n                    break;\n                case KEYCODES.DOWN:\n                case KEYCODES.RIGHT:\n                    nextElement = currentOptionIndex + 1;\n                    if (this.isOutOfRange(nextElement, enabledOptions.length - 1, 1)) return;\n                    break;\n            }\n\n            this.resetSelection();\n            this.setSelected(this.allOptions[enabledOptions[nextElement]], true);\n        }\n\n        /**\n         * Called on keydown. Used to handle option selection via the keyboard.\n         * @param {KeyboardEvent} event - the current event object\n        */\n        onKeydown(event) {\n            const keyCode = event.keyCode;\n            const ctrlKey = event.ctrlKey;\n            const shiftKey = event.shiftKey;\n            const enabledOptions = this.enabledOptions;\n            const currentOptionIndex = enabledOptions.indexOf(this.lastSelectedIndex);\n\n            if (shiftKey && this.multiple) {\n                // pivotIndex is the LAST selected - last clicked or selected via key\n                if (this._pivotIndex === null) this._pivotIndex = this.selectedList[this.selectedLength - 1];\n                this.handleMultipleKeyboardSelection(keyCode, enabledOptions, currentOptionIndex);\n            }\n\n            if (ctrlKey && keyCode === KEYCODES.LETTER_A && this.multiple) {\n                event.preventDefault();\n                this.selectAll();\n            }\n\n            if (!ctrlKey && !shiftKey && !event.altKey) {\n                this.handleKeyboardFocus(keyCode);\n                this.handleSingleKeyboardSelection(keyCode, enabledOptions, currentOptionIndex);\n            }\n        }\n\n        /**\n         * Checks if the current user agent is Cohtml\n         * @returns {boolean}\n        */\n        isGameface() {\n            return navigator.userAgent.match('Cohtml');\n        }\n\n        /**\n         * Called on click on the select element.\n         * Toggles the options panel, shows the scrollbar and scrolls to\n         * the selected option element.\n         * @returns {void}\n        */\n        onClick() {\n            if (this.disabled) return;\n            if (this.isOpened) return this.closeOptionsPanel();\n\n            this.initScrollbar();\n            this.openOptionsPanel();\n            this.scrollToSelectedElement();\n        }\n\n        /**\n         * Method for initializing the scrollbar\n         * @returns {void}\n         */\n        initScrollbar() {\n            const scrollableContainer = this.querySelector('gameface-scrollable-container');\n\n            if (!this.isGameface()) return scrollableContainer.querySelector('.guic-scrollable-container').classList.add('full-width');\n            scrollableContainer.shouldShowScrollbar();\n        }\n\n        /**\n         * Attaches event listeners.\n        */\n        attachEventListeners() {\n            // handle keyboard\n            this.addEventListener('keydown', this.onKeydown);\n            // handle click on the selected element placeholder\n            this.querySelector('.guic-dropdown-selected-option').addEventListener('click', this.onClick);\n            this.toggleOptionsListeners('addEventListener');\n        }\n\n        /**\n         * Loop all options and add or remove event listeners.\n         * @param {string} methodName - the name of the method that should be\n         * executed on the option - addEventListener or removeEventListener.\n        */\n        toggleOptionsListeners(methodName) {\n            const options = this.querySelectorAll('dropdown-option');\n\n            for (let i = 0; i < options.length; i++) {\n                const option = options[i];\n                option[methodName]('selected-option', this.onClickOption);\n                option[methodName]('mouseenter', this.onMouseOverOption);\n                option[methodName]('mouseleave', this.onMouseLeave);\n            }\n        }\n\n        /**\n         * Handler for mouse leave\n         * @param {HTMLEvent} event\n         * @returns {void}\n         */\n        onMouseLeave(event) {\n            const index = this.indexOf(this.allOptions, event.target);\n            if (this.multiple && this.selectedList.indexOf(index) > -1) return;\n            this.removeActiveClass(event.target);\n        }\n\n        /**\n         * Adding active class\n         * @param {HTMLElement} element\n         */\n        addActiveClass(element) {\n            element.classList.add('guic-dropdown-option-active');\n        }\n\n        /**\n         * Removing active class\n         * @param {HTMLElement} element\n         */\n        removeActiveClass(element) {\n            element.classList.remove('guic-dropdown-option-active');\n        }\n\n        /**\n         * Called on mouseover an option element.\n         * @param {MouseEvent} event - the current event object.\n        */\n        onMouseOverOption(event) {\n            const options = this.allOptions;\n            const target = event.target;\n\n            if (!this.multiple) this.removeActiveClass(this.selected);\n            this.addActiveClass(target);\n            this.hoveredElIndex = this.indexOf(options, event.target);\n        }\n\n        /**\n         * Called when the option of a multiple select is clicked.\n         * Selects the target if it is unselected and deselects it if it is selected.\n         * @param {Event} event - the event object.\n         * @returns {void}\n        */\n        onClickMultipleOptions(event) {\n            // reset the selectedList if only one option is selected\n            if (!event.detail.ctrlKey) this.selected = null;\n            if (event.target.hasAttribute('selected')) return this.deselect(event.target);\n\n            this.setSelected(event.target);\n            this.focus();\n        }\n\n        /**\n         * Called on click of an option of a single select.\n         * Selects the target and closes the options list.\n         * @param {HTMLEvent} event\n        */\n        onClickSingleOption(event) {\n            this.setSelected(event.target);\n            this.closeOptionsPanel();\n        }\n\n        /**\n         * Called when an option element is clicked.\n         * Updates the selected member and closes the options panel.\n         * @param {MouseEvent} event - the current event object.\n         * @returns {void}\n        */\n        onClickOption(event) {\n            // handle multiple\n            if (this.multiple) return this.onClickMultipleOptions(event);\n            this.onClickSingleOption(event);\n        }\n\n        /**\n         * Hides the options panel.\n        */\n        closeOptionsPanel() {\n            const optionsPanel = this.querySelector('.guic-dropdown-options-container');\n            this.isOpened = false;\n            optionsPanel.classList.add('guic-dropdown-hidden');\n            document.removeEventListener('click', this.onDocumentClick);\n            this.toggleOptionsListeners('removeEventListener');\n        }\n\n        /**\n         * Shows the options panel.\n         * Adds the active class to the currently selected option.\n         * Focuses the dropdown element.\n        */\n        openOptionsPanel() {\n            const optionsPanel = this.querySelector('.guic-dropdown-options-container');\n            this.isOpened = true;\n            optionsPanel.classList.remove('guic-dropdown-hidden');\n            this.focus();\n            this.toggleOptionsListeners('addEventListener');\n            document.addEventListener('click', this.onDocumentClick);\n        }\n\n        /**\n         * Sets the selected element of the dropdown and scrolls to it.\n         * @param {DropdownOption} element - the option element.\n         * @param {boolean} [scroll=false]\n        */\n        setSelected(element, scroll = false) {\n            this.selected = element;\n            this._pivotIndex = this.lastSelectedIndex;\n            this.hoveredElIndex = this.lastSelectedIndex;\n\n            if (scroll) this.scrollToSelectedElement();\n        }\n\n        /**\n         * Scrolls to the selected option element.\n        */\n        scrollToSelectedElement() {\n            const scrollbleContainer = this.querySelector('.guic-scrollable-container');\n            const option = this.querySelector('dropdown-option');\n            const optionSize = option.getBoundingClientRect().height;\n\n            // the scroll position in pixels is equal to the height of the selected\n            // option multiplied by its index\n            clearTimeout(this.timeout);\n            document.body.classList.add('guic-dropdown-disable-hover');\n\n            const scrollInPX = this.lastSelectedIndex * optionSize;\n            scrollbleContainer.scrollTop = scrollInPX;\n            scrollbleContainer.dispatchEvent(new CustomEvent('scroll'));\n\n            this.timeout = setTimeout(() => {\n                document.body.classList.remove('guic-dropdown-disable-hover');\n            }, 500);\n        }\n    }\n\n    /**\n     * Class definition of the gameface dropdown option custom element\n     */\n    class DropdownOption extends HTMLElement {\n        // eslint-disable-next-line require-jsdoc\n        static get observedAttributes() {\n            return ['disabled'];\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        get value() {\n            return this.getAttribute('value') || this.textContent;\n        }\n\n        /**\n         * Called when an attribute changes\n        */\n        attributeChangedCallback() {\n            if (this.hasAttribute('disabled')) {\n                this.classList.add('guic-dropdown-option-disabled');\n                this.removeEventListener('click', this.onClick);\n            } else {\n                this.classList.remove('guic-dropdown-option-disabled');\n                this.addEventListener('click', this.onClick);\n            }\n        }\n\n        // eslint-disable-next-line require-jsdoc\n        constructor() {\n            super();\n            this.attributeChangedCallback();\n        }\n\n        /**\n         * Click event handler\n         * @param {HTMLEvent} event\n         */\n        onClick(event) {\n            event.target.dispatchEvent(new CustomEvent('selected-option', { detail: { ctrlKey: event.ctrlKey } }));\n        }\n    }\n\n    components__default[\"default\"].defineCustomElement('dropdown-option', DropdownOption);\n    components__default[\"default\"].defineCustomElement('gameface-dropdown', GamefaceDropdown);\n\n    return GamefaceDropdown;\n\n}));\n\n\n//# sourceURL=webpack://gameuicomponents/./components/dropdown/umd/dropdown.development.js?");

/***/ }),

/***/ "./lib/components.js":
/*!***************************!*\
  !*** ./lib/components.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Coherent Labs AD. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nconst newLinesRegExp = new RegExp('^\\s+|\\s+$', 'g');\r\nconst NATIVE_TEXT_FIELD_ELEMENTS = ['input', 'textarea'];\r\n\r\n/**\r\n * Checks if the passed element is a native text field\r\n * @param {HTMLElement} element\r\n * @returns {boolean}\r\n */\r\nfunction isNativeTextField(element) {\r\n    return NATIVE_TEXT_FIELD_ELEMENTS.indexOf(element.tagName.toLowerCase()) > -1;\r\n}\r\n\r\n// eslint-disable-next-line max-lines-per-function, require-jsdoc\r\nconst components = function () {\r\n    /**\r\n     * This is the base class that holds all functionality shared between custom components\r\n     * and native elements\r\n     */\r\n    class Validator {\r\n        /**\r\n         * Check if element is child of a form\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n         */\r\n        static isFormElement(element) {\r\n            element = element.parentElement;\r\n            while (element) {\r\n                if (element.tagName === 'GAMEFACE-FORM-CONTROL' || element.tagName === 'gameface-form-control') return true;\r\n                element = element.parentElement;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Check if element value is bigger than element maxlength\r\n         * @returns {boolean}\r\n         */\r\n        static tooLong() {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Check if element value is less than element minlength\r\n         * @returns {boolean}\r\n         */\r\n        static tooShort() {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Checks if the value of an element is bigger than its max attribute\r\n         * @returns {boolean}\r\n        */\r\n        static rangeOverflow() {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Checks if the value of an element is smaller than its min attribute\r\n         * @returns {boolean}\r\n        */\r\n        static rangeUnderflow() {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Check if element is required and its value is missing\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n         */\r\n        static valueMissing(element) {\r\n            return element.hasAttribute('required') && !element.value;\r\n        }\r\n\r\n        /**\r\n         * Check if element name is missing\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n         */\r\n        static nameMissing(element) {\r\n            return !element.name && !element.getAttribute('name');\r\n        }\r\n\r\n        /**\r\n         * Check if an element is required\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n        */\r\n        static isRequired(element) {\r\n            return element.hasAttribute('required');\r\n        }\r\n\r\n        /**\r\n         * Checks if there is a custom error for the element\r\n         * @returns {boolean}\r\n         */\r\n        static customError() {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Checks if element is going to be serialized.\r\n         * If an element doesn't have a name it will not be serialized.\r\n         * Used to determine if an element should be validated.\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n        */\r\n        static willSerialize(element) {\r\n            return this.nameMissing(element) ? false : true;\r\n        }\r\n\r\n        /* eslint-disable require-jsdoc */\r\n        static isBadURL() {\r\n            return false;\r\n        }\r\n\r\n        static isBadEmail() {\r\n            return false;\r\n        }\r\n        /* eslint-enable require-jsdoc */\r\n    }\r\n\r\n    /**\r\n     * The NativeElementValidator uses the methods from the Validator class\r\n     * All native elements tha don't support methods like isFormElement, tooLong, tooShort\r\n     * etc.. will be wrapped in this class in order to enable us to validate native and\r\n     * custom elements using the same methods.\r\n     * */\r\n    class NativeElementValidator {\r\n        /* eslint-disable require-jsdoc */\r\n\r\n        constructor(element) {\r\n            this.element = element;\r\n        }\r\n\r\n        isFormElement() {\r\n            return Validator.isFormElement(this.element);\r\n        }\r\n\r\n        tooLong() {\r\n            if (isNativeTextField(this.element)) return TextFieldValidator.tooLong(this.element);\r\n            return Validator.tooLong();\r\n        }\r\n\r\n        tooShort() {\r\n            if (isNativeTextField(this.element)) return TextFieldValidator.tooShort(this.element);\r\n            return Validator.tooShort();\r\n        }\r\n\r\n        rangeOverflow() {\r\n            if (isNativeTextField(this.element)) return TextFieldValidator.rangeOverflow(this.element);\r\n            return Validator.rangeOverflow();\r\n        }\r\n\r\n        rangeUnderflow() {\r\n            if (isNativeTextField(this.element)) return TextFieldValidator.rangeUnderflow(this.element);\r\n            return Validator.rangeUnderflow();\r\n        }\r\n\r\n        valueMissing() {\r\n            return Validator.valueMissing(this.element);\r\n        }\r\n\r\n        nameMissing() {\r\n            return Validator.nameMissing(this.element);\r\n        }\r\n\r\n        customError() {\r\n            return Validator.customError();\r\n        }\r\n\r\n        isRequired() {\r\n            return Validator.isRequired(this.element);\r\n        }\r\n\r\n        willSerialize() {\r\n            return Validator.willSerialize(this.element);\r\n        }\r\n\r\n        isBadEmail() {\r\n            if (isNativeTextField(this.element)) return TextFieldValidator.isBadEmail(this.element);\r\n            return false;\r\n        }\r\n\r\n        isBadURL() {\r\n            if (isNativeTextField(this.element)) return TextFieldValidator.isBadURL(this.element);\r\n            return false;\r\n        }\r\n        /* eslint-enable require-jsdoc */\r\n    }\r\n\r\n    /**\r\n     * The CustomElementValidator is inherited by custom elements in order to gain the\r\n     * validation function from the Validator class.\r\n     * This class can not be used to wrap the native elements as it inherits the\r\n     * HTMLElement which can not be instantiated using the new keyword.\r\n    */\r\n    class CustomElementValidator extends HTMLElement {\r\n        /* eslint-disable require-jsdoc */\r\n\r\n        isFormElement() {\r\n            return Validator.isFormElement(this);\r\n        }\r\n\r\n        tooLong() {\r\n            return Validator.tooLong(this);\r\n        }\r\n\r\n        tooShort() {\r\n            return Validator.tooShort(this);\r\n        }\r\n\r\n        valueMissing() {\r\n            return Validator.valueMissing(this);\r\n        }\r\n\r\n        nameMissing() {\r\n            return Validator.nameMissing(this);\r\n        }\r\n\r\n        customError() {\r\n            return Validator.customError();\r\n        }\r\n\r\n        isRequired() {\r\n            return Validator.isRequired(this);\r\n        }\r\n\r\n        rangeOverflow() {\r\n            return Validator.rangeOverflow(this);\r\n        }\r\n\r\n        rangeUnderflow() {\r\n            return Validator.rangeUnderflow(this);\r\n        }\r\n\r\n        willSerialize() {\r\n            return Validator.willSerialize(this);\r\n        }\r\n\r\n        isBadEmail() {\r\n            return Validator.isBadEmail(this);\r\n        }\r\n\r\n        isBadURL() {\r\n            return Validator.isBadURL(this);\r\n        }\r\n        /* eslint-enable require-jsdoc */\r\n    }\r\n\r\n    /**\r\n     * Class that implements the commong validation methods for the text fields\r\n     */\r\n    class TextFieldValidator {\r\n        /**\r\n         * Most of the custom elements will not need this check however,\r\n         * we call all validation methods in order to determine if an element is valid.\r\n         * Each element that needs this check implements it itself.\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n         */\r\n        static tooLong(element) {\r\n            const maxLength = element.getAttribute('maxlength');\r\n            if (!maxLength) return false;\r\n            return element.value.length > parseFloat(maxLength);\r\n        }\r\n\r\n        /**\r\n        * Most of the custom elements will not need this check however,\r\n        * we call all validation methods in order to determine if an element is valid.\r\n        * Each element that needs this check implements it itself.\r\n        * @param {HTMLElement} element\r\n        * @returns {boolean}\r\n        */\r\n        static tooShort(element) {\r\n            const minLength = element.getAttribute('minlength');\r\n            if (!minLength) return false;\r\n            return element.value.length < parseFloat(minLength);\r\n        }\r\n\r\n        /**\r\n        * Most of the custom elements will not need this check however,\r\n        * we call all validation methods in order to determine if an element is valid.\r\n        * Each element that needs this check implements it itself.\r\n        * @param {HTMLElement} element\r\n        * @returns {boolean}\r\n        */\r\n        static rangeOverflow(element) {\r\n            const max = element.getAttribute('max');\r\n            if (!max) return false;\r\n            return parseFloat(element.value) > parseFloat(max);\r\n        }\r\n\r\n        /**\r\n         * Most of the custom elements will not need this check however,\r\n         * we call all validation methods in order to determine if an element is valid.\r\n         * Each element that needs this check implements it itself.\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n         */\r\n        static rangeUnderflow(element) {\r\n            const min = element.getAttribute('min');\r\n            if (!min) return false;\r\n            return parseFloat(element.value) < parseFloat(min);\r\n        }\r\n\r\n        /**\r\n         * Checks if the text field with type url has a valid url by its pattern\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n         */\r\n        static isBadURL(element) {\r\n            if (element.getAttribute('type') !== 'url') return false;\r\n            const pattern = element.pattern || element.getAttribute('pattern');\r\n            if (!pattern) return false;\r\n            if (!element.value.match(pattern)) return true;\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Checks if the text field element with type email is valid\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n         */\r\n        static isBadEmail(element) {\r\n            if (element.getAttribute('type') !== 'email') return false;\r\n            if (!element.value.match('@')) return true;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const GF_COMPONENT_SLOT_TAG_NAME = 'component-slot';\r\n    const KEYCODES = {\r\n        DOWN: 40,\r\n        LEFT: 37,\r\n        RIGHT: 39,\r\n        UP: 38,\r\n        HOME: 36,\r\n        END: 35,\r\n        ENTER: 13,\r\n        ESCAPE: 27,\r\n        TAB: 9,\r\n        SHIFT: 16,\r\n        CTRL: 17,\r\n        SPACE: 32,\r\n        PAGE_UP: 33,\r\n        PAGE_DOWN: 34,\r\n        LETTER_A: 65,\r\n    };\r\n\r\n    /**\r\n     * Class that defines the Gameface components\r\n     */\r\n    class GamefaceComponents {\r\n        // eslint-disable-next-line require-jsdoc\r\n        constructor() {\r\n            this.definedElements = {};\r\n            this.imported = this.imported || [];\r\n            this.KEYCODES = KEYCODES;\r\n            this.cachedComponents = {};\r\n\r\n            this.CustomElementValidator = CustomElementValidator;\r\n            this.NativeElementValidator = NativeElementValidator;\r\n            this.TextFieldValidator = TextFieldValidator;\r\n            this.Validator = Validator;\r\n        }\r\n\r\n        /**\r\n         * Create and add a script tag with given url.\r\n         * @param {string} url\r\n        */\r\n        importScript(url) {\r\n            const script = document.createElement('script');\r\n            script.setAttribute('src', url);\r\n            document.body.appendChild(script);\r\n        }\r\n\r\n        /**\r\n         * Loads an html by given url.\r\n         * @param {string} url\r\n         * @returns {promise} resolved with the html as text.\r\n        */\r\n        loadHTML(url) {\r\n            return this.loadResource(url).then((result) => {\r\n                return result.template;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Creates a promise which resolves when a custom element was defined.\r\n         * Saves the promise for each defined component.\r\n         * @param {string} name - the name of the custom element\r\n         * @returns {promise} - the previously saved promise it any or a new one\r\n        */\r\n        whenDefined(name) {\r\n            if (this.definedElements[name] !== undefined) {\r\n                return this.definedElements[name].promise;\r\n            }\r\n\r\n            const defined = this.definedElements[name] = {};\r\n            defined.promise = new Promise((resolve, reject) => {\r\n                defined.resolve = resolve;\r\n                defined.reject = reject;\r\n            });\r\n            return defined.promise;\r\n        }\r\n\r\n        /**\r\n         * Defines a custom element.\r\n         * @param {string} name - the name of the element.\r\n         * @param {Object} element - the object which describes the element.\r\n        */\r\n        defineCustomElement(name, element) {\r\n            if (this.definedElements[name]) return;\r\n            this.whenDefined(name);\r\n            customElements.define(name, element);\r\n            this.definedElements[name].resolve(element);\r\n        }\r\n\r\n        /**\r\n         * Imports a component by given url.\r\n         * It will automatically try to import style.css and script.js if these\r\n         * files' names were not explicitly specified.\r\n         * @param {string} url - the url of the component\r\n        */\r\n        importComponent(url) {\r\n            requestAnimationFrame(() => {\r\n                this.importScript(url + '/script.js');\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Removes back and forward slashes from string\r\n         * @param {string} path\r\n         * @returns {string}\r\n         */\r\n        removeSlashes(path) {\r\n            return path.replace(/[/|\\\\]/g, '');\r\n        }\r\n\r\n        /**\r\n         * Remove new lines from the beginning of templates,\r\n         * because template.firstChild.cloneNode will clone an empty\r\n         * string and will return an empty template.\r\n         * @param {string} template\r\n         * @returns {string}\r\n        */\r\n        removeNewLines(template) {\r\n            return template.replace(newLinesRegExp, '').trim();\r\n        }\r\n\r\n        /**\r\n         * Removes the copyright notice from the template\r\n         * @param {string} template\r\n         * @returns {string} the template without the copyright notice\r\n        */\r\n        removeCopyrightNotice(template) {\r\n            return template.replace(`<!--Copyright (c) Coherent Labs AD. All rights reserved. Licensed under the MIT License. See License.txt in the project root for license information. -->`, '').trim();\r\n        }\r\n\r\n        /**\r\n         * Used when the element has already been rendered.\r\n         * Return the already rendered template instead of\r\n         * loading and slotting its elements.\r\n         *\r\n         * @param {HTMLElement} component - the component that was rendered\r\n         * @returns {Promise<HTMLElement>} - a promise that will resolve with the rendered template\r\n        */\r\n        resolveWithTemplate(component) {\r\n            return new Promise((resolve) => {\r\n                resolve({\r\n                    template: component.template.cloneNode(true),\r\n                    url: component.url,\r\n                });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Uses an XMLHttpRequest to load an external file.\r\n         * @param {string} component - the url of the file.\r\n         * @returns {promise} - a promise that is resolved with the file's text content.\r\n        */\r\n        loadResource(component) {\r\n            if (component.template && typeof component.template === 'string') {\r\n                if (component.isRendered) return this.resolveWithTemplate(component);\r\n                const element = document.createElement('div');\r\n                const template = this.removeCopyrightNotice(component.template);\r\n                element.innerHTML = this.removeNewLines(template);\r\n\r\n                return new Promise((resolve) => {\r\n                    resolve({\r\n                        template: element.firstChild.cloneNode(true),\r\n                        url: component.url,\r\n                    });\r\n                });\r\n            }\r\n\r\n            if (typeof component.template === 'object' && component.isRendered) {\r\n                return this.resolveWithTemplate(component);\r\n            }\r\n\r\n            if (window.__optimize) {\r\n                const id = this.removeSlashes(component.url);\r\n                const element = document.getElementById(id).firstChild;\r\n                // fallback to XHR\r\n                if (!element) return this.requestResource(component.url);\r\n\r\n                return new Promise((resolve) => {\r\n                    resolve({ template: element.cloneNode(true), url: component.url });\r\n                });\r\n            }\r\n\r\n            return this.requestResource(component.url);\r\n        }\r\n\r\n\r\n        /**\r\n         * Execute an XMLHttpRequest to load a resource by url.\r\n         * @param {string} url - the path to the resource\r\n         * @returns {promise} - promise which resolves with the loaded resource\r\n        */\r\n        requestResource(url) {\r\n            const request = new XMLHttpRequest();\r\n            const promise = new Promise(function (resolve, reject) {\r\n                request.onload = (response) => {\r\n                    if (request.status == 200) {\r\n                        const tempEl = document.createElement('div');\r\n                        tempEl.innerHTML = request.responseText;\r\n                        resolve({ template: tempEl.firstChild.cloneNode(true), url: url });\r\n                    } else {\r\n                        reject(response);\r\n                    }\r\n                };\r\n                request.onerror = reject;\r\n            });\r\n            request.open('GET', url);\r\n            request.send();\r\n            return promise;\r\n        }\r\n\r\n        /**\r\n         * Recursively finds the slot elements in a given element.\r\n         * @param {HTMLElement} parent - the element which is searched for slots.\r\n         * @param {string} parentElName\r\n         * @param {object} result - a key:value object containing the slot elements\r\n         * under their data-name as value:\r\n         * { <my-slot-name>: HTMLElement }\r\n         * @returns {Object} result\r\n        */\r\n        findSlots(parent, parentElName, result = {}) {\r\n            const children = parent.children;\r\n            const length = children.length;\r\n\r\n            for (let i = 0; i < length; ++i) {\r\n                const child = children[i];\r\n                const childTagName = child.tagName.toLowerCase();\r\n\r\n                if (child instanceof ComponentSlot) {\r\n                    const name = child.dataset.name;\r\n                    if (!result[name]) result[name] = [];\r\n                    result[name].push(child);\r\n                    this.findSlots(child, parentElName, result);\r\n                } else if (child.hasAttribute('slot')) {\r\n                    const slot = child.getAttribute('slot');\r\n                    if (!result[slot]) result[slot] = [];\r\n                    result[slot].push(child);\r\n                    this.findSlots(child, parentElName, result);\r\n                    // the scrollable container is the ONLY component that can hold\r\n                    // slots of another elements; we allow this in order achieve\r\n                    // better integration of the scrollbar inside other components\r\n                    // The WebComponents and the standard slot elements don't support\r\n                    // such behavior; an element handles only its own slots. The scrollable\r\n                    // container is an exception from this rule.\r\n                } else if (childTagName === 'gameface-scrollable-container' ||\r\n                    (childTagName !== GF_COMPONENT_SLOT_TAG_NAME &&\r\n                        parentElName !== childTagName &&\r\n                        !this.definedElements[childTagName])) {\r\n                    // if the child is another nested element don't look for slots in it\r\n                    this.findSlots(child, parentElName, result);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Will replace the slot element\r\n         * @param {HTMLElement[]} source\r\n         * @param {HTMLElement} target\r\n         */\r\n        replaceSlots(source, target) {\r\n            const fakeRoot = target[0];\r\n            if (source.length && fakeRoot.childNodes.length) {\r\n                while (fakeRoot.firstChild) {\r\n                    fakeRoot.removeChild(fakeRoot.lastChild);\r\n                }\r\n            }\r\n            // remove the slot so that it can be replaced\r\n            const parent = fakeRoot.parentNode;\r\n            parent.removeChild(fakeRoot);\r\n\r\n            for (let i = 0; i < source.length; ++i) {\r\n                parent.appendChild(source[i]);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Transfers the slottable elements into their slots.\r\n         * @param {HTMLElement} source - the element containing the slottable elements.\r\n         * @param {HTMLElement} target - the element containing the slots elements.\r\n        */\r\n        transferContent(source, target) {\r\n            while (target.childNodes.length > 0) {\r\n                const nodes = target.childNodes;\r\n                target.removeChild(nodes[nodes.length - 1]);\r\n            }\r\n            while (source.childNodes.length > 0) {\r\n                const nodes = source.childNodes;\r\n                const node = nodes[0];\r\n                source.removeChild(node);\r\n                target.appendChild(node);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Renderes an element only if it wasn't rendered before that\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean} - true if it was rendered, false if not\r\n        */\r\n        renderOnce(element) {\r\n            if (element.isRendered) return false;\r\n\r\n            this.render(element);\r\n            element.isRendered = true;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * Renders an element's content into its template.\r\n        * @param {HTMLElement} element - the element into which to render the content\r\n        */\r\n        render(element) {\r\n            const templateRoot = document.createElement('div');\r\n            templateRoot.appendChild(element.template);\r\n\r\n            const parentElName = element.tagName.toLowerCase();\r\n\r\n            const templateSlots = this.findSlots(templateRoot, parentElName);\r\n            const userSlots = this.findSlots(element, parentElName);\r\n\r\n            // use for...of instead of for...in for better performance\r\n            const userSlotsKeys = Object.keys(userSlots);\r\n            const templateSlotsKeys = Object.keys(templateSlots);\r\n\r\n            // there's no point in looping over userSlots if there aren't\r\n            // corresponding template slots\r\n            if (templateSlotsKeys.length) {\r\n                for (const userSlot of userSlotsKeys) {\r\n                    if (!userSlots[userSlot] || !templateSlots[userSlot]) continue;\r\n                    this.replaceSlots(userSlots[userSlot], templateSlots[userSlot]);\r\n                }\r\n            }\r\n\r\n            this.transferContent(templateRoot, element);\r\n        }\r\n\r\n        /**\r\n         * Delay the execution of a callback function by n amount of frames.\r\n         * Used to retrieve the computed styles of elements.\r\n         * @param {Function} callback - the function that will be executed.\r\n         * @param {number} count - the amount of frames that the callback execution\r\n         * should be delayed by.\r\n         * @returns {any}\r\n        */\r\n        waitForFrames(callback = () => { }, count = 3) {\r\n            if (count === 0) return callback();\r\n            count--;\r\n            requestAnimationFrame(() => this.waitForFrames(callback, count));\r\n        }\r\n    }\r\n\r\n    const components = new GamefaceComponents();\r\n\r\n    /**\r\n     * Class used to import gameface components\r\n     */\r\n    class ComponentImport extends HTMLElement {\r\n        /* eslint-disable require-jsdoc */\r\n        constructor() {\r\n            super();\r\n        }\r\n\r\n        connectedCallback() {\r\n            const url = `/components/${this.dataset.url}/`;\r\n            const componentName = `gameface-${this.dataset.url}`;\r\n\r\n            if (components.imported.indexOf(componentName) === -1) {\r\n                components.importComponent(url);\r\n                components.imported.push(componentName);\r\n            }\r\n            this.appendChild(document.createElement(componentName));\r\n        }\r\n        /* eslint-enable require-jsdoc */\r\n    }\r\n\r\n    /**\r\n     * Class that will handle gameface components slot element\r\n     */\r\n    class ComponentSlot extends HTMLElement {\r\n        /* eslint-disable require-jsdoc */\r\n\r\n        constructor() {\r\n            super();\r\n\r\n            this.originalAppendChild = this.appendChild;\r\n            this.originalInsertBefore = this.insertBefore;\r\n            this.originalReplaceChild = this.replaceChild;\r\n            this.originalRemoveChild = this.removeChild;\r\n\r\n            this.appendChild = (node) => {\r\n                const child = this.originalAppendChild(node);\r\n                this.disptachSlotChange(child);\r\n\r\n                return child;\r\n            };\r\n\r\n            this.insertBefore = (newNode, referenceNode) => {\r\n                const child = this.originalInsertBefore(newNode, referenceNode);\r\n                this.disptachSlotChange(child);\r\n\r\n                return child;\r\n            };\r\n\r\n            this.replaceChild = (newChild, oldChild) => {\r\n                const replacedNode = this.originalReplaceChild(newChild, oldChild);\r\n                this.disptachSlotChange(replacedNode);\r\n\r\n                return replacedNode;\r\n            };\r\n\r\n            this.removeChild = (child) => {\r\n                const removedNode = this.originalRemoveChild(child);\r\n                this.disptachSlotChange(removedNode);\r\n\r\n                return removedNode;\r\n            };\r\n        }\r\n\r\n        disptachSlotChange(child) {\r\n            this.dispatchEvent(new CustomEvent('slotchange'), {\r\n                target: this,\r\n                child: child,\r\n            });\r\n        }\r\n\r\n        /* eslint-enable require-jsdoc */\r\n    }\r\n\r\n    components.defineCustomElement('component-import', ComponentImport);\r\n    components.defineCustomElement(GF_COMPONENT_SLOT_TAG_NAME, ComponentSlot);\r\n\r\n    return components;\r\n};\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (components());\r\n\n\n//# sourceURL=webpack://gameuicomponents/./lib/components.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./components/dropdown/demo/demo.js");
/******/ 	
/******/ })()
;