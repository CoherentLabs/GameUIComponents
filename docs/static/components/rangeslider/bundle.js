(()=>{var __webpack_modules__={95:function(){var NO_JQUERY={};!function(e,t,i){if(!("console"in e)){var s=e.console={};s.log=s.warn=s.error=s.debug=function(){}}t===NO_JQUERY&&(t={fn:{},extend:function(){for(var e=arguments[0],t=1,i=arguments.length;t<i;t++){var s=arguments[t];for(var r in s)e[r]=s[r]}return e}}),t.fn.pm=function(){return console.log("usage: \nto send:    $.pm(options)\nto receive: $.pm.bind(type, fn, [origin])"),this},t.pm=e.pm=function(e){r.send(e)},t.pm.bind=e.pm.bind=function(e,t,i,s,n){r.bind(e,t,i,s,!0===n)},t.pm.unbind=e.pm.unbind=function(e,t){r.unbind(e,t)},t.pm.origin=e.pm.origin=null,t.pm.poll=e.pm.poll=200;var r={send:function(e){var i=t.extend({},r.defaults,e),s=i.target;if(i.target)if(i.type){var n={data:i.data,type:i.type};i.success&&(n.callback=r._callback(i.success)),i.error&&(n.errback=r._callback(i.error)),"postMessage"in s&&!i.hash?(r._bind(),s.postMessage(JSON.stringify(n),i.origin||"*")):(r.hash._bind(),r.hash.send(i,n))}else console.warn("postmessage type required");else console.warn("postmessage target window required")},bind:function(e,t,i,s,n){r._replyBind(e,t,i,s,n)},_replyBind:function(i,s,n,a,o){"postMessage"in e&&!a?r._bind():r.hash._bind();var l=r.data("listeners.postmessage");l||(l={},r.data("listeners.postmessage",l));var u=l[i];u||(u=[],l[i]=u),u.push({fn:s,callback:o,origin:n||t.pm.origin})},unbind:function(e,t){var i=r.data("listeners.postmessage");if(i)if(e)if(t){var s=i[e];if(s){for(var n=[],a=0,o=s.length;a<o;a++){var l=s[a];l.fn!==t&&n.push(l)}i[e]=n}}else delete i[e];else for(var a in i)delete i[a]},data:function(e,t){return void 0===t?r._data[e]:(r._data[e]=t,t)},_data:{},_CHARS:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),_random:function(){for(var e=[],t=0;t<32;t++)e[t]=r._CHARS[0|32*Math.random()];return e.join("")},_callback:function(e){var t=r.data("callbacks.postmessage");t||(t={},r.data("callbacks.postmessage",t));var i=r._random();return t[i]=e,i},_bind:function(){r.data("listening.postmessage")||(e.addEventListener?e.addEventListener("message",r._dispatch,!1):e.attachEvent&&e.attachEvent("onmessage",r._dispatch),r.data("listening.postmessage",1))},_dispatch:function(e){try{var t=JSON.parse(e.data)}catch(h){return void console.warn("postmessage data invalid json: ",h)}if(t.type){var i=(r.data("callbacks.postmessage")||{})[t.type];if(i)i(t.data);else for(var s=(r.data("listeners.postmessage")||{})[t.type]||[],n=0,a=s.length;n<a;n++){var o=s[n];if(o.origin&&"*"!==o.origin&&e.origin!==o.origin){if(console.warn("postmessage message origin mismatch",e.origin,o.origin),t.errback){var l={message:"postmessage origin mismatch",origin:[e.origin,o.origin]};r.send({target:e.source,data:l,type:t.errback})}}else try{o.callback?o.fn(t.data,u,e):u(o.fn(t.data,e))}catch(d){if(!t.errback)throw d;r.send({target:e.source,data:d,type:t.errback})}function u(i){t.callback&&r.send({target:e.source,data:i,type:t.callback})}}}else console.warn("postmessage message type required")}};r.hash={send:function(t,i){var s=t.target,n=t.url;if(n){n=r.hash._url(n);var a,o=r.hash._url(e.location.href);if(e==s.parent)a="parent";else try{for(var l=0,u=parent.frames.length;l<u;l++)if(parent.frames[l]==e){a=l;break}}catch(t){a=e.name}if(null!=a){var h={"x-requested-with":"postmessage",source:{name:a,url:o},postmessage:i},d="#x-postmessage-id="+r._random();s.location=n+d+encodeURIComponent(JSON.stringify(h))}else console.warn("postmessage windows must be direct parent/child windows and the child must be available through the parent window.frames list")}else console.warn("postmessage target window url is required")},_regex:/^\#x\-postmessage\-id\=(\w{32})/,_regex_len:50,_bind:function(){r.data("polling.postmessage")||(setInterval((function(){var t=""+e.location.hash,i=r.hash._regex.exec(t);if(i){var s=i[1];r.hash._last!==s&&(r.hash._last=s,r.hash._dispatch(t.substring(r.hash._regex_len)))}}),t.pm.poll||200),r.data("polling.postmessage",1))},_dispatch:function(t){if(t){try{if(!("postmessage"===(t=JSON.parse(decodeURIComponent(t)))["x-requested-with"]&&t.source&&null!=t.source.name&&t.source.url&&t.postmessage))return}catch(p){return}var i=t.postmessage,s=(r.data("callbacks.postmessage")||{})[i.type];if(s)s(i.data);else{var n;n="parent"===t.source.name?e.parent:e.frames[t.source.name];for(var a=(r.data("listeners.postmessage")||{})[i.type]||[],o=0,l=a.length;o<l;o++){var u=a[o];if(u.origin){var h=/https?\:\/\/[^\/]*/.exec(t.source.url)[0];if("*"!==u.origin&&h!==u.origin){if(console.warn("postmessage message origin mismatch",h,u.origin),i.errback){var d={message:"postmessage origin mismatch",origin:[h,u.origin]};r.send({target:n,data:d,type:i.errback,hash:!0,url:t.source.url})}continue}}function c(e){i.callback&&r.send({target:n,data:e,type:i.callback,hash:!0,url:t.source.url})}try{u.callback?u.fn(i.data,c):c(u.fn(i.data))}catch(g){if(!i.errback)throw g;r.send({target:n,data:g,type:i.errback,hash:!0,url:t.source.url})}}}}},_url:function(e){return(""+e).replace(/#.*$/,"")}},t.extend(r,{defaults:{target:null,url:null,type:null,data:null,success:null,error:null,origin:"*",hash:!1}})}(this,"undefined"==typeof jQuery?NO_JQUERY:jQuery),"JSON"in window&&window.JSON||(JSON={}),function(){function f(e){return e<10?"0"+e:e}"function"!=typeof Date.prototype.toJSON&&(Date.prototype.toJSON=function(e){return this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z"},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(e){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;function quote(e){return escapable.lastIndex=0,escapable.test(e)?'"'+e.replace(escapable,(function(e){var t=meta[e];return"string"==typeof t?t:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+e+'"'}function str(e,t){var i,s,r,n,a,o=gap,l=t[e];switch(l&&"object"==typeof l&&"function"==typeof l.toJSON&&(l=l.toJSON(e)),"function"==typeof rep&&(l=rep.call(t,e,l)),typeof l){case"string":return quote(l);case"number":return isFinite(l)?String(l):"null";case"boolean":case"null":return String(l);case"object":if(!l)return"null";if(gap+=indent,a=[],"[object Array]"===Object.prototype.toString.apply(l)){for(n=l.length,i=0;i<n;i+=1)a[i]=str(i,l)||"null";return r=0===a.length?"[]":gap?"[\n"+gap+a.join(",\n"+gap)+"\n"+o+"]":"["+a.join(",")+"]",gap=o,r}if(rep&&"object"==typeof rep)for(n=rep.length,i=0;i<n;i+=1)"string"==typeof(s=rep[i])&&(r=str(s,l))&&a.push(quote(s)+(gap?": ":":")+r);else for(s in l)Object.hasOwnProperty.call(l,s)&&(r=str(s,l))&&a.push(quote(s)+(gap?": ":":")+r);return r=0===a.length?"{}":gap?"{\n"+gap+a.join(",\n"+gap)+"\n"+o+"}":"{"+a.join(",")+"}",gap=o,r}}"function"!=typeof JSON.stringify&&(JSON.stringify=function(e,t,i){var s;if(gap="",indent="","number"==typeof i)for(s=0;s<i;s+=1)indent+=" ";else"string"==typeof i&&(indent=i);if(rep=t,t&&"function"!=typeof t&&("object"!=typeof t||"number"!=typeof t.length))throw new Error("JSON.stringify");return str("",{"":e})}),"function"!=typeof JSON.parse&&(JSON.parse=function(text,reviver){var j;function walk(e,t){var i,s,r=e[t];if(r&&"object"==typeof r)for(i in r)Object.hasOwnProperty.call(r,i)&&(void 0!==(s=walk(r,i))?r[i]=s:delete r[i]);return reviver.call(e,t,r)}if(cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,(function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}))),/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return j=eval("("+text+")"),"function"==typeof reviver?walk({"":j},""):j;throw new SyntaxError("JSON.parse")})}()}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var i=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(i.exports,i,i.exports,__webpack_require__),i.exports}var __webpack_exports__={};(()=>{"use strict";const e=new RegExp("^s+|s+$","g"),t=["input","textarea"];function i(e){return t.indexOf(e.tagName.toLowerCase())>-1}window.GUIComponentsDefinedElements={},window.GUIComponentsDefinedElements||(window.GUIComponentsDefinedElements={});class s extends HTMLElement{get instanceType(){return"BaseComponent"}setupTemplate(e,t){if(!this.isConnected)return console.log(`DEBUG: component ${this.tagName} was not initialized because it was disconnected from the DOM!`);this.template=e.template,t(e.template)}isStatePropValid(e,t){const i=this.stateSchema[e];if(!i)return console.error(`A property ${e} does not exist on type ${this.tagName.toLowerCase()}!`),!1;const s=typeof t;return!(!i.type.includes("array")||!Array.isArray(t))||(!!i.type.includes(s)||(console.error(`Property ${e} can not be of type - ${s}. Allowed types are: ${i.type.join(",")}`),!1))}}class r{get instanceType(){return"Validator"}static isFormElement(e){for(e=e.parentElement;e;){if("GAMEFACE-FORM-CONTROL"===e.tagName||"gameface-form-control"===e.tagName)return!0;e=e.parentElement}return!1}static tooLong(){return!1}static tooShort(){return!1}static rangeOverflow(){return!1}static rangeUnderflow(){return!1}static valueMissing(e){return e.hasAttribute("required")&&!e.value}static nameMissing(e){return!e.name&&!e.getAttribute("name")}static isRequired(e){return e.hasAttribute("required")}static customError(){return!1}static willSerialize(e){return!this.nameMissing(e)}static isBadURL(){return!1}static isBadEmail(){return!1}}class n{get instanceType(){return"NativeElementValidator"}constructor(e){this.element=e}isFormElement(){return r.isFormElement(this.element)}tooLong(){return i(this.element)?o.tooLong(this.element):r.tooLong()}tooShort(){return i(this.element)?o.tooShort(this.element):r.tooShort()}rangeOverflow(){return i(this.element)?o.rangeOverflow(this.element):r.rangeOverflow()}rangeUnderflow(){return i(this.element)?o.rangeUnderflow(this.element):r.rangeUnderflow()}valueMissing(){return r.valueMissing(this.element)}nameMissing(){return r.nameMissing(this.element)}customError(){return r.customError()}isRequired(){return r.isRequired(this.element)}willSerialize(){return r.willSerialize(this.element)}isBadEmail(){return!!i(this.element)&&o.isBadEmail(this.element)}isBadURL(){return!!i(this.element)&&o.isBadURL(this.element)}}class a extends s{get instanceType(){return"CustomElementValidator"}isFormElement(){return r.isFormElement(this)}tooLong(){return r.tooLong(this)}tooShort(){return r.tooShort(this)}valueMissing(){return r.valueMissing(this)}nameMissing(){return r.nameMissing(this)}customError(){return r.customError()}isRequired(){return r.isRequired(this)}rangeOverflow(){return r.rangeOverflow(this)}rangeUnderflow(){return r.rangeUnderflow(this)}willSerialize(){return r.willSerialize(this)}isBadEmail(){return r.isBadEmail(this)}isBadURL(){return r.isBadURL(this)}}class o{get instanceType(){return"TextFieldValidator"}static tooLong(e){const t=e.getAttribute("maxlength");return!!t&&e.value.length>parseFloat(t)}static tooShort(e){const t=e.getAttribute("minlength");return!!t&&e.value.length<parseFloat(t)}static rangeOverflow(e){const t=e.getAttribute("max");return!!t&&parseFloat(e.value)>parseFloat(t)}static rangeUnderflow(e){const t=e.getAttribute("min");return!!t&&parseFloat(e.value)<parseFloat(t)}static isBadURL(e){if("url"!==e.getAttribute("type"))return!1;const t=e.pattern||e.getAttribute("pattern");return!!t&&!e.value.match(t)}static isBadEmail(e){return"email"===e.getAttribute("type")&&!e.value.match("@")}}const l=function(){const t="component-slot",i={DOWN:40,LEFT:37,RIGHT:39,UP:38,HOME:36,END:35,ENTER:13,ESCAPE:27,TAB:9,SHIFT:16,CTRL:17,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,LETTER_A:65},l=new class{constructor(){this.imported=this.imported||[],this.KEYCODES=i,this.cachedComponents={},this.CustomElementValidator=a,this.NativeElementValidator=n,this.TextFieldValidator=o,this.Validator=r,this.BaseComponent=s}importScript(e){const t=document.createElement("script");t.setAttribute("src",e),document.body.appendChild(t)}loadHTML(e){return this.loadResource(e).then((e=>e.template))}whenDefined(e){if(void 0!==window.GUIComponentsDefinedElements[e])return window.GUIComponentsDefinedElements[e].promise;const t=window.GUIComponentsDefinedElements[e]={};return t.promise=new Promise(((e,i)=>{t.resolve=e,t.reject=i})),t.promise}defineCustomElement(e,t){window.GUIComponentsDefinedElements[e]||customElements.get(e)||(this.whenDefined(e),customElements.define(e,t),window.GUIComponentsDefinedElements[e].resolve(t))}importComponent(e){requestAnimationFrame((()=>{this.importScript(e+"/script.js")}))}removeSlashes(e){return e.replace(/[/|\\]/g,"")}removeNewLines(t){return t.replace(e,"").trim()}removeCopyrightNotice(e){return e.replace("\x3c!--Copyright (c) Coherent Labs AD. All rights reserved. Licensed under the MIT License. See License.txt in the project root for license information. --\x3e","").trim()}resolveWithTemplate(e){return new Promise((t=>{t({template:e.template,url:e.url})}))}loadResource(e){if(e.template&&"string"==typeof e.template){if(e.isRendered)return this.resolveWithTemplate(e);const t=this.removeCopyrightNotice(e.template);return new Promise((i=>{i({template:this.removeNewLines(t),url:e.url})}))}if("object"==typeof e.template&&e.isRendered)return this.resolveWithTemplate(e);if(window.__optimize){const t=this.removeSlashes(e.url),i=document.getElementById(t).firstChild;return i?new Promise((t=>{t({template:i.innerHTML,url:e.url})})):this.requestResource(e.url)}return this.requestResource(e.url)}requestResource(e){const t=new XMLHttpRequest,i=new Promise((function(i,s){t.onload=r=>{200==t.status?i({template:t.responseText,url:e}):s(r)},t.onerror=s}));return t.open("GET",e),t.send(),i}findSlots(e,i,s={}){const r=e.children,n=r.length;for(let e=0;e<n;++e){const n=r[e],a=n.tagName.toLowerCase();if("component-slot"===a){const e=n.dataset.name;s[e]||(s[e]=[]),s[e].push(n),this.findSlots(n,i,s)}else if(n.hasAttribute("slot")){const e=n.getAttribute("slot");s[e]||(s[e]=[]),s[e].push(n),this.findSlots(n,i,s)}else("gameface-scrollable-container"===a||a!==t&&i!==a&&!window.GUIComponentsDefinedElements[a])&&this.findSlots(n,i,s)}return s}replaceSlots(e,t){const i=t[0];if(e.length&&i.childNodes.length)for(;i.firstChild;)i.removeChild(i.lastChild);const s=i.parentNode;s.removeChild(i);for(let t=0;t<e.length;++t)s.appendChild(e[t])}transferContent(e,t){for(;t.childNodes.length>0;){const e=t.childNodes;t.removeChild(e[e.length-1])}for(;e.childNodes.length>0;){const i=e.childNodes[0];e.removeChild(i),t.appendChild(i)}}renderOnce(e){return!e.isRendered&&(this.render(e),e.isRendered=!0,!0)}render(e){const t=document.createElement("div");t.innerHTML=e.template;const i=e.tagName.toLowerCase(),s=this.findSlots(t,i),r=this.findSlots(e,i),n=Object.keys(r);if(Object.keys(s).length)for(const e of n)r[e]&&s[e]&&this.replaceSlots(r[e],s[e]);this.transferContent(t,e)}transferChildren(e,t,i){const s=document.createElement("div");s.innerHTML=e.template;const r=s.querySelector(t);i.forEach((e=>r.appendChild(e))),this.transferContent(s,e)}waitForFrames(e=(()=>{}),t=3){if(0===t)return e();t--,requestAnimationFrame((()=>this.waitForFrames(e,t)))}isBrowserGameface(){return navigator.userAgent.match("Cohtml")}};class u extends HTMLElement{constructor(){super(),this.originalAppendChild=this.appendChild,this.originalInsertBefore=this.insertBefore,this.originalReplaceChild=this.replaceChild,this.originalRemoveChild=this.removeChild,this.appendChild=e=>{const t=this.originalAppendChild(e);return this.disptachSlotChange(t),t},this.insertBefore=(e,t)=>{const i=this.originalInsertBefore(e,t);return this.disptachSlotChange(i),i},this.replaceChild=(e,t)=>{const i=this.originalReplaceChild(e,t);return this.disptachSlotChange(i),i},this.removeChild=e=>{const t=this.originalRemoveChild(e);return this.disptachSlotChange(t),t}}disptachSlotChange(e){this.dispatchEvent(new CustomEvent("slotchange"),{target:this,child:e})}}return l.defineCustomElement(t,u),l},u=new Map([["vertical",{mouseAxisCoords:"clientY",size:"height",position:"top",coordinate:"y",offset:"offsetHeight"}],["horizontal",{mouseAxisCoords:"clientX",size:"width",position:"left",coordinate:"x",offset:"offsetWidth"}]]),h=["vertical","horizontal"];function d(e,t,i){return 100*(e-t)/(i-t)}function c(e,t,i){return Math.min(Math.max(e,t),i)}function p(e){return h.includes(e)?e:(console.warn(`'${e}' is not a valid orientation. It should be either 'horizontal' or 'vertical'. Will fallback to 'horizontal'`),"horizontal")}function g(e,t){e&&!t&&console.warn(`Unable to find element with selector - "${e}" that will be used for displaying the range slider value.`)}const m=new l,f={SINGLE:"customHandle",LEFT:"customHandleLeft",RIGHT:"customHandleRight"};class b{constructor(e){if(new.target===b)throw new TypeError("Cannot construct RangeSliderBase instances directly");this.rangeslider=e,this.onMouseUp=this.onMouseUp.bind(this),this.init=this.init.bind(this)}set thumb(e){e?this.rangeslider.setAttribute("thumb",""):this.rangeslider.removeAttribute("thumb")}get thumb(){return this.state.thumb}set grid(e){e?this.rangeslider.setAttribute("grid",""):this.rangeslider.removeAttribute("grid")}get grid(){return this.state.grid}set min(e){null!==e?this.rangeslider.setAttribute("min",e):this.rangeslider.removeAttribute("min")}get min(){return this.state.min}set max(e){null!==e?this.rangeslider.setAttribute("max",e):this.rangeslider.removeAttribute("max")}get max(){return this.state.max}get value(){return this.state.value}set value(e){this.rangeslider.setAttribute("value",e)}get values(){return this.state.values}set values(e){null!==e?this.rangeslider.setAttribute("values",e):this.rangeslider.removeAttribute("values")}get step(){return this.state.step}set step(e){null!==e?this.rangeslider.setAttribute("step",e):this.rangeslider.removeAttribute("step")}get customHandle(){return this.state.customHandle}set customHandle(e){null!==e?this.rangeslider.setAttribute("custom-handle",e):this.rangeslider.removeAttribute("custom-handle")}get customHandleLeft(){return this.state.customHandleLeft}set customHandleLeft(e){null!==e?this.rangeslider.setAttribute("custom-handle-left",e):this.rangeslider.removeAttribute("custom-handle-left")}get customHandleRight(){return this.state.customHandleRight}set customHandleRight(e){null!==e?this.rangeslider.setAttribute("custom-handle-right",e):this.rangeslider.removeAttribute("custom-handle-right")}attributeChanged(e,t,i){t===i&&"value"!==e||this.updateAttributeState(e,t,i)}updateAttributeState(e,t,i){switch(e){case"values":this.updateValuesState(t,i);break;case"min":case"max":this.updateMinMaxState(e,i);break;case"step":this.updateStepState(i);break;case"value":this.updateValueState(i);break;case"thumb":this.updateThumbState(null!==i);break;case"grid":this.updateGridState(null!==i);break;case"custom-handle":case"custom-handle-right":case"custom-handle-left":this.updateCustomHandleState(e,i)}}updateCustomHandleState(e,t){this.initCustomHandles()}updateMinMaxState(e,t){throw new Error("Method 'updateMinMaxState()' must be implemented.")}updateSliderPositionWithCurrentValue(){throw new Error("Method 'updateSliderPositionWithCurrentValue()' must be implemented.")}updateValuesState(e,t){throw new Error("Method 'updateValuesState()' must be implemented.")}updateValueState(e){throw new Error("Method 'updateValueState()' must be implemented.")}updateStepState(e){let t=null!==e?parseFloat(e):1;t=isNaN(t)?1:t,this.rangeslider.isStatePropValid("step",t)&&(this.state.step=t,this.updateSliderPositionWithCurrentValue())}updateGridState(e){this.rangeslider.isStatePropValid("grid",e)&&(this.toggleGrid(e),this.state.grid=e)}updateThumbState(e){this.rangeslider.isStatePropValid("thumb",e)&&(this.state.thumb=e,this.toggleThumb(e))}toggleThumb(e){this.thumbElement&&(this.thumbElement.length&&"object"==typeof this.thumbElement?this.thumbElement.forEach((e=>this.rangesliderEl.removeChild(e))):this.rangesliderEl.removeChild(this.thumbElement),this.thumbElement=null),e&&(this.setThumb(),this.updateSliderPositionWithCurrentValue())}toggleGrid(e){this.grid&&this.rangesliderEl.removeChild(this.rangesliderEl.querySelector(`.guic-${this.rangeslider.orientation}-rangeslider-grid`)),e&&this.buildGrid()}loadTemplate(){"object"!=typeof this.rangeslider.template&&(this.rangeslider.template=this.getTemplate(this.rangeslider.orientation)),m.loadResource(this.rangeslider).then(this.init).catch((e=>console.error(JSON.stringify(e))))}init(e){this.rangeslider.setupTemplate(e,(()=>{m.renderOnce(this.rangeslider),this.setup()}))}setupSlider(){this.wrapper=this.rangeslider.querySelector(`.guic-${this.rangeslider.orientation}-rangeslider-wrapper`),this.rangesliderEl=this.rangeslider.querySelector(`.guic-${this.rangeslider.orientation}-rangeslider`),this.bar=this.rangeslider.querySelector(`.guic-${this.rangeslider.orientation}-rangeslider-bar`),this.setMinAndMax(),this.setHandleValues(),this.grid&&this.buildGrid(),this.setThumb(),this.updateSliderPositionWithCurrentValue(),this.initCustomHandles(),this.updateCustomHandles(),this.attachEventListener()}initSliderState(){this.state.step=parseFloat(this.rangeslider.getAttribute("step"))||1,this.state.grid=this.rangeslider.hasAttribute("grid"),this.state.thumb=this.rangeslider.hasAttribute("thumb"),this.units=u.get(this.rangeslider.orientation)}getHandlePercent(e){const t=this.getRangeSliderSize(),i=t[this.units.size],s=t[this.units.coordinate],r=e[this.units.mouseAxisCoords];let n=r-s;return"vertical"===this.rangeslider.orientation&&(n=s+i-r),d(n,0,i)}createGridPol(e){const t=document.createElement("div");return t.classList.add(`guic-rangeslider-${this.rangeslider.orientation}-grid-pol-container`),t.innerHTML=`\n                <div class="guic-rangeslider-${this.rangeslider.orientation}-grid-pol guic-rangeslider-${this.rangeslider.orientation}-pol-without-text"></div>\n            `,"number"!=typeof e&&"string"!=typeof e||(t.innerHTML=`\n                    <div class="guic-rangeslider-${this.rangeslider.orientation}-grid-pol"></div>\n                    <div class="guic-rangeslider-${this.rangeslider.orientation}-grid-text">${e}</div>\n                `),t}addCustomHandles(e){for(const t of Object.keys(e)){const i=f[t],s=e[t];this.state[i]=s?document.querySelector(s):null,g(s,this[i])}}buildThumb(e){const t=document.createElement("div");t.classList.add(`guic-${this.rangeslider.orientation}-rangeslider-thumb`),t.textContent=e,this.rangesliderEl.appendChild(t)}getRangeSliderSize(){return this.wrapper.getBoundingClientRect()}calculateHandleValue(e){return parseFloat(parseInt(this.min)+(this.max-this.min)*(e/100))}attachEventListener(){this.rangeslider.querySelector(`.guic-${this.rangeslider.orientation}-rangeslider-wrapper`).addEventListener("mousedown",this.onMouseDown)}onMouseUp(){document.removeEventListener("mousemove",this.onMouseMove),document.removeEventListener("mouseup",this.onMouseUp)}}const v=new l;class y extends b{constructor(e){if(new.target===y)throw new TypeError("Cannot construct SingleHandleRangeSliderBase instances directly");super(e),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.state={min:0,max:100,grid:!1,thumb:!1,step:1,value:void 0,customHandle:null}}getCurrentValuePercent(){return 0}updateSliderPosition(e){throw new Error("Method 'updateSliderPosition()' must be implemented.")}valueMissing(){return!this.value}getTemplate(e){return"vertical"===e?' <div class="guic-vertical-rangeslider-wrapper"> <div class="guic-vertical-rangeslider"> <div class="guic-vertical-rangeslider-bar"></div> <div class="guic-vertical-rangeslider-handle"></div> </div> </div> ':' <div class="guic-horizontal-rangeslider-wrapper"> <div class="guic-horizontal-rangeslider"> <div class="guic-horizontal-rangeslider-bar"></div> <div class="guic-horizontal-rangeslider-handle"></div> </div> </div> '}setup(){v.waitForFrames((()=>{this.handle=this.rangeslider.querySelector(`.guic-${this.rangeslider.orientation}-rangeslider-handle`),this.setupSlider()}),3)}setThumb(){this.thumb&&(this.buildThumb(this.value),this.thumbElement=this.rangeslider.querySelector(`.guic-${this.rangeslider.orientation}-rangeslider-thumb`))}initCustomHandles(){const e={SINGLE:this.rangeslider.getAttribute("custom-handle")};this.addCustomHandles(e)}updateCustomHandles(){this.customHandle&&void 0!==this.value&&(this.customHandle.textContent=this.value)}setBarStyles(e){this.handle.style[this.units.position]=`${"vertical"===this.rangeslider.orientation?100-e:e}%`,this.bar.style[this.units.size]=`${e}%`}setThumbPosition(e){this.thumb&&(this.thumbElement.innerHTML=this.value,this.thumbElement.style[this.units.position]=`${"vertical"===this.rangeslider.orientation?100-e:e}%`)}onMouseDown(e){const t=this.getHandlePercent(e);this.updateSliderPosition(t),document.addEventListener("mousemove",this.onMouseMove),document.addEventListener("mouseup",this.onMouseUp)}onMouseMove(e){const t=this.getHandlePercent(e);this.updateSliderPosition(t)}}class w extends y{constructor(e){super(e)}connectedCallback(){this.initSliderState(),this.loadTemplate()}updateValueState(e){e=parseFloat(e),isNaN(e)||this.min>e&&this.max<e?this.value=this.min:(this.state.value=e,this.updateSliderPositionWithCurrentValue())}getCurrentValuePercent(){return d(this.value,this.min,this.max)}updateMinMaxState(e,t){this.setMinAndMax();const i="min"===e?this.min:this.max;this.value=this.min<=this.value&&this.max>=this.value?this.value:i,this.toggleGrid(this.grid),this.updateSliderPositionWithCurrentValue()}setMinAndMax(){const e=parseFloat(this.rangeslider.getAttribute("min")),t=parseFloat(this.rangeslider.getAttribute("max"));this.state.min=isNaN(e)?0:e,this.state.max=isNaN(e)?100:t}setHandleValues(){let e=this.rangeslider.getAttribute("value");e=parseFloat(e),this.state.value=isNaN(e)?this.min:e,this.state.value=this.min<=this.value&&this.max>=this.value?this.value:this.min}buildGrid(){const e=4*Math.round(this.wrapper[this.units.offset]/10/4),t=document.createElement("div");t.classList.add(`guic-${this.rangeslider.orientation}-rangeslider-grid`);for(let i=0;i<=e;i++)i%(e/4)!=0?t.appendChild(this.createGridPol()):t.appendChild(this.createGridPol(parseFloat((parseInt(this.min)+(this.max-this.min)*(i/e)).toFixed(2))));this.rangesliderEl.appendChild(t)}updateSliderPositionWithCurrentValue(){const e=this.getCurrentValuePercent();this.updateSliderPosition(e)}updateSliderPosition(e){const t=d(this.step+this.min,this.min,this.max);e=c(Math.round(e/t)*t,0,100);const i=parseFloat(this.calculateHandleValue(e).toFixed(2));i===this.value?(this.setBarStyles(e),this.setThumbPosition(e),this.updateCustomHandles(),this.rangeslider.dispatchEvent(new CustomEvent("sliderupdate",{detail:this.value}))):this.value=i}}class S extends y{constructor(e){super(e),this.state.values=[]}updateValuesState(e,t){this.state.values=t,this.toggleGrid(this.grid),this.updateSliderPositionWithCurrentValue()}updateValueState(e){this.state.value=e,this.updateSliderPositionWithCurrentValue()}updateSliderPositionWithCurrentValue(){const e=this.getCurrentValuePercent();e<0?this.value=this.values[0]:this.updateSliderPosition(e)}connectedCallback(){const e=JSON.parse(this.rangeslider.getAttribute("values"));this.state.values=Array.isArray(e)?e:[],this.state.values.length||console.warn("You need to pass the data in the correct data format - Array<string>."),this.initSliderState(),this.loadTemplate()}getCurrentValuePercent(){return this.values.findIndex((e=>e===this.value))*(100/(this.values.length-1))}buildGrid(){const e=document.createElement("div");e.classList.add(`guic-${this.rangeslider.orientation}-rangeslider-grid`);for(let t=0;t<this.values.length;t++){const i=this.values[t];e.appendChild(this.createGridPol(i))}this.rangesliderEl.appendChild(e)}setMinAndMax(){this.state.min=this.values[0],this.state.max=this.values[this.values.length-1]}setHandleValues(){const e=this.rangeslider.getAttribute("value");this.state.value=null!==e?e:this.min}updateSliderPosition(e){const t=100/(this.values.length-1);e=c(Math.round(e/t)*t,0,100);const i=this.values[e/t];i===this.value?(this.setBarStyles(e),this.setThumbPosition(e),this.updateCustomHandles(),this.rangeslider.dispatchEvent(new CustomEvent("sliderupdate",{detail:this.value}))):this.value=i}}const E=new l;class C extends b{constructor(e){if(new.target===C)throw new TypeError("Cannot construct TwoHandlesRangeSliderBase instances directly");super(e),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.state={min:0,max:100,grid:!1,thumb:!1,step:1,value:[],customHandleLeft:null,customHandleRight:null}}updateSliderPosition(e,t){throw new Error("Method 'updateSliderPosition()' must be implemented.")}valueMissing(){return!this.value&&!this.value[0]}getTemplate(e){return"vertical"===e?' <div class="guic-vertical-rangeslider-wrapper"> <div class="guic-vertical-rangeslider"> <div class="guic-vertical-rangeslider-handle handle-0"></div> <div class="guic-vertical-rangeslider-bar"></div> <div class="guic-vertical-rangeslider-handle handle-1"></div> </div> </div> ':' <div class="guic-horizontal-rangeslider-wrapper"> <div class="guic-horizontal-rangeslider"> <div class="guic-horizontal-rangeslider-handle handle-0"></div> <div class="guic-horizontal-rangeslider-bar"></div> <div class="guic-horizontal-rangeslider-handle handle-1"></div> </div> </div> '}setThumb(){this.thumb&&(this.value.forEach((e=>this.buildThumb(e))),this.thumbElement=this.rangeslider.querySelectorAll(`.guic-${this.rangeslider.orientation}-rangeslider-thumb`))}initCustomHandles(){const e={LEFT:this.rangeslider.getAttribute("custom-handle-left"),RIGHT:this.rangeslider.getAttribute("custom-handle-right")};this.addCustomHandles(e)}setup(){E.waitForFrames((()=>{this.handle=this.rangeslider.querySelectorAll(`.guic-${this.rangeslider.orientation}-rangeslider-handle`),this.setupSlider()}),3)}updateCustomHandles(){this.customHandleLeft&&void 0!==this.value[0]&&(this.customHandleLeft.textContent=this.value[0]),this.customHandleRight&&void 0!==this.value[1]&&(this.customHandleRight.textContent=this.value[1])}clampTwoHandles(e,t){const i=this.handle[0].style[this.units.position],s=this.handle[1].style[this.units.position];return 0===t?e="vertical"===this.rangeslider.orientation?[0,100-parseFloat(s)]:[0,parseFloat(s)]:1===t&&(e="vertical"===this.rangeslider.orientation?[100-parseFloat(i),100]:[parseFloat(i),100]),e}getDistanceBetweenTwoHandles(){const e=this.handle[0].style[this.units.position],t=this.handle[1].style[this.units.position];return Math.abs(parseFloat(e)-parseFloat(t))}setBarStyles(e,t){this.handle[e].style[this.units.position]=`${"vertical"===this.rangeslider.orientation?100-t:t}%`;const i=this.getDistanceBetweenTwoHandles();this.bar.style[this.units.size]=`${i}%`,0===e&&(this.bar.style[this.units.position]=`${"vertical"===this.rangeslider.orientation?100-t:t}%`)}setThumbPosition(e,t){this.thumb&&(this.thumbElement[t].innerHTML=this.value[t],this.thumbElement[t].style[this.units.position]=`${"vertical"===this.rangeslider.orientation?100-e:e}%`)}getClosestHandleToMousePosition(e){const t=[];for(let i=0;i<this.handle.length;i++){const s=parseInt(this.handle[i].style[this.units.position]);t.push(Math.abs(s-e))}return"vertical"===this.rangeslider.orientation?t.reverse().indexOf(Math.min(...t)):t.indexOf(Math.min(...t))}onMouseDown(e){const t=this.getHandlePercent(e);this.activeHandle=this.getClosestHandleToMousePosition(t),this.updateSliderPosition(t,this.activeHandle),document.addEventListener("mousemove",this.onMouseMove),document.addEventListener("mouseup",this.onMouseUp)}onMouseMove(e){const t=this.getHandlePercent(e);this.updateSliderPosition(t,this.activeHandle)}}class A extends C{constructor(e){super(e)}connectedCallback(){this.initSliderState(),this.loadTemplate()}updateMinMaxState(){this.setMinAndMax(),this.toggleGrid(this.grid),this.updateSliderPositionWithCurrentValue()}setMinAndMax(){const e=parseFloat(this.rangeslider.getAttribute("min")),t=parseFloat(this.rangeslider.getAttribute("max"));this.state.min=isNaN(e)?0:e,this.state.max=isNaN(e)?100:t}setHandleValues(){this.state.value=[this.min,this.max]}buildGrid(){const e=4*Math.round(this.wrapper[this.units.offset]/10/4),t=document.createElement("div");t.classList.add(`guic-${this.rangeslider.orientation}-rangeslider-grid`);for(let i=0;i<=e;i++)i%(e/4)!=0?t.appendChild(this.createGridPol()):t.appendChild(this.createGridPol(parseFloat((parseInt(this.min)+(this.max-this.min)*(i/e)).toFixed(2))));this.rangesliderEl.appendChild(t)}updateSliderPositionWithCurrentValue(){[0,100].forEach(((e,t)=>this.updateSliderPosition(e,t)))}updateSliderPosition(e,t){const i=d(this.step+this.min,this.min,this.max);let s=[0,100];this.handle[1].style[this.units.position]&&(s=this.clampTwoHandles(s,t)),e=c(Math.round(e/i)*i,...s),this.setBarStyles(t,e),this.state.value[t]=parseFloat(this.calculateHandleValue(e).toFixed(2)),this.setThumbPosition(e,t),this.updateCustomHandles(),this.rangeslider.dispatchEvent(new CustomEvent("sliderupdate",{detail:this.value}))}}const x=new l,_="basic",T="values",M="basic_two_handles",O=x.CustomElementValidator,H={min:{type:["number"]},max:{type:["number"]},value:{type:["number","string"]},values:{type:["array"]},"two-handles":{type:["boolean"]},grid:{type:["boolean"]},thumb:{type:["boolean"]},step:{type:["number"]},orientation:{type:["string"]},"custom-handle":{type:["string"]},"custom-handle-left":{type:["string"]},"custom-handle-right":{type:["string"]}};x.defineCustomElement("gameface-rangeslider",class extends O{static get observedAttributes(){return Object.keys(H)}constructor(){super(),this.rangesliderObject=null,this.stateSchema=H,this.state={orientation:"horizontal","two-handles":!1}}attributeChangedCallback(e,t,i){this.isRendered&&this.updateAttributeState(e,t,i)}updateAttributeState(e,t,i){switch(e){case"two-handles":this.updateTwoHandlesState(null!==i);break;case"orientation":this.updateOrientationState(i);break;case"values":this.updateValuesState(t,i);break;case"min":case"max":case"value":case"thumb":case"grid":case"step":case"custom-handle":case"custom-handle-right":case"custom-handle-left":this.rangesliderObject.attributeChanged(e,t,i)}}updateState(e,t){this.isStatePropValid(e,t)&&(this.state[e]=t)}updateOrientationState(e){const t=p(e);this.updateState("orientation",t),this.reRender()}updateTwoHandlesState(e){this.updateState("two-handles",e),this.reRender()}updateValuesState(e,t){return t=JSON.parse(t),null!==e&&null===t?this.reRender():this.isStatePropValid("values",t)?null===e&&null!==t?this.reRender():null!==e&&null!==t?this.rangesliderObject.attributeChanged("values",e,t):void 0:void 0}get twoHandles(){return this.state["two-handles"]}set twoHandles(e){e?this.setAttribute("two-handles",""):this.removeAttribute("two-handles")}get orientation(){return this.state.orientation}set orientation(e){null!==e?this.setAttribute("orientation",e):this.removeAttribute("orientation")}get values(){return this.rangesliderObject.values}set values(e){null!==e?this.setAttribute("values",JSON.stringify(e)):this.removeAttribute("values")}get grid(){return this.rangesliderObject.grid}set grid(e){this.rangesliderObject.grid=e}get thumb(){return this.rangesliderObject.thumb}set thumb(e){this.rangesliderObject.thumb=e}set min(e){this.rangesliderObject.min=e}get min(){return this.rangesliderObject.min}set max(e){this.rangesliderObject.max=e}get max(){return this.rangesliderObject.max}get value(){return this.rangesliderObject.value}set value(e){this.rangesliderObject.value=e}get step(){return this.rangesliderObject.step}set step(e){this.rangesliderObject.step=e}get customHandle(){return this.rangesliderObject.customHandle}set customHandle(e){this.rangesliderObject.customHandle=e}get customHandleLeft(){return this.rangesliderObject.customHandleLeft}set customHandleLeft(e){this.rangesliderObject.customHandleLeft=e}get customHandleRight(){return this.rangesliderObject.customHandleRight}set customHandleRight(e){this.rangesliderObject.customHandleRight=e}customError(){return!!this.hasAttribute("two-handles")&&(console.warn('gameface-rangeslider component does not support form data when "two-handles" attribute is used!'),!0)}updateSliderPosition(e,t){this.rangesliderObject.updateSliderPosition(e,t)}onMouseDown(e){this.rangesliderObject.onMouseDown(e)}onMouseUp(){this.rangesliderObject.onMouseUp()}onMouseMove(e){this.rangesliderObject.onMouseMove(e)}valueMissing(){return this.rangesliderObject.valueMissing()}getRangeSliderType(){return this.twoHandles?M:this.hasAttribute("values")?T:_}getRangeSlider(){const e=this.getRangeSliderType();switch(e){case _:return new w(this);case T:return new S(this);case M:return new A(this);default:return console.warn(`Unknown rangeslider type - ${e}. Will fallback to basic rangeslider.`),new w(this)}}reRender(){this.template=void 0,this.isRendered=!1,this.connectedCallback()}initState(){if(this.hasAttribute("orientation")){const e=p(this.getAttribute("orientation"));this.updateState("orientation",e)}this.updateState("two-handles",this.hasAttribute("two-handles"))}connectedCallback(){this.initState(),this.rangesliderObject&&(delete this.rangesliderObject,this.rangesliderObject=null),this.rangesliderObject=this.getRangeSlider(),this.rangesliderObject.connectedCallback()}});var P=__webpack_require__(95),R="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==R&&R,j="URLSearchParams"in R,L="Symbol"in R&&"iterator"in Symbol,B="FileReader"in R&&"Blob"in R&&function(){try{return new Blob,!0}catch(e){return!1}}(),N="FormData"in R,U="ArrayBuffer"in R;if(U)var F=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],k=ArrayBuffer.isView||function(e){return e&&F.indexOf(Object.prototype.toString.call(e))>-1};function V(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function D(e){return"string"!=typeof e&&(e=String(e)),e}function I(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return L&&(t[Symbol.iterator]=function(){return t}),t}function q(e){this.map={},e instanceof q?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function G(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function $(e){return new Promise((function(t,i){e.onload=function(){t(e.result)},e.onerror=function(){i(e.error)}}))}function z(e){var t=new FileReader,i=$(t);return t.readAsArrayBuffer(e),i}function J(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function W(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:B&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:N&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:j&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():U&&B&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=J(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):U&&(ArrayBuffer.prototype.isPrototypeOf(e)||k(e))?this._bodyArrayBuffer=J(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):j&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},B&&(this.blob=function(){var e=G(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?G(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(z)}),this.text=function(){var e,t,i,s=G(this);if(s)return s;if(this._bodyBlob)return e=this._bodyBlob,i=$(t=new FileReader),t.readAsText(e),i;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),i=new Array(t.length),s=0;s<t.length;s++)i[s]=String.fromCharCode(t[s]);return i.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},N&&(this.formData=function(){return this.text().then(X)}),this.json=function(){return this.text().then(JSON.parse)},this}q.prototype.append=function(e,t){e=V(e),t=D(t);var i=this.map[e];this.map[e]=i?i+", "+t:t},q.prototype.delete=function(e){delete this.map[V(e)]},q.prototype.get=function(e){return e=V(e),this.has(e)?this.map[e]:null},q.prototype.has=function(e){return this.map.hasOwnProperty(V(e))},q.prototype.set=function(e,t){this.map[V(e)]=D(t)},q.prototype.forEach=function(e,t){for(var i in this.map)this.map.hasOwnProperty(i)&&e.call(t,this.map[i],i,this)},q.prototype.keys=function(){var e=[];return this.forEach((function(t,i){e.push(i)})),I(e)},q.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),I(e)},q.prototype.entries=function(){var e=[];return this.forEach((function(t,i){e.push([i,t])})),I(e)},L&&(q.prototype[Symbol.iterator]=q.prototype.entries);var Y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function Q(e,t){if(!(this instanceof Q))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var i,s,r=(t=t||{}).body;if(e instanceof Q){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new q(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,r||null==e._bodyInit||(r=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new q(t.headers)),this.method=(s=(i=t.method||this.method||"GET").toUpperCase(),Y.indexOf(s)>-1?s:i),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(r),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==t.cache&&"no-cache"!==t.cache)){var n=/([?&])_=[^&]*/;n.test(this.url)?this.url=this.url.replace(n,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function X(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var i=e.split("="),s=i.shift().replace(/\+/g," "),r=i.join("=").replace(/\+/g," ");t.append(decodeURIComponent(s),decodeURIComponent(r))}})),t}function K(e,t){if(!(this instanceof K))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"",this.headers=new q(t.headers),this.url=t.url||"",this._initBody(e)}Q.prototype.clone=function(){return new Q(this,{body:this._bodyInit})},W.call(Q.prototype),W.call(K.prototype),K.prototype.clone=function(){return new K(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new q(this.headers),url:this.url})},K.error=function(){var e=new K(null,{status:0,statusText:""});return e.type="error",e};var Z=[301,302,303,307,308];K.redirect=function(e,t){if(-1===Z.indexOf(t))throw new RangeError("Invalid status code");return new K(null,{status:t,headers:{location:e}})};var ee=R.DOMException;try{new ee}catch(e){(ee=function(e,t){this.message=e,this.name=t;var i=Error(e);this.stack=i.stack}).prototype=Object.create(Error.prototype),ee.prototype.constructor=ee}function te(e,t){return new Promise((function(i,s){var r=new Q(e,t);if(r.signal&&r.signal.aborted)return s(new ee("Aborted","AbortError"));var n=new XMLHttpRequest;function a(){n.abort()}n.onload=function(){var e,t,s={status:n.status,statusText:n.statusText,headers:(e=n.getAllResponseHeaders()||"",t=new q,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var i=e.split(":"),s=i.shift().trim();if(s){var r=i.join(":").trim();t.append(s,r)}})),t)};s.url="responseURL"in n?n.responseURL:s.headers.get("X-Request-URL");var r="response"in n?n.response:n.responseText;setTimeout((function(){i(new K(r,s))}),0)},n.onerror=function(){setTimeout((function(){s(new TypeError("Network request failed"))}),0)},n.ontimeout=function(){setTimeout((function(){s(new TypeError("Network request failed"))}),0)},n.onabort=function(){setTimeout((function(){s(new ee("Aborted","AbortError"))}),0)},n.open(r.method,function(e){try{return""===e&&R.location.href?R.location.href:e}catch(t){return e}}(r.url),!0),"include"===r.credentials?n.withCredentials=!0:"omit"===r.credentials&&(n.withCredentials=!1),"responseType"in n&&(B?n.responseType="blob":U&&r.headers.get("Content-Type")&&-1!==r.headers.get("Content-Type").indexOf("application/octet-stream")&&(n.responseType="arraybuffer")),!t||"object"!=typeof t.headers||t.headers instanceof q?r.headers.forEach((function(e,t){n.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){n.setRequestHeader(e,D(t.headers[e]))})),r.signal&&(r.signal.addEventListener("abort",a),n.onreadystatechange=function(){4===n.readyState&&r.signal.removeEventListener("abort",a)}),n.send(void 0===r._bodyInit?null:r._bodyInit)}))}te.polyfill=!0,R.fetch||(R.fetch=te,R.Headers=q,R.Request=Q,R.Response=K),window.postMessage=function(e){(0,P.pm)({origin:"http://127.0.0.1/:3000",target:window,data:e})}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UUFBUTFZLElBQ3pELElBT0UrSyxFQUFROFEsU0FDVjlRLEVBQVE4USxPQUFPamQsaUJBQWlCLFFBQVN1ZSxHQUV6Q0QsRUFBSWUsbUJBQXFCLFdBRUEsSUFBbkJmLEVBQUlnQixZQUNOblQsRUFBUThRLE9BQU81SCxvQkFBb0IsUUFBU2tKLEVBRWhELEdBR0ZELEVBQUk1Z0IsVUFBa0MsSUFBdEJ5TyxFQUFRaVAsVUFBNEIsS0FBT2pQLEVBQVFpUCxVQUNyRSxHQUNGLENBRUFnRCxHQUFNbUIsVUFBVyxFQUVaN0csRUFBTzBGLFFBQ1YxRixFQUFPMEYsTUFBUUEsR0FDZjFGLEVBQU9tQixRQUFVQSxFQUNqQm5CLEVBQU9pRSxRQUFVQSxFQUNqQmpFLEVBQU8rRSxTQUFXQSxHQ3hrQnBCcGhCLE9BQU91QyxZQUFjLFNBQVUyQixJQUMzQixJQUFBaEQsSUFBRyxDQUNDTSxPQUFRLHlCQUNSTyxPQUFRL0IsT0FDUmlDLEtBQU1pQyxHQUVkLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2hlcmVudC1nYW1lZmFjZS1yYW5nZXNsaWRlci8uL25vZGVfbW9kdWxlcy9wb3N0bWVzc2FnZS1wb2x5ZmlsbC9wb3N0bWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9jb2hlcmVudC1nYW1lZmFjZS1yYW5nZXNsaWRlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jb2hlcmVudC1nYW1lZmFjZS1yYW5nZXNsaWRlci8uLi8uLi9saWIvY29tcG9uZW50cy5qcyIsIndlYnBhY2s6Ly9jb2hlcmVudC1nYW1lZmFjZS1yYW5nZXNsaWRlci8uL29yaWVudGF0aW9uVW5pdHNOYW1lcy5qcyIsIndlYnBhY2s6Ly9jb2hlcmVudC1nYW1lZmFjZS1yYW5nZXNsaWRlci8uL3Jhbmdlc2xpZGVycy9yYW5nZVNsaWRlclV0aWxzLmpzIiwid2VicGFjazovL2NvaGVyZW50LWdhbWVmYWNlLXJhbmdlc2xpZGVyLy4vcmFuZ2VzbGlkZXJzL3Jhbmdlc2xpZGVyQmFzZS5qcyIsIndlYnBhY2s6Ly9jb2hlcmVudC1nYW1lZmFjZS1yYW5nZXNsaWRlci8uL3Jhbmdlc2xpZGVycy9zaW5nbGVIYW5kbGVTbGlkZXJzL3NpbmdsZUhhbmRsZVJhbmdlU2xpZGVyQmFzZS5qcyIsIndlYnBhY2s6Ly9jb2hlcmVudC1nYW1lZmFjZS1yYW5nZXNsaWRlci8uL3RlbXBsYXRlcy92ZXJ0aWNhbC5odG1sIiwid2VicGFjazovL2NvaGVyZW50LWdhbWVmYWNlLXJhbmdlc2xpZGVyLy4vdGVtcGxhdGVzL2hvcml6b250YWwuaHRtbCIsIndlYnBhY2s6Ly9jb2hlcmVudC1nYW1lZmFjZS1yYW5nZXNsaWRlci8uL3Jhbmdlc2xpZGVycy9zaW5nbGVIYW5kbGVTbGlkZXJzL2Jhc2ljUmFuZ2VzbGlkZXIuanMiLCJ3ZWJwYWNrOi8vY29oZXJlbnQtZ2FtZWZhY2UtcmFuZ2VzbGlkZXIvLi9yYW5nZXNsaWRlcnMvc2luZ2xlSGFuZGxlU2xpZGVycy92YWx1ZXNSYW5nZXNsaWRlci5qcyIsIndlYnBhY2s6Ly9jb2hlcmVudC1nYW1lZmFjZS1yYW5nZXNsaWRlci8uL3RlbXBsYXRlcy9ob3Jpem9udGFsVHdvSGFuZGxlcy5odG1sIiwid2VicGFjazovL2NvaGVyZW50LWdhbWVmYWNlLXJhbmdlc2xpZGVyLy4vcmFuZ2VzbGlkZXJzL3R3b0hhbmRsZXNTbGlkZXJzL3R3b0hhbmRsZXNSYW5nZVNsaWRlckJhc2UuanMiLCJ3ZWJwYWNrOi8vY29oZXJlbnQtZ2FtZWZhY2UtcmFuZ2VzbGlkZXIvLi90ZW1wbGF0ZXMvdmVydGljYWxUd29IYW5kbGVzLmh0bWwiLCJ3ZWJwYWNrOi8vY29oZXJlbnQtZ2FtZWZhY2UtcmFuZ2VzbGlkZXIvLi9yYW5nZXNsaWRlcnMvdHdvSGFuZGxlc1NsaWRlcnMvYmFzaWNUd29IYW5kbGVzUmFuZ2VTbGlkZXIuanMiLCJ3ZWJwYWNrOi8vY29oZXJlbnQtZ2FtZWZhY2UtcmFuZ2VzbGlkZXIvLi9zY3JpcHQuanMiLCJ3ZWJwYWNrOi8vY29oZXJlbnQtZ2FtZWZhY2UtcmFuZ2VzbGlkZXIvLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovL2NvaGVyZW50LWdhbWVmYWNlLXJhbmdlc2xpZGVyLy4vZGVtby9kZW1vLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuIFRoZSBNSVQgTGljZW5zZVxuXG4gQ29weXJpZ2h0IChjKSAyMDEwIERhbmllbCBQYXJrIChodHRwOi8vbWV0YXdlYi5jb20sIGh0dHA6Ly9wb3N0bWVzc2FnZS5mcmVlYmFzZWFwcHMuY29tKVxuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKiovXG52YXIgTk9fSlFVRVJZID0ge307XG4oZnVuY3Rpb24od2luZG93LCAkLCB1bmRlZmluZWQpIHtcblxuICAgICBpZiAoIShcImNvbnNvbGVcIiBpbiB3aW5kb3cpKSB7XG4gICAgICAgICB2YXIgYyA9IHdpbmRvdy5jb25zb2xlID0ge307XG4gICAgICAgICBjLmxvZyA9IGMud2FybiA9IGMuZXJyb3IgPSBjLmRlYnVnID0gZnVuY3Rpb24oKXt9O1xuICAgICB9XG5cbiAgICAgaWYgKCQgPT09IE5PX0pRVUVSWSkge1xuICAgICAgICAgLy8galF1ZXJ5IGlzIG9wdGlvbmFsXG4gICAgICAgICAkID0ge1xuICAgICAgICAgICAgIGZuOiB7fSxcbiAgICAgICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICB2YXIgYSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0xLGxlbj1hcmd1bWVudHMubGVuZ3RoOyBpPGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGFbcHJvcF0gPSBiW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH07XG4gICAgIH1cblxuICAgICAkLmZuLnBtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICBjb25zb2xlLmxvZyhcInVzYWdlOiBcXG50byBzZW5kOiAgICAkLnBtKG9wdGlvbnMpXFxudG8gcmVjZWl2ZTogJC5wbS5iaW5kKHR5cGUsIGZuLCBbb3JpZ2luXSlcIik7XG4gICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgfTtcblxuICAgICAvLyBzZW5kIHBvc3RtZXNzYWdlXG4gICAgICQucG0gPSB3aW5kb3cucG0gPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICBwbS5zZW5kKG9wdGlvbnMpO1xuICAgICB9O1xuXG4gICAgIC8vIGJpbmQgcG9zdG1lc3NhZ2UgaGFuZGxlclxuICAgICAkLnBtLmJpbmQgPSB3aW5kb3cucG0uYmluZCA9IGZ1bmN0aW9uKHR5cGUsIGZuLCBvcmlnaW4sIGhhc2gsIGFzeW5jX3JlcGx5KSB7XG4gICAgICAgICBwbS5iaW5kKHR5cGUsIGZuLCBvcmlnaW4sIGhhc2gsIGFzeW5jX3JlcGx5ID09PSB0cnVlKTtcbiAgICAgfTtcblxuICAgICAvLyB1bmJpbmQgcG9zdG1lc3NhZ2UgaGFuZGxlclxuICAgICAkLnBtLnVuYmluZCA9IHdpbmRvdy5wbS51bmJpbmQgPSBmdW5jdGlvbih0eXBlLCBmbikge1xuICAgICAgICAgcG0udW5iaW5kKHR5cGUsIGZuKTtcbiAgICAgfTtcblxuICAgICAvLyBkZWZhdWx0IHBvc3RtZXNzYWdlIG9yaWdpbiBvbiBiaW5kXG4gICAgICQucG0ub3JpZ2luID0gd2luZG93LnBtLm9yaWdpbiA9IG51bGw7XG5cbiAgICAgLy8gZGVmYXVsdCBwb3N0bWVzc2FnZSBwb2xsaW5nIGlmIHVzaW5nIGxvY2F0aW9uIGhhc2ggdG8gcGFzcyBwb3N0bWVzc2FnZXNcbiAgICAgJC5wbS5wb2xsID0gd2luZG93LnBtLnBvbGwgPSAyMDA7XG5cbiAgICAgdmFyIHBtID0ge1xuXG4gICAgICAgICBzZW5kOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICAgdmFyIG8gPSAkLmV4dGVuZCh7fSwgcG0uZGVmYXVsdHMsIG9wdGlvbnMpLFxuICAgICAgICAgICAgIHRhcmdldCA9IG8udGFyZ2V0O1xuICAgICAgICAgICAgIGlmICghby50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwicG9zdG1lc3NhZ2UgdGFyZ2V0IHdpbmRvdyByZXF1aXJlZFwiKTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAoIW8udHlwZSkge1xuICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJwb3N0bWVzc2FnZSB0eXBlIHJlcXVpcmVkXCIpO1xuICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHZhciBtc2cgPSB7ZGF0YTpvLmRhdGEsIHR5cGU6by50eXBlfTtcbiAgICAgICAgICAgICBpZiAoby5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgIG1zZy5jYWxsYmFjayA9IHBtLl9jYWxsYmFjayhvLnN1Y2Nlc3MpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAoby5lcnJvcikge1xuICAgICAgICAgICAgICAgICBtc2cuZXJyYmFjayA9IHBtLl9jYWxsYmFjayhvLmVycm9yKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgaWYgKChcInBvc3RNZXNzYWdlXCIgaW4gdGFyZ2V0KSAmJiAhby5oYXNoKSB7XG4gICAgICAgICAgICAgICAgIHBtLl9iaW5kKCk7XG4gICAgICAgICAgICAgICAgIHRhcmdldC5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShtc2cpLCBvLm9yaWdpbiB8fCAnKicpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgcG0uaGFzaC5fYmluZCgpO1xuICAgICAgICAgICAgICAgICBwbS5oYXNoLnNlbmQobywgbXNnKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9LFxuXG4gICAgICAgICBiaW5kOiBmdW5jdGlvbih0eXBlLCBmbiwgb3JpZ2luLCBoYXNoLCBhc3luY19yZXBseSkge1xuICAgICAgICAgICBwbS5fcmVwbHlCaW5kICggdHlwZSwgZm4sIG9yaWdpbiwgaGFzaCwgYXN5bmNfcmVwbHkgKTtcbiAgICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgICBfcmVwbHlCaW5kOiBmdW5jdGlvbih0eXBlLCBmbiwgb3JpZ2luLCBoYXNoLCBpc0NhbGxiYWNrKSB7XG4gICAgICAgICAgIGlmICgoXCJwb3N0TWVzc2FnZVwiIGluIHdpbmRvdykgJiYgIWhhc2gpIHtcbiAgICAgICAgICAgICAgIHBtLl9iaW5kKCk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICBwbS5oYXNoLl9iaW5kKCk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgdmFyIGwgPSBwbS5kYXRhKFwibGlzdGVuZXJzLnBvc3RtZXNzYWdlXCIpO1xuICAgICAgICAgICBpZiAoIWwpIHtcbiAgICAgICAgICAgICAgIGwgPSB7fTtcbiAgICAgICAgICAgICAgIHBtLmRhdGEoXCJsaXN0ZW5lcnMucG9zdG1lc3NhZ2VcIiwgbCk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgdmFyIGZucyA9IGxbdHlwZV07XG4gICAgICAgICAgIGlmICghZm5zKSB7XG4gICAgICAgICAgICAgICBmbnMgPSBbXTtcbiAgICAgICAgICAgICAgIGxbdHlwZV0gPSBmbnM7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgZm5zLnB1c2goe2ZuOmZuLCBjYWxsYmFjazogaXNDYWxsYmFjaywgb3JpZ2luOm9yaWdpbiB8fCAkLnBtLm9yaWdpbn0pO1xuICAgICAgICAgfSxcblxuICAgICAgICAgdW5iaW5kOiBmdW5jdGlvbih0eXBlLCBmbikge1xuICAgICAgICAgICAgIHZhciBsID0gcG0uZGF0YShcImxpc3RlbmVycy5wb3N0bWVzc2FnZVwiKTtcbiAgICAgICAgICAgICBpZiAobCkge1xuICAgICAgICAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHNwZWNpZmljIGxpc3RlbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZucyA9IGxbdHlwZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTAsbGVuPWZucy5sZW5ndGg7IGk8bGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gZm5zW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uZm4gIT09IGZuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5wdXNoKG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxbdHlwZV0gPSBtO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBhbGwgbGlzdGVuZXJzIGJ5IHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbFt0eXBlXTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIC8vIHVuYmluZCBhbGwgbGlzdGVuZXJzIG9mIGFsbCB0eXBlXG4gICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxbaV07XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICB9LFxuXG4gICAgICAgICBkYXRhOiBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gcG0uX2RhdGFba107XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHBtLl9kYXRhW2tdID0gdjtcbiAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgIH0sXG5cbiAgICAgICAgIF9kYXRhOiB7fSxcblxuICAgICAgICAgX0NIQVJTOiAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLnNwbGl0KCcnKSxcblxuICAgICAgICAgX3JhbmRvbTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgdmFyIHIgPSBbXTtcbiAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8MzI7IGkrKykge1xuICAgICAgICAgICAgICAgICByW2ldID0gcG0uX0NIQVJTWzAgfCBNYXRoLnJhbmRvbSgpICogMzJdO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgcmV0dXJuIHIuam9pbihcIlwiKTtcbiAgICAgICAgIH0sXG5cbiAgICAgICAgIF9jYWxsYmFjazogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgICB2YXIgY2JzID0gcG0uZGF0YShcImNhbGxiYWNrcy5wb3N0bWVzc2FnZVwiKTtcbiAgICAgICAgICAgICBpZiAoIWNicykge1xuICAgICAgICAgICAgICAgICBjYnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgcG0uZGF0YShcImNhbGxiYWNrcy5wb3N0bWVzc2FnZVwiLCBjYnMpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB2YXIgciA9IHBtLl9yYW5kb20oKTtcbiAgICAgICAgICAgICBjYnNbcl0gPSBmbjtcbiAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgIH0sXG5cbiAgICAgICAgIF9iaW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAvLyBhcmUgd2UgYWxyZWFkeSBsaXN0ZW5pbmcgdG8gbWVzc2FnZSBldmVudHMgb24gdGhpcyB3P1xuICAgICAgICAgICAgIGlmICghcG0uZGF0YShcImxpc3RlbmluZy5wb3N0bWVzc2FnZVwiKSkge1xuICAgICAgICAgICAgICAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBwbS5fZGlzcGF0Y2gsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIGlmICh3aW5kb3cuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBwbS5fZGlzcGF0Y2gpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHBtLmRhdGEoXCJsaXN0ZW5pbmcucG9zdG1lc3NhZ2VcIiwgMSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgfSxcblxuICAgICAgICAgX2Rpc3BhdGNoOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIiQucG0uZGlzcGF0Y2hcIiwgZSwgdGhpcyk7XG4gICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInBvc3RtZXNzYWdlIGRhdGEgaW52YWxpZCBqc29uOiBcIiwgZXgpO1xuICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGlmICghbXNnLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwicG9zdG1lc3NhZ2UgbWVzc2FnZSB0eXBlIHJlcXVpcmVkXCIpO1xuICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHZhciBjYnMgPSBwbS5kYXRhKFwiY2FsbGJhY2tzLnBvc3RtZXNzYWdlXCIpIHx8IHt9LFxuICAgICAgICAgICAgIGNiID0gY2JzW21zZy50eXBlXTtcbiAgICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgICAgY2IobXNnLmRhdGEpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgdmFyIGwgPSBwbS5kYXRhKFwibGlzdGVuZXJzLnBvc3RtZXNzYWdlXCIpIHx8IHt9O1xuICAgICAgICAgICAgICAgICB2YXIgZm5zID0gbFttc2cudHlwZV0gfHwgW107XG4gICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MCxsZW49Zm5zLmxlbmd0aDsgaTxsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBmbnNbaV07XG4gICAgICAgICAgICAgICAgICAgICBpZiAoby5vcmlnaW4gJiYgby5vcmlnaW4gIT09ICcqJyAmJiBlLm9yaWdpbiAhPT0gby5vcmlnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJwb3N0bWVzc2FnZSBtZXNzYWdlIG9yaWdpbiBtaXNtYXRjaFwiLCBlLm9yaWdpbiwgby5vcmlnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtc2cuZXJyYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RpZnkgcG9zdCBtZXNzYWdlIGVycmJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJwb3N0bWVzc2FnZSBvcmlnaW4gbWlzbWF0Y2hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjogW2Uub3JpZ2luLCBvLm9yaWdpbl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG0uc2VuZCh7dGFyZ2V0OmUuc291cmNlLCBkYXRhOmVycm9yLCB0eXBlOm1zZy5lcnJiYWNrfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZW5kUmVwbHkgKCBkYXRhICkge1xuICAgICAgICAgICAgICAgICAgICAgICBpZiAobXNnLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBwbS5zZW5kKHt0YXJnZXQ6ZS5zb3VyY2UsIGRhdGE6ZGF0YSwgdHlwZTptc2cuY2FsbGJhY2t9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggby5jYWxsYmFjayApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZm4obXNnLmRhdGEsIHNlbmRSZXBseSwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRSZXBseSAoIG8uZm4obXNnLmRhdGEsIGUpICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1zZy5lcnJiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdGlmeSBwb3N0IG1lc3NhZ2UgZXJyYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbS5zZW5kKHt0YXJnZXQ6ZS5zb3VyY2UsIGRhdGE6ZXgsIHR5cGU6bXNnLmVycmJhY2t9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICB9O1xuXG4gICAgIC8vIGxvY2F0aW9uIGhhc2ggcG9sbGluZ1xuICAgICBwbS5oYXNoID0ge1xuXG4gICAgICAgICBzZW5kOiBmdW5jdGlvbihvcHRpb25zLCBtc2cpIHtcbiAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiaGFzaC5zZW5kXCIsIHRhcmdldF93aW5kb3csIG9wdGlvbnMsIG1zZyk7XG4gICAgICAgICAgICAgdmFyIHRhcmdldF93aW5kb3cgPSBvcHRpb25zLnRhcmdldCxcbiAgICAgICAgICAgICB0YXJnZXRfdXJsID0gb3B0aW9ucy51cmw7XG4gICAgICAgICAgICAgaWYgKCF0YXJnZXRfdXJsKSB7XG4gICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInBvc3RtZXNzYWdlIHRhcmdldCB3aW5kb3cgdXJsIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHRhcmdldF91cmwgPSBwbS5oYXNoLl91cmwodGFyZ2V0X3VybCk7XG4gICAgICAgICAgICAgdmFyIHNvdXJjZV93aW5kb3csXG4gICAgICAgICAgICAgc291cmNlX3VybCA9IHBtLmhhc2guX3VybCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgICAgaWYgKHdpbmRvdyA9PSB0YXJnZXRfd2luZG93LnBhcmVudCkge1xuICAgICAgICAgICAgICAgICBzb3VyY2Vfd2luZG93ID0gXCJwYXJlbnRcIjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTAsbGVuPXBhcmVudC5mcmFtZXMubGVuZ3RoOyBpPGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBwYXJlbnQuZnJhbWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmID09IHdpbmRvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2Vfd2luZG93ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBjYXRjaChleCkge1xuICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmE6IHNlY3VyaXR5IGVycm9yIHRyeWluZyB0byBhY2Nlc3MgcGFyZW50LmZyYW1lcyB4LW9yaWdpblxuICAgICAgICAgICAgICAgICAgICAgLy8ganVzZSB1c2Ugd2luZG93Lm5hbWVcbiAgICAgICAgICAgICAgICAgICAgIHNvdXJjZV93aW5kb3cgPSB3aW5kb3cubmFtZTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAoc291cmNlX3dpbmRvdyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInBvc3RtZXNzYWdlIHdpbmRvd3MgbXVzdCBiZSBkaXJlY3QgcGFyZW50L2NoaWxkIHdpbmRvd3MgYW5kIHRoZSBjaGlsZCBtdXN0IGJlIGF2YWlsYWJsZSB0aHJvdWdoIHRoZSBwYXJlbnQgd2luZG93LmZyYW1lcyBsaXN0XCIpO1xuICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHZhciBoYXNobWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICAgXCJ4LXJlcXVlc3RlZC13aXRoXCI6IFwicG9zdG1lc3NhZ2VcIixcbiAgICAgICAgICAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICBuYW1lOiBzb3VyY2Vfd2luZG93LFxuICAgICAgICAgICAgICAgICAgICAgdXJsOiBzb3VyY2VfdXJsXG4gICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIHBvc3RtZXNzYWdlOiBtc2dcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIHZhciBoYXNoX2lkID0gXCIjeC1wb3N0bWVzc2FnZS1pZD1cIiArIHBtLl9yYW5kb20oKTtcbiAgICAgICAgICAgICB0YXJnZXRfd2luZG93LmxvY2F0aW9uID0gdGFyZ2V0X3VybCArIGhhc2hfaWQgKyBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoaGFzaG1lc3NhZ2UpKTtcbiAgICAgICAgIH0sXG5cbiAgICAgICAgIF9yZWdleDogL15cXCN4XFwtcG9zdG1lc3NhZ2VcXC1pZFxcPShcXHd7MzJ9KS8sXG5cbiAgICAgICAgIF9yZWdleF9sZW46IFwiI3gtcG9zdG1lc3NhZ2UtaWQ9XCIubGVuZ3RoICsgMzIsXG5cbiAgICAgICAgIF9iaW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAvLyBhcmUgd2UgYWxyZWFkeSBsaXN0ZW5pbmcgdG8gbWVzc2FnZSBldmVudHMgb24gdGhpcyB3P1xuICAgICAgICAgICAgIGlmICghcG0uZGF0YShcInBvbGxpbmcucG9zdG1lc3NhZ2VcIikpIHtcbiAgICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IFwiXCIgKyB3aW5kb3cubG9jYXRpb24uaGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBwbS5oYXNoLl9yZWdleC5leGVjKGhhc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBtWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbS5oYXNoLl9sYXN0ICE9PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbS5oYXNoLl9sYXN0ID0gaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBtLmhhc2guX2Rpc3BhdGNoKGhhc2guc3Vic3RyaW5nKHBtLmhhc2guX3JlZ2V4X2xlbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJC5wbS5wb2xsIHx8IDIwMCk7XG4gICAgICAgICAgICAgICAgIHBtLmRhdGEoXCJwb2xsaW5nLnBvc3RtZXNzYWdlXCIsIDEpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH0sXG5cbiAgICAgICAgIF9kaXNwYXRjaDogZnVuY3Rpb24oaGFzaCkge1xuICAgICAgICAgICAgIGlmICghaGFzaCkge1xuICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgIGhhc2ggPSBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudChoYXNoKSk7XG4gICAgICAgICAgICAgICAgIGlmICghKGhhc2hbJ3gtcmVxdWVzdGVkLXdpdGgnXSA9PT0gJ3Bvc3RtZXNzYWdlJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICBoYXNoLnNvdXJjZSAmJiBoYXNoLnNvdXJjZS5uYW1lICE9IG51bGwgJiYgaGFzaC5zb3VyY2UudXJsICYmIGhhc2gucG9zdG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgc2luY2UgaGFzaCBjb3VsZCd2ZSBjb21lIGZyb20gc29tZXdoZXJlIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgLy8gaWdub3JlIHNpbmNlIGhhc2ggY291bGQndmUgY29tZSBmcm9tIHNvbWV3aGVyZSBlbHNlXG4gICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgdmFyIG1zZyA9IGhhc2gucG9zdG1lc3NhZ2UsXG4gICAgICAgICAgICAgY2JzID0gcG0uZGF0YShcImNhbGxiYWNrcy5wb3N0bWVzc2FnZVwiKSB8fCB7fSxcbiAgICAgICAgICAgICBjYiA9IGNic1ttc2cudHlwZV07XG4gICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICAgIGNiKG1zZy5kYXRhKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgIHZhciBzb3VyY2Vfd2luZG93O1xuICAgICAgICAgICAgICAgICBpZiAoaGFzaC5zb3VyY2UubmFtZSA9PT0gXCJwYXJlbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgc291cmNlX3dpbmRvdyA9IHdpbmRvdy5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICBzb3VyY2Vfd2luZG93ID0gd2luZG93LmZyYW1lc1toYXNoLnNvdXJjZS5uYW1lXTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB2YXIgbCA9IHBtLmRhdGEoXCJsaXN0ZW5lcnMucG9zdG1lc3NhZ2VcIikgfHwge307XG4gICAgICAgICAgICAgICAgIHZhciBmbnMgPSBsW21zZy50eXBlXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wLGxlbj1mbnMubGVuZ3RoOyBpPGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGZuc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgIGlmIChvLm9yaWdpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW4gPSAvaHR0cHM/XFw6XFwvXFwvW15cXC9dKi8uZXhlYyhoYXNoLnNvdXJjZS51cmwpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLm9yaWdpbiAhPT0gJyonICYmIG9yaWdpbiAhPT0gby5vcmlnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwicG9zdG1lc3NhZ2UgbWVzc2FnZSBvcmlnaW4gbWlzbWF0Y2hcIiwgb3JpZ2luLCBvLm9yaWdpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtc2cuZXJyYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90aWZ5IHBvc3QgbWVzc2FnZSBlcnJiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJwb3N0bWVzc2FnZSBvcmlnaW4gbWlzbWF0Y2hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW46IFtvcmlnaW4sIG8ub3JpZ2luXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBtLnNlbmQoe3RhcmdldDpzb3VyY2Vfd2luZG93LCBkYXRhOmVycm9yLCB0eXBlOm1zZy5lcnJiYWNrLCBoYXNoOnRydWUsIHVybDpoYXNoLnNvdXJjZS51cmx9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNlbmRSZXBseSAoIGRhdGEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIGlmIChtc2cuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbS5zZW5kKHt0YXJnZXQ6c291cmNlX3dpbmRvdywgZGF0YTpkYXRhLCB0eXBlOm1zZy5jYWxsYmFjaywgaGFzaDp0cnVlLCB1cmw6aGFzaC5zb3VyY2UudXJsfSk7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG8uY2FsbGJhY2sgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBvLmZuKG1zZy5kYXRhLCBzZW5kUmVwbHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kUmVwbHkgKCBvLmZuKG1zZy5kYXRhKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtc2cuZXJyYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RpZnkgcG9zdCBtZXNzYWdlIGVycmJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG0uc2VuZCh7dGFyZ2V0OnNvdXJjZV93aW5kb3csIGRhdGE6ZXgsIHR5cGU6bXNnLmVycmJhY2ssIGhhc2g6dHJ1ZSwgdXJsOmhhc2guc291cmNlLnVybH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9LFxuXG4gICAgICAgICBfdXJsOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAvLyB1cmwgbWludXMgaGFzaCBwYXJ0XG4gICAgICAgICAgICAgcmV0dXJuIChcIlwiK3VybCkucmVwbGFjZSgvIy4qJC8sIFwiXCIpO1xuICAgICAgICAgfVxuXG4gICAgIH07XG5cbiAgICAgJC5leHRlbmQocG0sIHtcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBudWxsLCAgLyogdGFyZ2V0IHdpbmRvdyAocmVxdWlyZWQpICovXG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiBudWxsLCAgICAgLyogdGFyZ2V0IHdpbmRvdyB1cmwgKHJlcXVpcmVkIGlmIG5vIHdpbmRvdy5wb3N0TWVzc2FnZSBvciBoYXNoID09IHRydWUpICovXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogbnVsbCwgICAgLyogbWVzc2FnZSB0eXBlIChyZXF1aXJlZCkgKi9cbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBudWxsLCAgICAvKiBtZXNzYWdlIGRhdGEgKHJlcXVpcmVkKSAqL1xuICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IG51bGwsIC8qIHN1Y2Nlc3MgY2FsbGJhY2sgKG9wdGlvbmFsKSAqL1xuICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLCAgIC8qIGVycm9yIGNhbGxiYWNrIChvcHRpb25hbCkgKi9cbiAgICAgICAgICAgICAgICAgICAgICBvcmlnaW46IFwiKlwiLCAgIC8qIHBvc3RtZXNzYWdlIG9yaWdpbiAob3B0aW9uYWwpICovXG4gICAgICAgICAgICAgICAgICAgICAgaGFzaDogZmFsc2UgICAgLyogdXNlIGxvY2F0aW9uIGhhc2ggZm9yIG1lc3NhZ2UgcGFzc2luZyAob3B0aW9uYWwpICovXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gfSkodGhpcywgdHlwZW9mIGpRdWVyeSA9PT0gXCJ1bmRlZmluZWRcIiA/IE5PX0pRVUVSWSA6IGpRdWVyeSk7XG5cbi8qKlxuICogaHR0cDovL3d3dy5KU09OLm9yZy9qc29uMi5qc1xuICoqL1xuaWYgKCEgKFwiSlNPTlwiIGluIHdpbmRvdyAmJiB3aW5kb3cuSlNPTikpe0pTT049e319KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZihuKXtyZXR1cm4gbjwxMD9cIjBcIituOm59aWYodHlwZW9mIERhdGUucHJvdG90eXBlLnRvSlNPTiE9PVwiZnVuY3Rpb25cIil7RGF0ZS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKGtleSl7cmV0dXJuIHRoaXMuZ2V0VVRDRnVsbFllYXIoKStcIi1cIitmKHRoaXMuZ2V0VVRDTW9udGgoKSsxKStcIi1cIitmKHRoaXMuZ2V0VVRDRGF0ZSgpKStcIlRcIitmKHRoaXMuZ2V0VVRDSG91cnMoKSkrXCI6XCIrZih0aGlzLmdldFVUQ01pbnV0ZXMoKSkrXCI6XCIrZih0aGlzLmdldFVUQ1NlY29uZHMoKSkrXCJaXCJ9O1N0cmluZy5wcm90b3R5cGUudG9KU09OPU51bWJlci5wcm90b3R5cGUudG9KU09OPUJvb2xlYW4ucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbihrZXkpe3JldHVybiB0aGlzLnZhbHVlT2YoKX19dmFyIGN4PS9bXFx1MDAwMFxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLGVzY2FwYWJsZT0vW1xcXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHg5ZlxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLGdhcCxpbmRlbnQsbWV0YT17XCJcXGJcIjpcIlxcXFxiXCIsXCJcXHRcIjpcIlxcXFx0XCIsXCJcXG5cIjpcIlxcXFxuXCIsXCJcXGZcIjpcIlxcXFxmXCIsXCJcXHJcIjpcIlxcXFxyXCIsJ1wiJzonXFxcXFwiJyxcIlxcXFxcIjpcIlxcXFxcXFxcXCJ9LHJlcDtmdW5jdGlvbiBxdW90ZShzdHJpbmcpe2VzY2FwYWJsZS5sYXN0SW5kZXg9MDtyZXR1cm4gZXNjYXBhYmxlLnRlc3Qoc3RyaW5nKT8nXCInK3N0cmluZy5yZXBsYWNlKGVzY2FwYWJsZSxmdW5jdGlvbihhKXt2YXIgYz1tZXRhW2FdO3JldHVybiB0eXBlb2YgYz09PVwic3RyaW5nXCI/YzpcIlxcXFx1XCIrKFwiMDAwMFwiK2EuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KX0pKydcIic6J1wiJytzdHJpbmcrJ1wiJ31mdW5jdGlvbiBzdHIoa2V5LGhvbGRlcil7dmFyIGksayx2LGxlbmd0aCxtaW5kPWdhcCxwYXJ0aWFsLHZhbHVlPWhvbGRlcltrZXldO2lmKHZhbHVlJiZ0eXBlb2YgdmFsdWU9PT1cIm9iamVjdFwiJiZ0eXBlb2YgdmFsdWUudG9KU09OPT09XCJmdW5jdGlvblwiKXt2YWx1ZT12YWx1ZS50b0pTT04oa2V5KX1pZih0eXBlb2YgcmVwPT09XCJmdW5jdGlvblwiKXt2YWx1ZT1yZXAuY2FsbChob2xkZXIsa2V5LHZhbHVlKX1zd2l0Y2godHlwZW9mIHZhbHVlKXtjYXNlXCJzdHJpbmdcIjpyZXR1cm4gcXVvdGUodmFsdWUpO2Nhc2VcIm51bWJlclwiOnJldHVybiBpc0Zpbml0ZSh2YWx1ZSk/U3RyaW5nKHZhbHVlKTpcIm51bGxcIjtjYXNlXCJib29sZWFuXCI6Y2FzZVwibnVsbFwiOnJldHVybiBTdHJpbmcodmFsdWUpO2Nhc2VcIm9iamVjdFwiOmlmKCF2YWx1ZSl7cmV0dXJuXCJudWxsXCJ9Z2FwKz1pbmRlbnQ7cGFydGlhbD1bXTtpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHZhbHVlKT09PVwiW29iamVjdCBBcnJheV1cIil7bGVuZ3RoPXZhbHVlLmxlbmd0aDtmb3IoaT0wO2k8bGVuZ3RoO2krPTEpe3BhcnRpYWxbaV09c3RyKGksdmFsdWUpfHxcIm51bGxcIn12PXBhcnRpYWwubGVuZ3RoPT09MD9cIltdXCI6Z2FwP1wiW1xcblwiK2dhcCtwYXJ0aWFsLmpvaW4oXCIsXFxuXCIrZ2FwKStcIlxcblwiK21pbmQrXCJdXCI6XCJbXCIrcGFydGlhbC5qb2luKFwiLFwiKStcIl1cIjtnYXA9bWluZDtyZXR1cm4gdn1pZihyZXAmJnR5cGVvZiByZXA9PT1cIm9iamVjdFwiKXtsZW5ndGg9cmVwLmxlbmd0aDtmb3IoaT0wO2k8bGVuZ3RoO2krPTEpe2s9cmVwW2ldO2lmKHR5cGVvZiBrPT09XCJzdHJpbmdcIil7dj1zdHIoayx2YWx1ZSk7aWYodil7cGFydGlhbC5wdXNoKHF1b3RlKGspKyhnYXA/XCI6IFwiOlwiOlwiKSt2KX19fX1lbHNle2ZvcihrIGluIHZhbHVlKXtpZihPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSxrKSl7dj1zdHIoayx2YWx1ZSk7aWYodil7cGFydGlhbC5wdXNoKHF1b3RlKGspKyhnYXA/XCI6IFwiOlwiOlwiKSt2KX19fX12PXBhcnRpYWwubGVuZ3RoPT09MD9cInt9XCI6Z2FwP1wie1xcblwiK2dhcCtwYXJ0aWFsLmpvaW4oXCIsXFxuXCIrZ2FwKStcIlxcblwiK21pbmQrXCJ9XCI6XCJ7XCIrcGFydGlhbC5qb2luKFwiLFwiKStcIn1cIjtnYXA9bWluZDtyZXR1cm4gdn19aWYodHlwZW9mIEpTT04uc3RyaW5naWZ5IT09XCJmdW5jdGlvblwiKXtKU09OLnN0cmluZ2lmeT1mdW5jdGlvbih2YWx1ZSxyZXBsYWNlcixzcGFjZSl7dmFyIGk7Z2FwPVwiXCI7aW5kZW50PVwiXCI7aWYodHlwZW9mIHNwYWNlPT09XCJudW1iZXJcIil7Zm9yKGk9MDtpPHNwYWNlO2krPTEpe2luZGVudCs9XCIgXCJ9fWVsc2V7aWYodHlwZW9mIHNwYWNlPT09XCJzdHJpbmdcIil7aW5kZW50PXNwYWNlfX1yZXA9cmVwbGFjZXI7aWYocmVwbGFjZXImJnR5cGVvZiByZXBsYWNlciE9PVwiZnVuY3Rpb25cIiYmKHR5cGVvZiByZXBsYWNlciE9PVwib2JqZWN0XCJ8fHR5cGVvZiByZXBsYWNlci5sZW5ndGghPT1cIm51bWJlclwiKSl7dGhyb3cgbmV3IEVycm9yKFwiSlNPTi5zdHJpbmdpZnlcIil9cmV0dXJuIHN0cihcIlwiLHtcIlwiOnZhbHVlfSl9fWlmKHR5cGVvZiBKU09OLnBhcnNlIT09XCJmdW5jdGlvblwiKXtKU09OLnBhcnNlPWZ1bmN0aW9uKHRleHQscmV2aXZlcil7dmFyIGo7ZnVuY3Rpb24gd2Fsayhob2xkZXIsa2V5KXt2YXIgayx2LHZhbHVlPWhvbGRlcltrZXldO2lmKHZhbHVlJiZ0eXBlb2YgdmFsdWU9PT1cIm9iamVjdFwiKXtmb3IoayBpbiB2YWx1ZSl7aWYoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodmFsdWUsaykpe3Y9d2Fsayh2YWx1ZSxrKTtpZih2IT09dW5kZWZpbmVkKXt2YWx1ZVtrXT12fWVsc2V7ZGVsZXRlIHZhbHVlW2tdfX19fXJldHVybiByZXZpdmVyLmNhbGwoaG9sZGVyLGtleSx2YWx1ZSl9Y3gubGFzdEluZGV4PTA7aWYoY3gudGVzdCh0ZXh0KSl7dGV4dD10ZXh0LnJlcGxhY2UoY3gsZnVuY3Rpb24oYSl7cmV0dXJuXCJcXFxcdVwiKyhcIjAwMDBcIithLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCl9KX1pZigvXltcXF0sOnt9XFxzXSokLy50ZXN0KHRleHQucmVwbGFjZSgvXFxcXCg/OltcIlxcXFxcXC9iZm5ydF18dVswLTlhLWZBLUZdezR9KS9nLFwiQFwiKS5yZXBsYWNlKC9cIlteXCJcXFxcXFxuXFxyXSpcInx0cnVlfGZhbHNlfG51bGx8LT9cXGQrKD86XFwuXFxkKik/KD86W2VFXVsrXFwtXT9cXGQrKT8vZyxcIl1cIikucmVwbGFjZSgvKD86Xnw6fCwpKD86XFxzKlxcWykrL2csXCJcIikpKXtqPWV2YWwoXCIoXCIrdGV4dCtcIilcIik7cmV0dXJuIHR5cGVvZiByZXZpdmVyPT09XCJmdW5jdGlvblwiP3dhbGsoe1wiXCI6an0sXCJcIik6an10aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJKU09OLnBhcnNlXCIpfX19KCkpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIENvaGVyZW50IExhYnMgQUQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlbGVzcy1lc2NhcGUgKi9cclxuY29uc3QgbmV3TGluZXNSZWdFeHAgPSBuZXcgUmVnRXhwKCdeXFxzK3xcXHMrJCcsICdnJyk7XHJcbmNvbnN0IE5BVElWRV9URVhUX0ZJRUxEX0VMRU1FTlRTID0gWydpbnB1dCcsICd0ZXh0YXJlYSddO1xyXG53aW5kb3cuR1VJQ29tcG9uZW50c0RlZmluZWRFbGVtZW50cyA9IHt9O1xyXG5cclxuaWYgKCF3aW5kb3cuR1VJQ29tcG9uZW50c0RlZmluZWRFbGVtZW50cykgd2luZG93LkdVSUNvbXBvbmVudHNEZWZpbmVkRWxlbWVudHMgPSB7fTtcclxuXHJcblxyXG4vKipcclxuICogQ2hlY2tzIGlmIHRoZSBwYXNzZWQgZWxlbWVudCBpcyBhIG5hdGl2ZSB0ZXh0IGZpZWxkXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc05hdGl2ZVRleHRGaWVsZChlbGVtZW50KSB7XHJcbiAgICByZXR1cm4gTkFUSVZFX1RFWFRfRklFTERfRUxFTUVOVFMuaW5kZXhPZihlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSkgPiAtMTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEJhc2VDb21wb25lbnRcclxuICogVGhlIGJhc2UgY2xhc3MgZnJvbSB3aGljaCBhbGwgb3RoZXIgY29tcG9uZW50cyBpbmhlcml0IHNoYXJlZCBsb2dpY1xyXG4gKi9cclxuY2xhc3MgQmFzZUNvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSB0eXBlIG9mIHRoZSBjbGFzc1xyXG4gICAgICovXHJcbiAgICBnZXQgaW5zdGFuY2VUeXBlKCkge1xyXG4gICAgICAgIHJldHVybiAnQmFzZUNvbXBvbmVudCc7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIHRoZSB0ZW1wbGF0ZSBvZiBhIGNvbXBvbmVudCB3YXMgbG9hZGVkLlxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXHJcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gICAgKi9cclxuICAgIHNldHVwVGVtcGxhdGUoZGF0YSwgY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGBERUJVRzogY29tcG9uZW50ICR7dGhpcy50YWdOYW1lfSB3YXMgbm90IGluaXRpYWxpemVkIGJlY2F1c2UgaXQgd2FzIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBET00hYCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gZGF0YS50ZW1wbGF0ZTtcclxuICAgICAgICBjYWxsYmFjayhkYXRhLnRlbXBsYXRlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGUgaWYgYSB2YWx1ZSBjYW4gYmUgc2V0IG9uIHRoZSBzdGF0ZS5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5LlxyXG4gICAgICogQHBhcmFtIHthbnl9IHZhbHVlIC0gdGhlIHZhbHVlIHRoYXQgaGFzIHRvIGJlIGNoZWNrZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNTdGF0ZVByb3BWYWxpZChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHNjaGVtYVByb3BlcnR5ID0gdGhpcy5zdGF0ZVNjaGVtYVtuYW1lXTtcclxuXHJcbiAgICAgICAgaWYgKCFzY2hlbWFQcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBBIHByb3BlcnR5ICR7bmFtZX0gZG9lcyBub3QgZXhpc3Qgb24gdHlwZSAke3RoaXMudGFnTmFtZS50b0xvd2VyQ2FzZSgpfSFgKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcclxuICAgICAgICBpZiAoc2NoZW1hUHJvcGVydHkudHlwZS5pbmNsdWRlcygnYXJyYXknKSkge1xyXG4gICAgICAgICAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5KSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc2NoZW1hUHJvcGVydHkudHlwZS5pbmNsdWRlcyh0eXBlKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBQcm9wZXJ0eSAke25hbWV9IGNhbiBub3QgYmUgb2YgdHlwZSAtICR7dHlwZX0uIEFsbG93ZWQgdHlwZXMgYXJlOiAke3NjaGVtYVByb3BlcnR5LnR5cGUuam9pbignLCcpfWApO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgaXMgdGhlIGJhc2UgY2xhc3MgdGhhdCBob2xkcyBhbGwgZnVuY3Rpb25hbGl0eSBzaGFyZWQgYmV0d2VlbiBjdXN0b20gY29tcG9uZW50c1xyXG4gKiBhbmQgbmF0aXZlIGVsZW1lbnRzXHJcbiAqL1xyXG5jbGFzcyBWYWxpZGF0b3Ige1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIHR5cGUgb2YgdGhlIGNsYXNzXHJcbiAgICAgKi9cclxuICAgIGdldCBpbnN0YW5jZVR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuICdWYWxpZGF0b3InO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgZWxlbWVudCBpcyBjaGlsZCBvZiBhIGZvcm1cclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNGb3JtRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICB3aGlsZSAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC50YWdOYW1lID09PSAnR0FNRUZBQ0UtRk9STS1DT05UUk9MJyB8fCBlbGVtZW50LnRhZ05hbWUgPT09ICdnYW1lZmFjZS1mb3JtLWNvbnRyb2wnKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGVsZW1lbnQgdmFsdWUgaXMgYmlnZ2VyIHRoYW4gZWxlbWVudCBtYXhsZW5ndGhcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdG9vTG9uZygpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBlbGVtZW50IHZhbHVlIGlzIGxlc3MgdGhhbiBlbGVtZW50IG1pbmxlbmd0aFxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB0b29TaG9ydCgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgdGhlIHZhbHVlIG9mIGFuIGVsZW1lbnQgaXMgYmlnZ2VyIHRoYW4gaXRzIG1heCBhdHRyaWJ1dGVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgKi9cclxuICAgIHN0YXRpYyByYW5nZU92ZXJmbG93KCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBpZiB0aGUgdmFsdWUgb2YgYW4gZWxlbWVudCBpcyBzbWFsbGVyIHRoYW4gaXRzIG1pbiBhdHRyaWJ1dGVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgKi9cclxuICAgIHN0YXRpYyByYW5nZVVuZGVyZmxvdygpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBlbGVtZW50IGlzIHJlcXVpcmVkIGFuZCBpdHMgdmFsdWUgaXMgbWlzc2luZ1xyXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB2YWx1ZU1pc3NpbmcoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50Lmhhc0F0dHJpYnV0ZSgncmVxdWlyZWQnKSAmJiAhZWxlbWVudC52YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGVsZW1lbnQgbmFtZSBpcyBtaXNzaW5nXHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIG5hbWVNaXNzaW5nKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gIWVsZW1lbnQubmFtZSAmJiAhZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ25hbWUnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGFuIGVsZW1lbnQgaXMgcmVxdWlyZWRcclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgKi9cclxuICAgIHN0YXRpYyBpc1JlcXVpcmVkKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JlcXVpcmVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgdGhlcmUgaXMgYSBjdXN0b20gZXJyb3IgZm9yIHRoZSBlbGVtZW50XHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGN1c3RvbUVycm9yKCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBpZiBlbGVtZW50IGlzIGdvaW5nIHRvIGJlIHNlcmlhbGl6ZWQuXHJcbiAgICAgKiBJZiBhbiBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhIG5hbWUgaXQgd2lsbCBub3QgYmUgc2VyaWFsaXplZC5cclxuICAgICAqIFVzZWQgdG8gZGV0ZXJtaW5lIGlmIGFuIGVsZW1lbnQgc2hvdWxkIGJlIHZhbGlkYXRlZC5cclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgKi9cclxuICAgIHN0YXRpYyB3aWxsU2VyaWFsaXplKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lTWlzc2luZyhlbGVtZW50KSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWpzZG9jICovXHJcbiAgICBzdGF0aWMgaXNCYWRVUkwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpc0JhZEVtYWlsKCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qIGVzbGludC1lbmFibGUgcmVxdWlyZS1qc2RvYyAqL1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIE5hdGl2ZUVsZW1lbnRWYWxpZGF0b3IgdXNlcyB0aGUgbWV0aG9kcyBmcm9tIHRoZSBWYWxpZGF0b3IgY2xhc3NcclxuICogQWxsIG5hdGl2ZSBlbGVtZW50cyB0aGEgZG9uJ3Qgc3VwcG9ydCBtZXRob2RzIGxpa2UgaXNGb3JtRWxlbWVudCwgdG9vTG9uZywgdG9vU2hvcnRcclxuICogZXRjLi4gd2lsbCBiZSB3cmFwcGVkIGluIHRoaXMgY2xhc3MgaW4gb3JkZXIgdG8gZW5hYmxlIHVzIHRvIHZhbGlkYXRlIG5hdGl2ZSBhbmRcclxuICogY3VzdG9tIGVsZW1lbnRzIHVzaW5nIHRoZSBzYW1lIG1ldGhvZHMuXHJcbiAqICovXHJcbmNsYXNzIE5hdGl2ZUVsZW1lbnRWYWxpZGF0b3Ige1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVxdWlyZS1qc2RvYyAqL1xyXG4gICAgZ2V0IGluc3RhbmNlVHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gJ05hdGl2ZUVsZW1lbnRWYWxpZGF0b3InO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGlzRm9ybUVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci5pc0Zvcm1FbGVtZW50KHRoaXMuZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9vTG9uZygpIHtcclxuICAgICAgICBpZiAoaXNOYXRpdmVUZXh0RmllbGQodGhpcy5lbGVtZW50KSkgcmV0dXJuIFRleHRGaWVsZFZhbGlkYXRvci50b29Mb25nKHRoaXMuZWxlbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci50b29Mb25nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9vU2hvcnQoKSB7XHJcbiAgICAgICAgaWYgKGlzTmF0aXZlVGV4dEZpZWxkKHRoaXMuZWxlbWVudCkpIHJldHVybiBUZXh0RmllbGRWYWxpZGF0b3IudG9vU2hvcnQodGhpcy5lbGVtZW50KTtcclxuICAgICAgICByZXR1cm4gVmFsaWRhdG9yLnRvb1Nob3J0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmFuZ2VPdmVyZmxvdygpIHtcclxuICAgICAgICBpZiAoaXNOYXRpdmVUZXh0RmllbGQodGhpcy5lbGVtZW50KSkgcmV0dXJuIFRleHRGaWVsZFZhbGlkYXRvci5yYW5nZU92ZXJmbG93KHRoaXMuZWxlbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci5yYW5nZU92ZXJmbG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmFuZ2VVbmRlcmZsb3coKSB7XHJcbiAgICAgICAgaWYgKGlzTmF0aXZlVGV4dEZpZWxkKHRoaXMuZWxlbWVudCkpIHJldHVybiBUZXh0RmllbGRWYWxpZGF0b3IucmFuZ2VVbmRlcmZsb3codGhpcy5lbGVtZW50KTtcclxuICAgICAgICByZXR1cm4gVmFsaWRhdG9yLnJhbmdlVW5kZXJmbG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsdWVNaXNzaW5nKCkge1xyXG4gICAgICAgIHJldHVybiBWYWxpZGF0b3IudmFsdWVNaXNzaW5nKHRoaXMuZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmFtZU1pc3NpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci5uYW1lTWlzc2luZyh0aGlzLmVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGN1c3RvbUVycm9yKCkge1xyXG4gICAgICAgIHJldHVybiBWYWxpZGF0b3IuY3VzdG9tRXJyb3IoKTtcclxuICAgIH1cclxuXHJcbiAgICBpc1JlcXVpcmVkKCkge1xyXG4gICAgICAgIHJldHVybiBWYWxpZGF0b3IuaXNSZXF1aXJlZCh0aGlzLmVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHdpbGxTZXJpYWxpemUoKSB7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci53aWxsU2VyaWFsaXplKHRoaXMuZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNCYWRFbWFpbCgpIHtcclxuICAgICAgICBpZiAoaXNOYXRpdmVUZXh0RmllbGQodGhpcy5lbGVtZW50KSkgcmV0dXJuIFRleHRGaWVsZFZhbGlkYXRvci5pc0JhZEVtYWlsKHRoaXMuZWxlbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQmFkVVJMKCkge1xyXG4gICAgICAgIGlmIChpc05hdGl2ZVRleHRGaWVsZCh0aGlzLmVsZW1lbnQpKSByZXR1cm4gVGV4dEZpZWxkVmFsaWRhdG9yLmlzQmFkVVJMKHRoaXMuZWxlbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyogZXNsaW50LWVuYWJsZSByZXF1aXJlLWpzZG9jICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgQ3VzdG9tRWxlbWVudFZhbGlkYXRvciBpcyBpbmhlcml0ZWQgYnkgY3VzdG9tIGVsZW1lbnRzIGluIG9yZGVyIHRvIGdhaW4gdGhlXHJcbiAqIHZhbGlkYXRpb24gZnVuY3Rpb24gZnJvbSB0aGUgVmFsaWRhdG9yIGNsYXNzLlxyXG4gKiBUaGlzIGNsYXNzIGNhbiBub3QgYmUgdXNlZCB0byB3cmFwIHRoZSBuYXRpdmUgZWxlbWVudHMgYXMgaXQgaW5oZXJpdHMgdGhlXHJcbiAqIEhUTUxFbGVtZW50IHdoaWNoIGNhbiBub3QgYmUgaW5zdGFudGlhdGVkIHVzaW5nIHRoZSBuZXcga2V5d29yZC5cclxuKi9cclxuY2xhc3MgQ3VzdG9tRWxlbWVudFZhbGlkYXRvciBleHRlbmRzIEJhc2VDb21wb25lbnQge1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVxdWlyZS1qc2RvYyAqL1xyXG4gICAgZ2V0IGluc3RhbmNlVHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gJ0N1c3RvbUVsZW1lbnRWYWxpZGF0b3InO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRm9ybUVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci5pc0Zvcm1FbGVtZW50KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvb0xvbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci50b29Mb25nKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvb1Nob3J0KCkge1xyXG4gICAgICAgIHJldHVybiBWYWxpZGF0b3IudG9vU2hvcnQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsdWVNaXNzaW5nKCkge1xyXG4gICAgICAgIHJldHVybiBWYWxpZGF0b3IudmFsdWVNaXNzaW5nKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5hbWVNaXNzaW5nKCkge1xyXG4gICAgICAgIHJldHVybiBWYWxpZGF0b3IubmFtZU1pc3NpbmcodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY3VzdG9tRXJyb3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci5jdXN0b21FcnJvcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzUmVxdWlyZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci5pc1JlcXVpcmVkKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJhbmdlT3ZlcmZsb3coKSB7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci5yYW5nZU92ZXJmbG93KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJhbmdlVW5kZXJmbG93KCkge1xyXG4gICAgICAgIHJldHVybiBWYWxpZGF0b3IucmFuZ2VVbmRlcmZsb3codGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgd2lsbFNlcmlhbGl6ZSgpIHtcclxuICAgICAgICByZXR1cm4gVmFsaWRhdG9yLndpbGxTZXJpYWxpemUodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNCYWRFbWFpbCgpIHtcclxuICAgICAgICByZXR1cm4gVmFsaWRhdG9yLmlzQmFkRW1haWwodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNCYWRVUkwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvci5pc0JhZFVSTCh0aGlzKTtcclxuICAgIH1cclxuICAgIC8qIGVzbGludC1lbmFibGUgcmVxdWlyZS1qc2RvYyAqL1xyXG59XHJcblxyXG4vKipcclxuICogQ2xhc3MgdGhhdCBpbXBsZW1lbnRzIHRoZSBjb21tb25nIHZhbGlkYXRpb24gbWV0aG9kcyBmb3IgdGhlIHRleHQgZmllbGRzXHJcbiAqL1xyXG5jbGFzcyBUZXh0RmllbGRWYWxpZGF0b3Ige1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2MgKi9cclxuICAgIGdldCBpbnN0YW5jZVR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuICdUZXh0RmllbGRWYWxpZGF0b3InO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW9zdCBvZiB0aGUgY3VzdG9tIGVsZW1lbnRzIHdpbGwgbm90IG5lZWQgdGhpcyBjaGVjayBob3dldmVyLFxyXG4gICAgICogd2UgY2FsbCBhbGwgdmFsaWRhdGlvbiBtZXRob2RzIGluIG9yZGVyIHRvIGRldGVybWluZSBpZiBhbiBlbGVtZW50IGlzIHZhbGlkLlxyXG4gICAgICogRWFjaCBlbGVtZW50IHRoYXQgbmVlZHMgdGhpcyBjaGVjayBpbXBsZW1lbnRzIGl0IGl0c2VsZi5cclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdG9vTG9uZyhlbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgbWF4TGVuZ3RoID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ21heGxlbmd0aCcpO1xyXG4gICAgICAgIGlmICghbWF4TGVuZ3RoKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQudmFsdWUubGVuZ3RoID4gcGFyc2VGbG9hdChtYXhMZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBNb3N0IG9mIHRoZSBjdXN0b20gZWxlbWVudHMgd2lsbCBub3QgbmVlZCB0aGlzIGNoZWNrIGhvd2V2ZXIsXHJcbiAgICAqIHdlIGNhbGwgYWxsIHZhbGlkYXRpb24gbWV0aG9kcyBpbiBvcmRlciB0byBkZXRlcm1pbmUgaWYgYW4gZWxlbWVudCBpcyB2YWxpZC5cclxuICAgICogRWFjaCBlbGVtZW50IHRoYXQgbmVlZHMgdGhpcyBjaGVjayBpbXBsZW1lbnRzIGl0IGl0c2VsZi5cclxuICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxyXG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICovXHJcbiAgICBzdGF0aWMgdG9vU2hvcnQoZWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IG1pbkxlbmd0aCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtaW5sZW5ndGgnKTtcclxuICAgICAgICBpZiAoIW1pbkxlbmd0aCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlLmxlbmd0aCA8IHBhcnNlRmxvYXQobWluTGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogTW9zdCBvZiB0aGUgY3VzdG9tIGVsZW1lbnRzIHdpbGwgbm90IG5lZWQgdGhpcyBjaGVjayBob3dldmVyLFxyXG4gICAgKiB3ZSBjYWxsIGFsbCB2YWxpZGF0aW9uIG1ldGhvZHMgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIGlmIGFuIGVsZW1lbnQgaXMgdmFsaWQuXHJcbiAgICAqIEVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRoaXMgY2hlY2sgaW1wbGVtZW50cyBpdCBpdHNlbGYuXHJcbiAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAqL1xyXG4gICAgc3RhdGljIHJhbmdlT3ZlcmZsb3coZWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IG1heCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtYXgnKTtcclxuICAgICAgICBpZiAoIW1heCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGVsZW1lbnQudmFsdWUpID4gcGFyc2VGbG9hdChtYXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW9zdCBvZiB0aGUgY3VzdG9tIGVsZW1lbnRzIHdpbGwgbm90IG5lZWQgdGhpcyBjaGVjayBob3dldmVyLFxyXG4gICAgICogd2UgY2FsbCBhbGwgdmFsaWRhdGlvbiBtZXRob2RzIGluIG9yZGVyIHRvIGRldGVybWluZSBpZiBhbiBlbGVtZW50IGlzIHZhbGlkLlxyXG4gICAgICogRWFjaCBlbGVtZW50IHRoYXQgbmVlZHMgdGhpcyBjaGVjayBpbXBsZW1lbnRzIGl0IGl0c2VsZi5cclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcmFuZ2VVbmRlcmZsb3coZWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IG1pbiA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtaW4nKTtcclxuICAgICAgICBpZiAoIW1pbikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGVsZW1lbnQudmFsdWUpIDwgcGFyc2VGbG9hdChtaW4pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIHRoZSB0ZXh0IGZpZWxkIHdpdGggdHlwZSB1cmwgaGFzIGEgdmFsaWQgdXJsIGJ5IGl0cyBwYXR0ZXJuXHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGlzQmFkVVJMKGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSAhPT0gJ3VybCcpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBjb25zdCBwYXR0ZXJuID0gZWxlbWVudC5wYXR0ZXJuIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdwYXR0ZXJuJyk7XHJcbiAgICAgICAgaWYgKCFwYXR0ZXJuKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50LnZhbHVlLm1hdGNoKHBhdHRlcm4pKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgdGhlIHRleHQgZmllbGQgZWxlbWVudCB3aXRoIHR5cGUgZW1haWwgaXMgdmFsaWRcclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNCYWRFbWFpbChlbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykgIT09ICdlbWFpbCcpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoIWVsZW1lbnQudmFsdWUubWF0Y2goJ0AnKSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxpbmVzLXBlci1mdW5jdGlvbiwgcmVxdWlyZS1qc2RvY1xyXG5jb25zdCBDb21wb25lbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgR0ZfQ09NUE9ORU5UX1NMT1RfVEFHX05BTUUgPSAnY29tcG9uZW50LXNsb3QnO1xyXG4gICAgY29uc3QgS0VZQ09ERVMgPSB7XHJcbiAgICAgICAgRE9XTjogNDAsXHJcbiAgICAgICAgTEVGVDogMzcsXHJcbiAgICAgICAgUklHSFQ6IDM5LFxyXG4gICAgICAgIFVQOiAzOCxcclxuICAgICAgICBIT01FOiAzNixcclxuICAgICAgICBFTkQ6IDM1LFxyXG4gICAgICAgIEVOVEVSOiAxMyxcclxuICAgICAgICBFU0NBUEU6IDI3LFxyXG4gICAgICAgIFRBQjogOSxcclxuICAgICAgICBTSElGVDogMTYsXHJcbiAgICAgICAgQ1RSTDogMTcsXHJcbiAgICAgICAgU1BBQ0U6IDMyLFxyXG4gICAgICAgIFBBR0VfVVA6IDMzLFxyXG4gICAgICAgIFBBR0VfRE9XTjogMzQsXHJcbiAgICAgICAgTEVUVEVSX0E6IDY1LFxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENsYXNzIHRoYXQgZGVmaW5lcyB0aGUgR2FtZWZhY2UgY29tcG9uZW50c1xyXG4gICAgICovXHJcbiAgICBjbGFzcyBHYW1lZmFjZUNvbXBvbmVudHMge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZXF1aXJlLWpzZG9jXHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1wb3J0ZWQgPSB0aGlzLmltcG9ydGVkIHx8IFtdO1xyXG4gICAgICAgICAgICB0aGlzLktFWUNPREVTID0gS0VZQ09ERVM7XHJcbiAgICAgICAgICAgIHRoaXMuY2FjaGVkQ29tcG9uZW50cyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5DdXN0b21FbGVtZW50VmFsaWRhdG9yID0gQ3VzdG9tRWxlbWVudFZhbGlkYXRvcjtcclxuICAgICAgICAgICAgdGhpcy5OYXRpdmVFbGVtZW50VmFsaWRhdG9yID0gTmF0aXZlRWxlbWVudFZhbGlkYXRvcjtcclxuICAgICAgICAgICAgdGhpcy5UZXh0RmllbGRWYWxpZGF0b3IgPSBUZXh0RmllbGRWYWxpZGF0b3I7XHJcbiAgICAgICAgICAgIHRoaXMuVmFsaWRhdG9yID0gVmFsaWRhdG9yO1xyXG4gICAgICAgICAgICB0aGlzLkJhc2VDb21wb25lbnQgPSBCYXNlQ29tcG9uZW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlIGFuZCBhZGQgYSBzY3JpcHQgdGFnIHdpdGggZ2l2ZW4gdXJsLlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcclxuICAgICAgICAqL1xyXG4gICAgICAgIGltcG9ydFNjcmlwdCh1cmwpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ3NyYycsIHVybCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIExvYWRzIGFuIGh0bWwgYnkgZ2l2ZW4gdXJsLlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcclxuICAgICAgICAgKiBAcmV0dXJucyB7cHJvbWlzZX0gcmVzb2x2ZWQgd2l0aCB0aGUgaHRtbCBhcyB0ZXh0LlxyXG4gICAgICAgICovXHJcbiAgICAgICAgbG9hZEhUTUwodXJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRSZXNvdXJjZSh1cmwpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50ZW1wbGF0ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB3aGVuIGEgY3VzdG9tIGVsZW1lbnQgd2FzIGRlZmluZWQuXHJcbiAgICAgICAgICogU2F2ZXMgdGhlIHByb21pc2UgZm9yIGVhY2ggZGVmaW5lZCBjb21wb25lbnQuXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSB0aGUgbmFtZSBvZiB0aGUgY3VzdG9tIGVsZW1lbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7cHJvbWlzZX0gLSB0aGUgcHJldmlvdXNseSBzYXZlZCBwcm9taXNlIGl0IGFueSBvciBhIG5ldyBvbmVcclxuICAgICAgICAqL1xyXG4gICAgICAgIHdoZW5EZWZpbmVkKG5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHdpbmRvdy5HVUlDb21wb25lbnRzRGVmaW5lZEVsZW1lbnRzW25hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuR1VJQ29tcG9uZW50c0RlZmluZWRFbGVtZW50c1tuYW1lXS5wcm9taXNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkZWZpbmVkID0gd2luZG93LkdVSUNvbXBvbmVudHNEZWZpbmVkRWxlbWVudHNbbmFtZV0gPSB7fTtcclxuICAgICAgICAgICAgZGVmaW5lZC5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGVmaW5lZC5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgICAgIGRlZmluZWQucmVqZWN0ID0gcmVqZWN0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlZmluZWQucHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlZmluZXMgYSBjdXN0b20gZWxlbWVudC5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIHRoZSBuYW1lIG9mIHRoZSBlbGVtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0gdGhlIG9iamVjdCB3aGljaCBkZXNjcmliZXMgdGhlIGVsZW1lbnQuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50KG5hbWUsIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgLy8gZG9uJ3QgYXR0ZW1wdCB0byByZWdpc3RlciBjdXN0b20gZWxlbWVudCB0d2ljZVxyXG4gICAgICAgICAgICBpZiAod2luZG93LkdVSUNvbXBvbmVudHNEZWZpbmVkRWxlbWVudHNbbmFtZV0gfHwgY3VzdG9tRWxlbWVudHMuZ2V0KG5hbWUpKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMud2hlbkRlZmluZWQobmFtZSk7XHJcbiAgICAgICAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShuYW1lLCBlbGVtZW50KTtcclxuICAgICAgICAgICAgd2luZG93LkdVSUNvbXBvbmVudHNEZWZpbmVkRWxlbWVudHNbbmFtZV0ucmVzb2x2ZShlbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEltcG9ydHMgYSBjb21wb25lbnQgYnkgZ2l2ZW4gdXJsLlxyXG4gICAgICAgICAqIEl0IHdpbGwgYXV0b21hdGljYWxseSB0cnkgdG8gaW1wb3J0IHN0eWxlLmNzcyBhbmQgc2NyaXB0LmpzIGlmIHRoZXNlXHJcbiAgICAgICAgICogZmlsZXMnIG5hbWVzIHdlcmUgbm90IGV4cGxpY2l0bHkgc3BlY2lmaWVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSB0aGUgdXJsIG9mIHRoZSBjb21wb25lbnRcclxuICAgICAgICAqL1xyXG4gICAgICAgIGltcG9ydENvbXBvbmVudCh1cmwpIHtcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1wb3J0U2NyaXB0KHVybCArICcvc2NyaXB0LmpzJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlcyBiYWNrIGFuZCBmb3J3YXJkIHNsYXNoZXMgZnJvbSBzdHJpbmdcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlU2xhc2hlcyhwYXRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoLnJlcGxhY2UoL1svfFxcXFxdL2csICcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZSBuZXcgbGluZXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRlbXBsYXRlcyxcclxuICAgICAgICAgKiBiZWNhdXNlIHRlbXBsYXRlLmZpcnN0Q2hpbGQuY2xvbmVOb2RlIHdpbGwgY2xvbmUgYW4gZW1wdHlcclxuICAgICAgICAgKiBzdHJpbmcgYW5kIHdpbGwgcmV0dXJuIGFuIGVtcHR5IHRlbXBsYXRlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVOZXdMaW5lcyh0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZShuZXdMaW5lc1JlZ0V4cCwgJycpLnRyaW0oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZXMgdGhlIGNvcHlyaWdodCBub3RpY2UgZnJvbSB0aGUgdGVtcGxhdGVcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGVtcGxhdGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgdGVtcGxhdGUgd2l0aG91dCB0aGUgY29weXJpZ2h0IG5vdGljZVxyXG4gICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlQ29weXJpZ2h0Tm90aWNlKHRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKGA8IS0tQ29weXJpZ2h0IChjKSBDb2hlcmVudCBMYWJzIEFELiBBbGwgcmlnaHRzIHJlc2VydmVkLiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLiAtLT5gLCAnJykudHJpbSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVXNlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVuZGVyZWQuXHJcbiAgICAgICAgICogUmV0dXJuIHRoZSBhbHJlYWR5IHJlbmRlcmVkIHRlbXBsYXRlIGluc3RlYWQgb2ZcclxuICAgICAgICAgKiBsb2FkaW5nIGFuZCBzbG90dGluZyBpdHMgZWxlbWVudHMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb21wb25lbnQgLSB0aGUgY29tcG9uZW50IHRoYXQgd2FzIHJlbmRlcmVkXHJcbiAgICAgICAgICogQHJldHVybnMge1Byb21pc2U8SFRNTEVsZW1lbnQ+fSAtIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSB3aXRoIHRoZSByZW5kZXJlZCB0ZW1wbGF0ZVxyXG4gICAgICAgICovXHJcbiAgICAgICAgcmVzb2x2ZVdpdGhUZW1wbGF0ZShjb21wb25lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogY29tcG9uZW50LnRlbXBsYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHVybDogY29tcG9uZW50LnVybCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVzZXMgYW4gWE1MSHR0cFJlcXVlc3QgdG8gbG9hZCBhbiBleHRlcm5hbCBmaWxlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnQgLSB0aGUgdXJsIG9mIHRoZSBmaWxlLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSAtIGEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIHdpdGggdGhlIGZpbGUncyB0ZXh0IGNvbnRlbnQuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBsb2FkUmVzb3VyY2UoY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQudGVtcGxhdGUgJiYgdHlwZW9mIGNvbXBvbmVudC50ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQuaXNSZW5kZXJlZCkgcmV0dXJuIHRoaXMucmVzb2x2ZVdpdGhUZW1wbGF0ZShjb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLnJlbW92ZUNvcHlyaWdodE5vdGljZShjb21wb25lbnQudGVtcGxhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy5yZW1vdmVOZXdMaW5lcyh0ZW1wbGF0ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogY29tcG9uZW50LnVybCxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbXBvbmVudC50ZW1wbGF0ZSA9PT0gJ29iamVjdCcgJiYgY29tcG9uZW50LmlzUmVuZGVyZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVXaXRoVGVtcGxhdGUoY29tcG9uZW50KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHdpbmRvdy5fX29wdGltaXplKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHRoaXMucmVtb3ZlU2xhc2hlcyhjb21wb25lbnQudXJsKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIFhIUlxyXG4gICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm4gdGhpcy5yZXF1ZXN0UmVzb3VyY2UoY29tcG9uZW50LnVybCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IHRlbXBsYXRlOiBlbGVtZW50LmlubmVySFRNTCwgdXJsOiBjb21wb25lbnQudXJsIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3RSZXNvdXJjZShjb21wb25lbnQudXJsKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFeGVjdXRlIGFuIFhNTEh0dHBSZXF1ZXN0IHRvIGxvYWQgYSByZXNvdXJjZSBieSB1cmwuXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIHRoZSBwYXRoIHRvIHRoZSByZXNvdXJjZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSAtIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgd2l0aCB0aGUgbG9hZGVkIHJlc291cmNlXHJcbiAgICAgICAgKi9cclxuICAgICAgICByZXF1ZXN0UmVzb3VyY2UodXJsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25sb2FkID0gKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgdGVtcGxhdGU6IHJlcXVlc3QucmVzcG9uc2VUZXh0LCB1cmw6IHVybCB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSByZWplY3Q7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCk7XHJcbiAgICAgICAgICAgIHJlcXVlc3Quc2VuZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlY3Vyc2l2ZWx5IGZpbmRzIHRoZSBzbG90IGVsZW1lbnRzIGluIGEgZ2l2ZW4gZWxlbWVudC5cclxuICAgICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnQgLSB0aGUgZWxlbWVudCB3aGljaCBpcyBzZWFyY2hlZCBmb3Igc2xvdHMuXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudEVsTmFtZVxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZXN1bHQgLSBhIGtleTp2YWx1ZSBvYmplY3QgY29udGFpbmluZyB0aGUgc2xvdCBlbGVtZW50c1xyXG4gICAgICAgICAqIHVuZGVyIHRoZWlyIGRhdGEtbmFtZSBhcyB2YWx1ZTpcclxuICAgICAgICAgKiB7IDxteS1zbG90LW5hbWU+OiBIVE1MRWxlbWVudCB9XHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gcmVzdWx0XHJcbiAgICAgICAgKi9cclxuICAgICAgICBmaW5kU2xvdHMocGFyZW50LCBwYXJlbnRFbE5hbWUsIHJlc3VsdCA9IHt9KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gcGFyZW50LmNoaWxkcmVuO1xyXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRUYWdOYW1lID0gY2hpbGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZFRhZ05hbWUgPT09ICdjb21wb25lbnQtc2xvdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gY2hpbGQuZGF0YXNldC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0W25hbWVdKSByZXN1bHRbbmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0ucHVzaChjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5kU2xvdHMoY2hpbGQsIHBhcmVudEVsTmFtZSwgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGQuaGFzQXR0cmlidXRlKCdzbG90JykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzbG90ID0gY2hpbGQuZ2V0QXR0cmlidXRlKCdzbG90Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbc2xvdF0pIHJlc3VsdFtzbG90XSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtzbG90XS5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmRTbG90cyhjaGlsZCwgcGFyZW50RWxOYW1lLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzY3JvbGxhYmxlIGNvbnRhaW5lciBpcyB0aGUgT05MWSBjb21wb25lbnQgdGhhdCBjYW4gaG9sZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNsb3RzIG9mIGFub3RoZXIgZWxlbWVudHM7IHdlIGFsbG93IHRoaXMgaW4gb3JkZXIgYWNoaWV2ZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGJldHRlciBpbnRlZ3JhdGlvbiBvZiB0aGUgc2Nyb2xsYmFyIGluc2lkZSBvdGhlciBjb21wb25lbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIFdlYkNvbXBvbmVudHMgYW5kIHRoZSBzdGFuZGFyZCBzbG90IGVsZW1lbnRzIGRvbid0IHN1cHBvcnRcclxuICAgICAgICAgICAgICAgICAgICAvLyBzdWNoIGJlaGF2aW9yOyBhbiBlbGVtZW50IGhhbmRsZXMgb25seSBpdHMgb3duIHNsb3RzLiBUaGUgc2Nyb2xsYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnRhaW5lciBpcyBhbiBleGNlcHRpb24gZnJvbSB0aGlzIHJ1bGUuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkVGFnTmFtZSA9PT0gJ2dhbWVmYWNlLXNjcm9sbGFibGUtY29udGFpbmVyJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChjaGlsZFRhZ05hbWUgIT09IEdGX0NPTVBPTkVOVF9TTE9UX1RBR19OQU1FICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEVsTmFtZSAhPT0gY2hpbGRUYWdOYW1lICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICF3aW5kb3cuR1VJQ29tcG9uZW50c0RlZmluZWRFbGVtZW50c1tjaGlsZFRhZ05hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBjaGlsZCBpcyBhbm90aGVyIG5lc3RlZCBlbGVtZW50IGRvbid0IGxvb2sgZm9yIHNsb3RzIGluIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5kU2xvdHMoY2hpbGQsIHBhcmVudEVsTmFtZSwgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdpbGwgcmVwbGFjZSB0aGUgc2xvdCBlbGVtZW50XHJcbiAgICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudFtdfSBzb3VyY2VcclxuICAgICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXBsYWNlU2xvdHMoc291cmNlLCB0YXJnZXQpIHtcclxuICAgICAgICAgICAgY29uc3QgZmFrZVJvb3QgPSB0YXJnZXRbMF07XHJcbiAgICAgICAgICAgIGlmIChzb3VyY2UubGVuZ3RoICYmIGZha2VSb290LmNoaWxkTm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZmFrZVJvb3QuZmlyc3RDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZha2VSb290LnJlbW92ZUNoaWxkKGZha2VSb290Lmxhc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBzbG90IHNvIHRoYXQgaXQgY2FuIGJlIHJlcGxhY2VkXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGZha2VSb290LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChmYWtlUm9vdCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHNvdXJjZVtpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRyYW5zZmVycyB0aGUgc2xvdHRhYmxlIGVsZW1lbnRzIGludG8gdGhlaXIgc2xvdHMuXHJcbiAgICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gc291cmNlIC0gdGhlIGVsZW1lbnQgY29udGFpbmluZyB0aGUgc2xvdHRhYmxlIGVsZW1lbnRzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhcmdldCAtIHRoZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIHNsb3RzIGVsZW1lbnRzLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgdHJhbnNmZXJDb250ZW50KHNvdXJjZSwgdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHdoaWxlICh0YXJnZXQuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlcyA9IHRhcmdldC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUNoaWxkKG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZSAoc291cmNlLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSBzb3VyY2UuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1swXTtcclxuICAgICAgICAgICAgICAgIHNvdXJjZS5yZW1vdmVDaGlsZChub2RlKTtcclxuICAgICAgICAgICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVuZGVyZXMgYW4gZWxlbWVudCBvbmx5IGlmIGl0IHdhc24ndCByZW5kZXJlZCBiZWZvcmUgdGhhdFxyXG4gICAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSB0cnVlIGlmIGl0IHdhcyByZW5kZXJlZCwgZmFsc2UgaWYgbm90XHJcbiAgICAgICAgKi9cclxuICAgICAgICByZW5kZXJPbmNlKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuaXNSZW5kZXJlZCkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuaXNSZW5kZXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBSZW5kZXJzIGFuIGVsZW1lbnQncyBjb250ZW50IGludG8gaXRzIHRlbXBsYXRlLlxyXG4gICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIHRoZSBlbGVtZW50IGludG8gd2hpY2ggdG8gcmVuZGVyIHRoZSBjb250ZW50XHJcbiAgICAgICAgKi9cclxuICAgICAgICByZW5kZXIoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZVJvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdGVtcGxhdGVSb290LmlubmVySFRNTCA9IGVsZW1lbnQudGVtcGxhdGU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRFbE5hbWUgPSBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlU2xvdHMgPSB0aGlzLmZpbmRTbG90cyh0ZW1wbGF0ZVJvb3QsIHBhcmVudEVsTmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJTbG90cyA9IHRoaXMuZmluZFNsb3RzKGVsZW1lbnQsIHBhcmVudEVsTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2UgZm9yLi4ub2YgaW5zdGVhZCBvZiBmb3IuLi5pbiBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJTbG90c0tleXMgPSBPYmplY3Qua2V5cyh1c2VyU2xvdHMpO1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZVNsb3RzS2V5cyA9IE9iamVjdC5rZXlzKHRlbXBsYXRlU2xvdHMpO1xyXG5cclxuICAgICAgICAgICAgLy8gdGhlcmUncyBubyBwb2ludCBpbiBsb29waW5nIG92ZXIgdXNlclNsb3RzIGlmIHRoZXJlIGFyZW4ndFxyXG4gICAgICAgICAgICAvLyBjb3JyZXNwb25kaW5nIHRlbXBsYXRlIHNsb3RzXHJcbiAgICAgICAgICAgIGlmICh0ZW1wbGF0ZVNsb3RzS2V5cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdXNlclNsb3Qgb2YgdXNlclNsb3RzS2V5cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXNlclNsb3RzW3VzZXJTbG90XSB8fCAhdGVtcGxhdGVTbG90c1t1c2VyU2xvdF0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVNsb3RzKHVzZXJTbG90c1t1c2VyU2xvdF0sIHRlbXBsYXRlU2xvdHNbdXNlclNsb3RdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy50cmFuc2ZlckNvbnRlbnQodGVtcGxhdGVSb290LCBlbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVzZWQgdG8gcmVuZGVyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIHJlbmRlcmVkXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldENvbnRhaW5lclNlbGVjdG9yIC0gdGhlIHNlbGVjdG9yIG9mIHRoZSBwYXJlbnQgZWxlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXk8SFRNTEVsZW1lbnQ+fSBjaGlsZHJlbiAtIHRoZSBjaGlsZCBlbGVtZW50cyB0aGF0IG5lZWQgdG8gZ28gaW50byB0aGUgcGFyZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdHJhbnNmZXJDaGlsZHJlbihlbGVtZW50LCB0YXJnZXRDb250YWluZXJTZWxlY3RvciwgY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgY29uc3QgdGVtcGxhdGVSb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlUm9vdC5pbm5lckhUTUwgPSBlbGVtZW50LnRlbXBsYXRlO1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB0ZW1wbGF0ZVJvb3QucXVlcnlTZWxlY3Rvcih0YXJnZXRDb250YWluZXJTZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gY29udGFpbmVyLmFwcGVuZENoaWxkKGNoaWxkKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyYW5zZmVyQ29udGVudCh0ZW1wbGF0ZVJvb3QsIGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiBhIGNhbGxiYWNrIGZ1bmN0aW9uIGJ5IG4gYW1vdW50IG9mIGZyYW1lcy5cclxuICAgICAgICAgKiBVc2VkIHRvIHJldHJpZXZlIHRoZSBjb21wdXRlZCBzdHlsZXMgb2YgZWxlbWVudHMuXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIHRoZSBhbW91bnQgb2YgZnJhbWVzIHRoYXQgdGhlIGNhbGxiYWNrIGV4ZWN1dGlvblxyXG4gICAgICAgICAqIHNob3VsZCBiZSBkZWxheWVkIGJ5LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHthbnl9XHJcbiAgICAgICAgKi9cclxuICAgICAgICB3YWl0Rm9yRnJhbWVzKGNhbGxiYWNrID0gKCkgPT4geyB9LCBjb3VudCA9IDMpIHtcclxuICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSByZXR1cm4gY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgY291bnQtLTtcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMud2FpdEZvckZyYW1lcyhjYWxsYmFjaywgY291bnQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrcyBpZiB0aGUgY3VycmVudCB1c2VyIGFnZW50IGlzIENvaHRtbFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICovXHJcbiAgICAgICAgaXNCcm93c2VyR2FtZWZhY2UoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKCdDb2h0bWwnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29tcG9uZW50cyA9IG5ldyBHYW1lZmFjZUNvbXBvbmVudHMoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENsYXNzIHRoYXQgd2lsbCBoYW5kbGUgZ2FtZWZhY2UgY29tcG9uZW50cyBzbG90IGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgY2xhc3MgQ29tcG9uZW50U2xvdCBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWpzZG9jICovXHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vcmlnaW5hbEFwcGVuZENoaWxkID0gdGhpcy5hcHBlbmRDaGlsZDtcclxuICAgICAgICAgICAgdGhpcy5vcmlnaW5hbEluc2VydEJlZm9yZSA9IHRoaXMuaW5zZXJ0QmVmb3JlO1xyXG4gICAgICAgICAgICB0aGlzLm9yaWdpbmFsUmVwbGFjZUNoaWxkID0gdGhpcy5yZXBsYWNlQ2hpbGQ7XHJcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWxSZW1vdmVDaGlsZCA9IHRoaXMucmVtb3ZlQ2hpbGQ7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkID0gKG5vZGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5vcmlnaW5hbEFwcGVuZENoaWxkKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwdGFjaFNsb3RDaGFuZ2UoY2hpbGQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlID0gKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5vcmlnaW5hbEluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcHRhY2hTbG90Q2hhbmdlKGNoaWxkKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VDaGlsZCA9IChuZXdDaGlsZCwgb2xkQ2hpbGQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VkTm9kZSA9IHRoaXMub3JpZ2luYWxSZXBsYWNlQ2hpbGQobmV3Q2hpbGQsIG9sZENoaWxkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcHRhY2hTbG90Q2hhbmdlKHJlcGxhY2VkTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2VkTm9kZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQgPSAoY2hpbGQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZWROb2RlID0gdGhpcy5vcmlnaW5hbFJlbW92ZUNoaWxkKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcHRhY2hTbG90Q2hhbmdlKHJlbW92ZWROb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3ZlZE5vZGU7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkaXNwdGFjaFNsb3RDaGFuZ2UoY2hpbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnc2xvdGNoYW5nZScpLCB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBjaGlsZDogY2hpbGQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSByZXF1aXJlLWpzZG9jICovXHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50cy5kZWZpbmVDdXN0b21FbGVtZW50KEdGX0NPTVBPTkVOVF9TTE9UX1RBR19OQU1FLCBDb21wb25lbnRTbG90KTtcclxuXHJcbiAgICByZXR1cm4gY29tcG9uZW50cztcclxufTtcclxuXHJcbmV4cG9ydCB7IENvbXBvbmVudHMgfTtcclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgQ29oZXJlbnQgTGFicyBBRC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuY29uc3Qgb3JpZW50YXRpb25Vbml0c05hbWVzID0gbmV3IE1hcChbXHJcbiAgICBbJ3ZlcnRpY2FsJywge1xyXG4gICAgICAgIG1vdXNlQXhpc0Nvb3JkczogJ2NsaWVudFknLFxyXG4gICAgICAgIHNpemU6ICdoZWlnaHQnLFxyXG4gICAgICAgIHBvc2l0aW9uOiAndG9wJyxcclxuICAgICAgICBjb29yZGluYXRlOiAneScsXHJcbiAgICAgICAgb2Zmc2V0OiAnb2Zmc2V0SGVpZ2h0JyxcclxuICAgIH1dLFxyXG4gICAgWydob3Jpem9udGFsJywge1xyXG4gICAgICAgIG1vdXNlQXhpc0Nvb3JkczogJ2NsaWVudFgnLFxyXG4gICAgICAgIHNpemU6ICd3aWR0aCcsXHJcbiAgICAgICAgcG9zaXRpb246ICdsZWZ0JyxcclxuICAgICAgICBjb29yZGluYXRlOiAneCcsXHJcbiAgICAgICAgb2Zmc2V0OiAnb2Zmc2V0V2lkdGgnLFxyXG4gICAgfV0sXHJcbl0pO1xyXG5cclxuZXhwb3J0IHsgb3JpZW50YXRpb25Vbml0c05hbWVzIH07XHJcbiIsImV4cG9ydCBjb25zdCBPUklFTlRBVElPTlMgPSBbJ3ZlcnRpY2FsJywgJ2hvcml6b250YWwnXTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIHZhbHVlIHRvIHBlcmNlbnQgaW4gYSByYW5nZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gYmUgY29udmVydGVkXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gLSB0aGUgbWluaW11bSB2YWx1ZSBvZiB0aGUgcmFuZ2VcclxuICogQHBhcmFtIHtudW1iZXJ9IG1heCAtIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0aGUgcmFuZ2VcclxuICogQHJldHVybnMge251bWJlcn0gLSByZXR1cm5zIHRoZSB2YWx1ZSBpbiBwZXJjZW50XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb1BlcmNlbnQodmFsdWUsIG1pbiwgbWF4KSB7XHJcbiAgICByZXR1cm4gKCh2YWx1ZSAtIG1pbikgKiAxMDApIC8gKG1heCAtIG1pbik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXN0cmljdHMgYSBnaXZlbiB2YWx1ZSBpbiBhIHJhbmdlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSB0aGUgdmFsdWUgdG8gYmUgcmVzdHJpY3RlZFxyXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIC0gdGhlIG1pbmltdW0gdmFsdWUgb2YgdGhlIHJhbmdlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggLSB0aGUgbWF4aW11bSBudW1iZXIgb2YgdGhlIHJhbmdlXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAodmFsLCBtaW4sIG1heCkge1xyXG4gICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbCwgbWluKSwgbWF4KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiB0aGUgb3JpZW50YXRpb24gcGFzc2VkIGlzIHZlcnRpY2FsIG9yIGhvcml6b250YWwsIGlmIGl0J3MgbmVpdGhlciBpdCdzIHNldCB0byBob3Jpem9udGFsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcmllbnRhdGlvbiAtIHRoZSBvcmllbnRhdGlvbiBzdHJpbmdcclxuICogQHJldHVybnMge3N0cmluZ30gLSBob3Jpem9udGFsIG9yIHZlcnRpY2FsO1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrT3JpZW50YXRpb24ob3JpZW50YXRpb24pIHtcclxuICAgIGlmICghT1JJRU5UQVRJT05TLmluY2x1ZGVzKG9yaWVudGF0aW9uKSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgJyR7b3JpZW50YXRpb259JyBpcyBub3QgYSB2YWxpZCBvcmllbnRhdGlvbi4gSXQgc2hvdWxkIGJlIGVpdGhlciAnaG9yaXpvbnRhbCcgb3IgJ3ZlcnRpY2FsJy4gV2lsbCBmYWxsYmFjayB0byAnaG9yaXpvbnRhbCdgKTtcclxuICAgICAgICByZXR1cm4gJ2hvcml6b250YWwnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvcmllbnRhdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdpbGwgdmFsaWRhdGUgdGhlIGN1c3RvbSBoYW5kbGUgc2VsZWN0b3IgYW5kIGlmIGVsZW1lbnQgd2l0aCB0aGF0IHNlbGVjdG9yIGV4aXN0cy5cclxuICogQHBhcmFtIHtzdHJpbmd9IGN1c3RvbUhhbmRsZVNlbGVjdG9yXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGN1c3RvbUhhbmRsZUVsZW1lbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUN1c3RvbUhhbmRsZShjdXN0b21IYW5kbGVTZWxlY3RvciwgY3VzdG9tSGFuZGxlRWxlbWVudCkge1xyXG4gICAgaWYgKGN1c3RvbUhhbmRsZVNlbGVjdG9yICYmICFjdXN0b21IYW5kbGVFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBVbmFibGUgdG8gZmluZCBlbGVtZW50IHdpdGggc2VsZWN0b3IgLSBcIiR7Y3VzdG9tSGFuZGxlU2VsZWN0b3J9XCIgdGhhdCB3aWxsIGJlIHVzZWQgZm9yIGRpc3BsYXlpbmcgdGhlIHJhbmdlIHNsaWRlciB2YWx1ZS5gKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnRzIH0gZnJvbSAnY29oZXJlbnQtZ2FtZWZhY2UtY29tcG9uZW50cyc7XHJcbmNvbnN0IGNvbXBvbmVudHMgPSBuZXcgQ29tcG9uZW50cygpO1xyXG5pbXBvcnQgeyBvcmllbnRhdGlvblVuaXRzTmFtZXMgfSBmcm9tICcuLi9vcmllbnRhdGlvblVuaXRzTmFtZXMnO1xyXG5pbXBvcnQgeyB2YWxpZGF0ZUN1c3RvbUhhbmRsZSwgdmFsdWVUb1BlcmNlbnQgfSBmcm9tICcuL3JhbmdlU2xpZGVyVXRpbHMnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcclxuaW1wb3J0IFJhbmdlc2xpZGVyIGZyb20gJy4uL3NjcmlwdCc7XHJcblxyXG5jb25zdCBjdXN0b21IYW5kbGVWYXJpYWJsZU5hbWVzID0ge1xyXG4gICAgU0lOR0xFOiAnY3VzdG9tSGFuZGxlJyxcclxuICAgIExFRlQ6ICdjdXN0b21IYW5kbGVMZWZ0JyxcclxuICAgIFJJR0hUOiAnY3VzdG9tSGFuZGxlUmlnaHQnLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgaG9sZHMgY29tbW9uIG1ldGhvZHMgYW5kIGRhdGEgZm9yIGFsbCB0aGUgcmFuZ2VzbGlkZXJzIHdpdGggYSBzaW5nbGUgaGFuZGxlXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYW5nZVNsaWRlckJhc2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1Jhbmdlc2xpZGVyfSByYW5nZXNsaWRlciAtIFRoZSBnYW1lZmFjZS1yYW5nZXNsaWRlciBjdXN0b20gZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihyYW5nZXNsaWRlcikge1xyXG4gICAgICAgIGlmIChuZXcudGFyZ2V0ID09PSBSYW5nZVNsaWRlckJhc2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnN0cnVjdCBSYW5nZVNsaWRlckJhc2UgaW5zdGFuY2VzIGRpcmVjdGx5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXIgPSByYW5nZXNsaWRlcjtcclxuICAgICAgICB0aGlzLm9uTW91c2VVcCA9IHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5pbml0ID0gdGhpcy5pbml0LmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcclxuICAgIHNldCB0aHVtYih2YWx1ZSkge1xyXG4gICAgICAgIHZhbHVlID8gdGhpcy5yYW5nZXNsaWRlci5zZXRBdHRyaWJ1dGUoJ3RodW1iJywgJycpIDogdGhpcy5yYW5nZXNsaWRlci5yZW1vdmVBdHRyaWJ1dGUoJ3RodW1iJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcclxuICAgIGdldCB0aHVtYigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS50aHVtYjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZXMgdGhlIGdyaWQgb2YgdGhlIHNsaWRlclxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldCBncmlkKHZhbHVlKSB7XHJcbiAgICAgICAgdmFsdWUgPyB0aGlzLnJhbmdlc2xpZGVyLnNldEF0dHJpYnV0ZSgnZ3JpZCcsICcnKSA6IHRoaXMucmFuZ2VzbGlkZXIucmVtb3ZlQXR0cmlidXRlKCdncmlkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGlmIHRoZSBncmlkIGlzIGVuYWJsZWRcclxuICAgICAqL1xyXG4gICAgZ2V0IGdyaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZ3JpZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIG1pbmltdW0gdmFsdWUgb2YgdGhlIHNsaWRlclxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldCBtaW4odmFsdWUpIHtcclxuICAgICAgICB2YWx1ZSAhPT0gbnVsbCA/IHRoaXMucmFuZ2VzbGlkZXIuc2V0QXR0cmlidXRlKCdtaW4nLCB2YWx1ZSkgOiB0aGlzLnJhbmdlc2xpZGVyLnJlbW92ZUF0dHJpYnV0ZSgnbWluJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIHRoZSBzbGlkZXJcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdldCBtaW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUubWluO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgbWF4aW11bSB2YWx1ZSBvZiB0aGUgc2xpZGVyXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0IG1heCh2YWx1ZSkge1xyXG4gICAgICAgIHZhbHVlICE9PSBudWxsID8gdGhpcy5yYW5nZXNsaWRlci5zZXRBdHRyaWJ1dGUoJ21heCcsIHZhbHVlKSA6IHRoaXMucmFuZ2VzbGlkZXIucmVtb3ZlQXR0cmlidXRlKCdtYXgnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG1heGltdW0gdmFsdWUgb2YgdGhlIHNsaWRlclxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgZ2V0IG1heCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5tYXg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS52YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xyXG4gICAgc2V0IHZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5yYW5nZXNsaWRlci5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZXF1aXJlLWpzZG9jXHJcbiAgICBnZXQgdmFsdWVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnZhbHVlcztcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xyXG4gICAgc2V0IHZhbHVlcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhbHVlICE9PSBudWxsID8gdGhpcy5yYW5nZXNsaWRlci5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsIHZhbHVlKSA6IHRoaXMucmFuZ2VzbGlkZXIucmVtb3ZlQXR0cmlidXRlKCd2YWx1ZXMnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xyXG4gICAgZ2V0IHN0ZXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuc3RlcDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xyXG4gICAgc2V0IHN0ZXAodmFsdWUpIHtcclxuICAgICAgICB2YWx1ZSAhPT0gbnVsbCA/IHRoaXMucmFuZ2VzbGlkZXIuc2V0QXR0cmlidXRlKCdzdGVwJywgdmFsdWUpIDogdGhpcy5yYW5nZXNsaWRlci5yZW1vdmVBdHRyaWJ1dGUoJ3N0ZXAnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xyXG4gICAgZ2V0IGN1c3RvbUhhbmRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5jdXN0b21IYW5kbGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcclxuICAgIHNldCBjdXN0b21IYW5kbGUodmFsdWUpIHtcclxuICAgICAgICB2YWx1ZSAhPT0gbnVsbCA/IHRoaXMucmFuZ2VzbGlkZXIuc2V0QXR0cmlidXRlKCdjdXN0b20taGFuZGxlJywgdmFsdWUpIDogdGhpcy5yYW5nZXNsaWRlci5yZW1vdmVBdHRyaWJ1dGUoJ2N1c3RvbS1oYW5kbGUnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xyXG4gICAgZ2V0IGN1c3RvbUhhbmRsZUxlZnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuY3VzdG9tSGFuZGxlTGVmdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xyXG4gICAgc2V0IGN1c3RvbUhhbmRsZUxlZnQodmFsdWUpIHtcclxuICAgICAgICB2YWx1ZSAhPT0gbnVsbCA/IHRoaXMucmFuZ2VzbGlkZXIuc2V0QXR0cmlidXRlKCdjdXN0b20taGFuZGxlLWxlZnQnLCB2YWx1ZSkgOiB0aGlzLnJhbmdlc2xpZGVyLnJlbW92ZUF0dHJpYnV0ZSgnY3VzdG9tLWhhbmRsZS1sZWZ0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcclxuICAgIGdldCBjdXN0b21IYW5kbGVSaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5jdXN0b21IYW5kbGVSaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xyXG4gICAgc2V0IGN1c3RvbUhhbmRsZVJpZ2h0KHZhbHVlKSB7XHJcbiAgICAgICAgdmFsdWUgIT09IG51bGwgPyB0aGlzLnJhbmdlc2xpZGVyLnNldEF0dHJpYnV0ZSgnY3VzdG9tLWhhbmRsZS1yaWdodCcsIHZhbHVlKSA6IHRoaXMucmFuZ2VzbGlkZXIucmVtb3ZlQXR0cmlidXRlKCdjdXN0b20taGFuZGxlLXJpZ2h0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVyIHdoZW4gYXR0cmlidXRlIG9mIHJhbmdlc2xpZGVyIGlzIGNoYW5nZWRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge2FueX0gb2xkVmFsdWVcclxuICAgICAqIEBwYXJhbSB7YW55fSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBhdHRyaWJ1dGVDaGFuZ2VkKG5hbWUsIG9sZFZhbHVlLCB2YWx1ZSkge1xyXG4gICAgICAgIC8vIFdlIHdhbnQgdG8gdXBkYXRlIHRoZSByYW5nZXNsaWRlciBlYWNoIHRpbWUgdmFsdWUgYXR0cmlidXRlIGhhcyBjaGFuZ2VkXHJcbiAgICAgICAgLy8gZXZlbiB0aG91Z2ggdGhlIG9sZFZhbHVlIGFuZCB2YWx1ZSBhcmUgdGhlIHNhbWUuXHJcbiAgICAgICAgLy8gVGhlIGNhc2UgaXMgdGhhdCBJIGNhbiBjaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBzbGlkZXIgYnkgbW92aW5nIGl0IGFuZCB0aGVuIEkgd2FudCB0byBjaGFuZ2UgdGhlIHZhbHVlXHJcbiAgICAgICAgLy8gdmlhIGF0dHJpYnV0ZSBjaGFuZ2UgYW5kIGlmIGl0IGlzIHRoZSBzYW1lIGFzIHRoZSBvbGQgb25lIHRoZSBzbGlkZXIgVUkgd29uJ3QgdXBkYXRlLlxyXG4gICAgICAgIGlmIChvbGRWYWx1ZSA9PT0gdmFsdWUgJiYgbmFtZSAhPT0gJ3ZhbHVlJykgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQXR0cmlidXRlU3RhdGUobmFtZSwgb2xkVmFsdWUsIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgdXBkYXRlIHRoZSBzdGF0ZSBwcm9wZXJ0aWVzIGxpbmtlZCB3aXRoIHRoZSBjaGVja2JveCBhdHRyaWJ1dGVzXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8Ym9vbGVhbnxhcnJheX0gb2xkVmFsdWVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW58YXJyYXl9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUF0dHJpYnV0ZVN0YXRlKG5hbWUsIG9sZFZhbHVlLCB2YWx1ZSkge1xyXG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xyXG4gICAgICAgICAgICBjYXNlICd2YWx1ZXMnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZXNTdGF0ZShvbGRWYWx1ZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XHJcbiAgICAgICAgICAgIGNhc2UgJ21heCc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1pbk1heFN0YXRlKG5hbWUsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdzdGVwJzpcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RlcFN0YXRlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd2YWx1ZSc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlU3RhdGUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RodW1iJzpcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVGh1bWJTdGF0ZSh2YWx1ZSAhPT0gbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZ3JpZCc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUdyaWRTdGF0ZSh2YWx1ZSAhPT0gbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnY3VzdG9tLWhhbmRsZSc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2N1c3RvbS1oYW5kbGUtcmlnaHQnOlxyXG4gICAgICAgICAgICBjYXNlICdjdXN0b20taGFuZGxlLWxlZnQnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDdXN0b21IYW5kbGVTdGF0ZShuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIHVwZGF0ZSB0aGUgdGFyZ2V0IGVsZW1lbnRzIG9mIHRoZSBjdXN0b20gaGFuZGxlc1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICB1cGRhdGVDdXN0b21IYW5kbGVTdGF0ZShuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuaW5pdEN1c3RvbUhhbmRsZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgdXBkYXRlIHRoZSBzbGlkZXIgd2hlbiBtaW4gb3IgbWF4IGlzIGNoYW5nZWRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICAgICAqL1xyXG4gICAgdXBkYXRlTWluTWF4U3RhdGUobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBcXCd1cGRhdGVNaW5NYXhTdGF0ZSgpXFwnIG11c3QgYmUgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIHVwZGF0ZSBVSSBvZiB0aGUgcmFuZ2VzbGlkZXIgd2l0aCBpdHMgY3VycmVudCB2YWx1ZVxyXG4gICAgICogVXNlZnVsIHdoZW4gdGhlIHN0ZXAsIG1pbiwgbWF4IG9yIHRodW1iIGFyZSBjaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVNsaWRlclBvc2l0aW9uV2l0aEN1cnJlbnRWYWx1ZSgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBcXCd1cGRhdGVTbGlkZXJQb3NpdGlvbldpdGhDdXJyZW50VmFsdWUoKVxcJyBtdXN0IGJlIGltcGxlbWVudGVkLicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2lsbCB1cGRhdGUgVUkgb2YgdGhlIHJhbmdlc2xpZGVyIHdoZW4gaXRzIGB2YWx1ZXNgIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZFxyXG4gICAgICogQHBhcmFtIHthcnJheX0gb2xkVmFsdWVcclxuICAgICAqIEBwYXJhbSB7YXJyYXl9IG5ld1ZhbHVlXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVZhbHVlc1N0YXRlKG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIFxcJ3VwZGF0ZVZhbHVlc1N0YXRlKClcXCcgbXVzdCBiZSBpbXBsZW1lbnRlZC4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgdXBkYXRlIFVJIG9mIHRoZSByYW5nZXNsaWRlciB3aGVuIGl0cyBgdmFsdWVgIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICB1cGRhdGVWYWx1ZVN0YXRlKHZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2QgXFwndXBkYXRlVmFsdWVTdGF0ZSgpXFwnIG11c3QgYmUgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIHVwZGF0ZSB0aGUgc2xpZGVyIHdoZW4gc3RlcCBpcyBjaGFuZ2VkXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgdXBkYXRlU3RlcFN0YXRlKHZhbHVlKSB7XHJcbiAgICAgICAgbGV0IG51bWVyaWNWYWx1ZSA9IHZhbHVlICE9PSBudWxsID8gcGFyc2VGbG9hdCh2YWx1ZSkgOiAxO1xyXG4gICAgICAgIG51bWVyaWNWYWx1ZSA9ICFpc05hTihudW1lcmljVmFsdWUpID8gbnVtZXJpY1ZhbHVlIDogMTtcclxuICAgICAgICBpZiAoIXRoaXMucmFuZ2VzbGlkZXIuaXNTdGF0ZVByb3BWYWxpZCgnc3RlcCcsIG51bWVyaWNWYWx1ZSkpIHJldHVybjtcclxuICAgICAgICB0aGlzLnN0YXRlLnN0ZXAgPSBudW1lcmljVmFsdWU7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJQb3NpdGlvbldpdGhDdXJyZW50VmFsdWUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgdXBkYXRlR3JpZFN0YXRlKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJhbmdlc2xpZGVyLmlzU3RhdGVQcm9wVmFsaWQoJ2dyaWQnLCB2YWx1ZSkpIHJldHVybjtcclxuICAgICAgICB0aGlzLnRvZ2dsZUdyaWQodmFsdWUpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUuZ3JpZCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICB1cGRhdGVUaHVtYlN0YXRlKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJhbmdlc2xpZGVyLmlzU3RhdGVQcm9wVmFsaWQoJ3RodW1iJywgdmFsdWUpKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5zdGF0ZS50aHVtYiA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlVGh1bWIodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2lsbCB0b2dnbGUgdGh1bWJcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmlzaWJsZVxyXG4gICAgICovXHJcbiAgICB0b2dnbGVUaHVtYih2aXNpYmxlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGh1bWJFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRodW1iRWxlbWVudC5sZW5ndGggJiYgdHlwZW9mIHRoaXMudGh1bWJFbGVtZW50ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aHVtYkVsZW1lbnQuZm9yRWFjaChlbCA9PiB0aGlzLnJhbmdlc2xpZGVyRWwucmVtb3ZlQ2hpbGQoZWwpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VzbGlkZXJFbC5yZW1vdmVDaGlsZCh0aGlzLnRodW1iRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy50aHVtYkVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZpc2libGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRUaHVtYigpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uV2l0aEN1cnJlbnRWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgdG9nZ2xlIGdyaWRcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmlzaWJsZVxyXG4gICAgICovXHJcbiAgICB0b2dnbGVHcmlkKHZpc2libGUpIHtcclxuICAgICAgICBpZiAodGhpcy5ncmlkKSB0aGlzLnJhbmdlc2xpZGVyRWwucmVtb3ZlQ2hpbGQodGhpcy5yYW5nZXNsaWRlckVsLnF1ZXJ5U2VsZWN0b3IoYC5ndWljLSR7dGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbn0tcmFuZ2VzbGlkZXItZ3JpZGApKTtcclxuXHJcbiAgICAgICAgaWYgKHZpc2libGUpIHRoaXMuYnVpbGRHcmlkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIGxvYWQgdGhlIHRlbXBsYXRlIG9mIHRoZSByYWdlc2xpZGVyXHJcbiAgICAgKi9cclxuICAgIGxvYWRUZW1wbGF0ZSgpIHtcclxuICAgICAgICAvLyBjaGVjayBpZiBjb21wb25lbnQgaGFzIGFscmVhZHkgYmVlbiByZW5kZXJlZCBpZiBub3RcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMucmFuZ2VzbGlkZXIudGVtcGxhdGUgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIC8vIHVzZSB0aGUgdGVtcGxhdGUgZm9yIHRoZSBjdXJyZW50IHNsaWRlciBvcmllbnRhdGlvbiBhbmQgbnVtYmVyIG9mIGhhbmRsZXNcclxuICAgICAgICAgICAgdGhpcy5yYW5nZXNsaWRlci50ZW1wbGF0ZSA9IHRoaXMuZ2V0VGVtcGxhdGUodGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb21wb25lbnRzXHJcbiAgICAgICAgICAgIC5sb2FkUmVzb3VyY2UodGhpcy5yYW5nZXNsaWRlcilcclxuICAgICAgICAgICAgLnRoZW4odGhpcy5pbml0KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoSlNPTi5zdHJpbmdpZnkoZXJyKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSB0aGUgY3VzdG9tIGNvbXBvbmVudC5cclxuICAgICAqIFNldCB0ZW1wbGF0ZSwgYXR0YWNoIGV2ZW50IGxpc3RlbmVycywgc2V0dXAgaW5pdGlhbCBzdGF0ZSBldGMuXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YVxyXG4gICAgKi9cclxuICAgIGluaXQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXIuc2V0dXBUZW1wbGF0ZShkYXRhLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudHMucmVuZGVyT25jZSh0aGlzLnJhbmdlc2xpZGVyKTtcclxuICAgICAgICAgICAgLy8gZG8gdGhlIGluaXRpYWwgc2V0dXAgLSBhZGQgZXZlbnQgbGlzdGVuZXJzLCBhc3NpZ24gbWVtYmVyc1xyXG4gICAgICAgICAgICB0aGlzLnNldHVwKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIHNldHVwIHRoZSBzbGlkZXJcclxuICAgICAqL1xyXG4gICAgc2V0dXBTbGlkZXIoKSB7XHJcbiAgICAgICAgdGhpcy53cmFwcGVyID0gdGhpcy5yYW5nZXNsaWRlci5xdWVyeVNlbGVjdG9yKGAuZ3VpYy0ke3RoaXMucmFuZ2VzbGlkZXIub3JpZW50YXRpb259LXJhbmdlc2xpZGVyLXdyYXBwZXJgKTtcclxuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyRWwgPSB0aGlzLnJhbmdlc2xpZGVyLnF1ZXJ5U2VsZWN0b3IoYC5ndWljLSR7dGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbn0tcmFuZ2VzbGlkZXJgKTtcclxuICAgICAgICB0aGlzLmJhciA9IHRoaXMucmFuZ2VzbGlkZXIucXVlcnlTZWxlY3RvcihgLmd1aWMtJHt0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9ufS1yYW5nZXNsaWRlci1iYXJgKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRNaW5BbmRNYXgoKTtcclxuICAgICAgICB0aGlzLnNldEhhbmRsZVZhbHVlcygpO1xyXG5cclxuICAgICAgICAvLyBpZiB0aGUgZ3JpZCBhdHRyaWJ1dGUgaXMgYWRkZWQsIHRoZSBncmlkIGlzIGNyZWF0ZWRcclxuICAgICAgICBpZiAodGhpcy5ncmlkKSB0aGlzLmJ1aWxkR3JpZCgpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFRodW1iKCk7XHJcblxyXG4gICAgICAgIC8vIHNldHMgdGhlIGluaXRpYWwgcGVyY2VudCBvZiB0aGUgaGFuZGxlc1xyXG4gICAgICAgIHRoaXMudXBkYXRlU2xpZGVyUG9zaXRpb25XaXRoQ3VycmVudFZhbHVlKCk7XHJcbiAgICAgICAgdGhpcy5pbml0Q3VzdG9tSGFuZGxlcygpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ3VzdG9tSGFuZGxlcygpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoRXZlbnRMaXN0ZW5lcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBTZXQgdGhlIGluaXRpYWwgc2xpZGVyIHN0YXRlXHJcbiAgICAqL1xyXG4gICAgaW5pdFNsaWRlclN0YXRlKCkge1xyXG4gICAgICAgIC8vIHRoZSBzdGVwIG9mIHRoZSBzbGlkZXJcclxuICAgICAgICB0aGlzLnN0YXRlLnN0ZXAgPSBwYXJzZUZsb2F0KHRoaXMucmFuZ2VzbGlkZXIuZ2V0QXR0cmlidXRlKCdzdGVwJykpIHx8IDE7XHJcblxyXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGEgZ3JpZFxyXG4gICAgICAgIHRoaXMuc3RhdGUuZ3JpZCA9IHRoaXMucmFuZ2VzbGlkZXIuaGFzQXR0cmlidXRlKCdncmlkJyk7XHJcbiAgICAgICAgLy8gaWYgdGhlcmUgYXJlIHRodW1ic1xyXG4gICAgICAgIHRoaXMuc3RhdGUudGh1bWIgPSB0aGlzLnJhbmdlc2xpZGVyLmhhc0F0dHJpYnV0ZSgndGh1bWInKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG5hbWVzIG9mIHRoZSB1bml0cyBhcmUgZGlmZmVyZW50IGZvciB0aGUgdHdvIHNsaWRlciB0eXBlcy5cclxuICAgICAgICAgKiBbJ2NsaWVudFknLCAnaGVpZ2h0JywgJ3RvcCcsICd5J10gZm9yIHZlcnRpY2FsIGFuZFxyXG4gICAgICAgICAqIFsnY2xpZW50WCcsICd3aWR0aCcsICdsZWZ0JywgJ3gnXSBmb3IgaG9yaXpvbnRhbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudW5pdHMgPSBvcmllbnRhdGlvblVuaXRzTmFtZXMuZ2V0KHRoaXMucmFuZ2VzbGlkZXIub3JpZW50YXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHNsaWRlciBpbiBwZXJjZW50IGJhc2VkIG9uIHRoZSBtb3VzZSBjb29yZGluYXRlc1xyXG4gICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBQb3NpdGlvbiBpbiBwZXJjZW50XHJcbiAgICAgKi9cclxuICAgIGdldEhhbmRsZVBlcmNlbnQoZSkge1xyXG4gICAgICAgIC8vIHdlIGNhbGN1bGF0ZSB0aGUgb2Zmc2V0WCBvciBvZmZzZXRZIG9mIHRoZSBjbGljayBldmVudFxyXG4gICAgICAgIGNvbnN0IHJhbmdlc2xpZGVyUmVjdCA9IHRoaXMuZ2V0UmFuZ2VTbGlkZXJTaXplKCk7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHJhbmdlc2xpZGVyUmVjdFt0aGlzLnVuaXRzLnNpemVdO1xyXG4gICAgICAgIGNvbnN0IGNvb3JkaW5hdGUgPSByYW5nZXNsaWRlclJlY3RbdGhpcy51bml0cy5jb29yZGluYXRlXTtcclxuXHJcbiAgICAgICAgY29uc3QgbW91c2VDb29yZHMgPSBlW3RoaXMudW5pdHMubW91c2VBeGlzQ29vcmRzXTtcclxuXHJcbiAgICAgICAgbGV0IG9mZnNldCA9IG1vdXNlQ29vcmRzIC0gY29vcmRpbmF0ZTtcclxuICAgICAgICBpZiAodGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSBjb29yZGluYXRlICsgc2l6ZSAtIG1vdXNlQ29vcmRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlVG9QZXJjZW50KG9mZnNldCwgMCwgc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgZ3JpZCBwb2xcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIG9mIHRoZSBncmlkIHBvbFxyXG4gICAgICogQHJldHVybnMge0hUTUxEaXZFbGVtZW50fVxyXG4gICAgICovXHJcbiAgICBjcmVhdGVHcmlkUG9sKHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgcG9sQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgcG9sQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoYGd1aWMtcmFuZ2VzbGlkZXItJHt0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9ufS1ncmlkLXBvbC1jb250YWluZXJgKTtcclxuXHJcbiAgICAgICAgcG9sQ29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJndWljLXJhbmdlc2xpZGVyLSR7dGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbn0tZ3JpZC1wb2wgZ3VpYy1yYW5nZXNsaWRlci0ke3RoaXMucmFuZ2VzbGlkZXIub3JpZW50YXRpb259LXBvbC13aXRob3V0LXRleHRcIj48L2Rpdj5cclxuICAgICAgICAgICAgYDtcclxuXHJcbiAgICAgICAgLy8gY2hlY2tzIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgYSBzdHJpbmcgb3IgbnVtYmVyIGFuZCB0aGVuIG1ha2VzIGEgcG9sIHdpdGggdmFsdWVcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHBvbENvbnRhaW5lci5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImd1aWMtcmFuZ2VzbGlkZXItJHt0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9ufS1ncmlkLXBvbFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJndWljLXJhbmdlc2xpZGVyLSR7dGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbn0tZ3JpZC10ZXh0XCI+JHt2YWx1ZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcG9sQ29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2lsbCBhZGQgY3VzdG9tIGhhbmRsZSBzZWxlY3RvcnMgdG8gdGhlIHJhbmdlc2xpZGVyXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY3VzdG9tSGFuZGxlU2VsZWN0b3JzXHJcbiAgICAgKi9cclxuICAgIGFkZEN1c3RvbUhhbmRsZXMoY3VzdG9tSGFuZGxlU2VsZWN0b3JzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY3VzdG9tSGFuZGxlU2VsZWN0b3JzKSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXN0b21IYW5kbGVWYXJpYWJsZU5hbWUgPSBjdXN0b21IYW5kbGVWYXJpYWJsZU5hbWVzW2tleV07XHJcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbUhhbmRsZVNlbGVjdG9yID0gY3VzdG9tSGFuZGxlU2VsZWN0b3JzW2tleV07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0YXRlW2N1c3RvbUhhbmRsZVZhcmlhYmxlTmFtZV0gPSBjdXN0b21IYW5kbGVTZWxlY3RvciA/XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGN1c3RvbUhhbmRsZVNlbGVjdG9yKSA6XHJcbiAgICAgICAgICAgICAgICBudWxsO1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUN1c3RvbUhhbmRsZShjdXN0b21IYW5kbGVTZWxlY3RvciwgdGhpc1tjdXN0b21IYW5kbGVWYXJpYWJsZU5hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHRoZSB0aHVtYiBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IHN0cmluZ30gdmFsdWUgLSB0aGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgdGh1bWJcclxuICAgICAqL1xyXG4gICAgYnVpbGRUaHVtYih2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHRodW1iID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGh1bWIuY2xhc3NMaXN0LmFkZChgZ3VpYy0ke3RoaXMucmFuZ2VzbGlkZXIub3JpZW50YXRpb259LXJhbmdlc2xpZGVyLXRodW1iYCk7XHJcbiAgICAgICAgdGh1bWIudGV4dENvbnRlbnQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyRWwuYXBwZW5kQ2hpbGQodGh1bWIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgcmFuZ2VzbGlkZXIgZGltZW5zaW9uc1xyXG4gICAgICogQHJldHVybnMge0RPTVJlY3R9XHJcbiAgICAgKi9cclxuICAgIGdldFJhbmdlU2xpZGVyU2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgdmFsdWUgb2YgdGhlIGhhbmRsZSBiYXNlZCBvbiB0aGUgcG9zaXRpb24gb2YgdGhlIGhhbmRsZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBlcmNlbnQgLSB0aGUgcGVyY2VudCBwb3NpdGlvblxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gLSB0aGUgdmFsdWUgb2YgdGhlIGhhbmRsZVxyXG4gICAgICovXHJcbiAgICBjYWxjdWxhdGVIYW5kbGVWYWx1ZShwZXJjZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQocGFyc2VJbnQodGhpcy5taW4pICsgKHRoaXMubWF4IC0gdGhpcy5taW4pICogKHBlcmNlbnQgLyAxMDApKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaGVzIHRoZSBldmVudCBsaXN0ZW5lclxyXG4gICAgICovXHJcbiAgICBhdHRhY2hFdmVudExpc3RlbmVyKCkge1xyXG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXIucXVlcnlTZWxlY3RvcihgLmd1aWMtJHt0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9ufS1yYW5nZXNsaWRlci13cmFwcGVyYCkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZSBhdHRhY2ggaW4gb25Nb3VzZURvd25cclxuICAgICAqL1xyXG4gICAgb25Nb3VzZVVwKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50cyB9IGZyb20gJ2NvaGVyZW50LWdhbWVmYWNlLWNvbXBvbmVudHMnO1xyXG5jb25zdCBjb21wb25lbnRzID0gbmV3IENvbXBvbmVudHMoKTtcclxuaW1wb3J0IHZlcnRpY2FsVGVtcGxhdGUgZnJvbSAnLi4vLi4vdGVtcGxhdGVzL3ZlcnRpY2FsLmh0bWwnO1xyXG5pbXBvcnQgaG9yaXpvbnRhbFRlbXBsYXRlIGZyb20gJy4uLy4uL3RlbXBsYXRlcy9ob3Jpem9udGFsLmh0bWwnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcclxuaW1wb3J0IFJhbmdlc2xpZGVyIGZyb20gJy4uLy4uL3NjcmlwdCc7XHJcbmltcG9ydCBSYW5nZVNsaWRlckJhc2UgZnJvbSAnLi4vcmFuZ2VzbGlkZXJCYXNlJztcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGhvbGRzIGNvbW1vbiBtZXRob2RzIGFuZCBkYXRhIGZvciBhbGwgdGhlIHJhbmdlc2xpZGVycyB3aXRoIGEgc2luZ2xlIGhhbmRsZVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2luZ2xlSGFuZGxlUmFuZ2VTbGlkZXJCYXNlIGV4dGVuZHMgUmFuZ2VTbGlkZXJCYXNlIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtSYW5nZXNsaWRlcn0gcmFuZ2VzbGlkZXIgLSBUaGUgZ2FtZWZhY2UtcmFuZ2VzbGlkZXIgY3VzdG9tIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocmFuZ2VzbGlkZXIpIHtcclxuICAgICAgICBpZiAobmV3LnRhcmdldCA9PT0gU2luZ2xlSGFuZGxlUmFuZ2VTbGlkZXJCYXNlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgU2luZ2xlSGFuZGxlUmFuZ2VTbGlkZXJCYXNlIGluc3RhbmNlcyBkaXJlY3RseScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihyYW5nZXNsaWRlcik7XHJcbiAgICAgICAgdGhpcy5vbk1vdXNlRG93biA9IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm9uTW91c2VNb3ZlID0gdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgIG1heDogMTAwLFxyXG4gICAgICAgICAgICBncmlkOiBmYWxzZSxcclxuICAgICAgICAgICAgdGh1bWI6IGZhbHNlLFxyXG4gICAgICAgICAgICBzdGVwOiAxLFxyXG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBjdXN0b21IYW5kbGU6IG51bGwsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGUgZGVyaXZlZCBjbGFzcyBzaG91bGQgb3ZlcnJpZGUgdGhlIG5leHQgbWV0aG9kcyBiZWNhdXNlIHRoZXkgYmVoYXZlIGRpZmZlcmVudGx5IGZvciBiYXNpYyBhbmQgdmFsdWVzIHJhbmdlIHNsaWRlclxyXG4gICAgLy8gT1ZFUlJJREUgU1RBUlRcclxuICAgIC8qKlxyXG4gICAgICogV2lsbCBnZXQgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGN1cnJlbnQgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdldEN1cnJlbnRWYWx1ZVBlcmNlbnQoKSB7IHJldHVybiAwOyB9XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9ucyBvZiB0aGUgaGFuZGxlcyBhbmQgdGhlIHdpZHRoIG9mIHRoZSBiYXJcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwZXJjZW50XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVNsaWRlclBvc2l0aW9uKHBlcmNlbnQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBcXCd1cGRhdGVTbGlkZXJQb3NpdGlvbigpXFwnIG11c3QgYmUgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICB9XHJcbiAgICAvLyBPVkVSUklERSBFTkRcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBpZiB0aGUgcmFuZ2Ugc2xpZGVyIGhhcyB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHZhbHVlTWlzc2luZygpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmFsdWUpIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGNvcnJlY3QgdGVtcGxhdGUgdG8gYmUgbG9hZGVkIGZvciB0aGUgcmFuZ2VzbGlkZXJcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcmllbnRhdGlvbiAtIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgc2xpZGVyXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRUZW1wbGF0ZShvcmllbnRhdGlvbikge1xyXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykgcmV0dXJuIHZlcnRpY2FsVGVtcGxhdGU7XHJcblxyXG4gICAgICAgIHJldHVybiBob3Jpem9udGFsVGVtcGxhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHVwIHRoZSByYW5nZXNsaWRlciwgZHJhd3MgdGhlIGFkZGl0aW9uYWwgdGhpbmdzIGxpa2UgZ3JpZCBhbmQgdGh1bWJzLCBhdHRhY2hlcyB0aGUgZXZlbnQgbGlzdGVuZXJzXHJcbiAgICAgKi9cclxuICAgIHNldHVwKCkge1xyXG4gICAgICAgIGNvbXBvbmVudHMud2FpdEZvckZyYW1lcygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlID0gdGhpcy5yYW5nZXNsaWRlci5xdWVyeVNlbGVjdG9yKGAuZ3VpYy0ke3RoaXMucmFuZ2VzbGlkZXIub3JpZW50YXRpb259LXJhbmdlc2xpZGVyLWhhbmRsZWApO1xyXG4gICAgICAgICAgICB0aGlzLnNldHVwU2xpZGVyKCk7XHJcbiAgICAgICAgfSwgMyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIHNldCB0aGUgdGh1bWIgaWYgdGhpcyBvcHRpb24gaXMgZW5hYmxlZFxyXG4gICAgICovXHJcbiAgICBzZXRUaHVtYigpIHtcclxuICAgICAgICAvLyBpZiB0aGUgdGh1bWIgYXR0cmlidXRlIGlzIGFkZGVkLCB0aGUgdGh1bWJzIGFyZSBjcmVhdGVkXHJcbiAgICAgICAgaWYgKHRoaXMudGh1bWIpIHtcclxuICAgICAgICAgICAgdGhpcy5idWlsZFRodW1iKHRoaXMudmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50aHVtYkVsZW1lbnQgPSB0aGlzLnJhbmdlc2xpZGVyLnF1ZXJ5U2VsZWN0b3IoYC5ndWljLSR7dGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbn0tcmFuZ2VzbGlkZXItdGh1bWJgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFdpbGwgaW5pdGlhbGl6ZSB0aGUgY3VzdG9tIGhhbmRsZXMgdmFyaWFibGVzXHJcbiAgICAqL1xyXG4gICAgaW5pdEN1c3RvbUhhbmRsZXMoKSB7XHJcbiAgICAgICAgY29uc3QgY3VzdG9tSGFuZGxlU2VsZWN0b3JzID0ge1xyXG4gICAgICAgICAgICBTSU5HTEU6IHRoaXMucmFuZ2VzbGlkZXIuZ2V0QXR0cmlidXRlKCdjdXN0b20taGFuZGxlJyksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDdXN0b21IYW5kbGVzKGN1c3RvbUhhbmRsZVNlbGVjdG9ycyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIHVwZGF0ZSB0aGUgaGFuZGxlcyB2YWx1ZXMgZGVwZW5kaW5nIG9mIGlmIHRoZXkgYXJlIHR3byBvciBhIHNpbmdsZSBvbmVcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICB1cGRhdGVDdXN0b21IYW5kbGVzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmN1c3RvbUhhbmRsZSAmJiB0aGlzLnZhbHVlICE9PSB1bmRlZmluZWQpIHRoaXMuY3VzdG9tSGFuZGxlLnRleHRDb250ZW50ID0gdGhpcy52YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgc2V0IHRoZSBiYXIgc3R5bGVzXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGVyY2VudFxyXG4gICAgICovXHJcbiAgICBzZXRCYXJTdHlsZXMocGVyY2VudCkge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlLnN0eWxlW3RoaXMudW5pdHMucG9zaXRpb25dID0gYCR7dGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/IDEwMCAtIHBlcmNlbnQgOiBwZXJjZW50fSVgO1xyXG5cclxuICAgICAgICB0aGlzLmJhci5zdHlsZVt0aGlzLnVuaXRzLnNpemVdID0gYCR7cGVyY2VudH0lYDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgY2hhbmdlIHRoZSB0aHVtYiBwb3NpdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBlcmNlbnRcclxuICAgICAqL1xyXG4gICAgc2V0VGh1bWJQb3NpdGlvbihwZXJjZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGh1bWIpIHtcclxuICAgICAgICAgICAgdGhpcy50aHVtYkVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy50aHVtYkVsZW1lbnQuc3R5bGVbdGhpcy51bml0cy5wb3NpdGlvbl0gPSBgJHt0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnID8gMTAwIC0gcGVyY2VudCA6IHBlcmNlbnR9JWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZWQgb24gbW91c2Vkb3duLiBTZXRzIHRoZSBoYW5kbGUgdG8gdGhlIGNsaWNrZWQgY29vcmRpbmF0ZXMgYW5kIGF0dGFjaGVzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgZG9jdW1lbnRcclxuICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZVxyXG4gICAgICovXHJcbiAgICBvbk1vdXNlRG93bihlKSB7XHJcbiAgICAgICAgY29uc3QgcGVyY2VudCA9IHRoaXMuZ2V0SGFuZGxlUGVyY2VudChlKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKHBlcmNlbnQpO1xyXG5cclxuICAgICAgICAvLyBhdHRhY2hpbmcgZXZlbnQgbGlzdGVuZXJzIG9uIG1vdXNlZG93biBzbyB3ZSBkb24ndCBoYXZlIHRoZW0gYXR0YWNoZWQgYWxsIHRoZSB0aW1lXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1vdmluZyB0aGUgaGFuZGxlIHdpdGggdGhlIG1vdXNlXHJcbiAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGVcclxuICAgICAqL1xyXG4gICAgb25Nb3VzZU1vdmUoZSkge1xyXG4gICAgICAgIGNvbnN0IHBlcmNlbnQgPSB0aGlzLmdldEhhbmRsZVBlcmNlbnQoZSk7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlU2xpZGVyUG9zaXRpb24ocGVyY2VudCk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiIDxkaXYgY2xhc3M9XFxcImd1aWMtdmVydGljYWwtcmFuZ2VzbGlkZXItd3JhcHBlclxcXCI+IDxkaXYgY2xhc3M9XFxcImd1aWMtdmVydGljYWwtcmFuZ2VzbGlkZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJndWljLXZlcnRpY2FsLXJhbmdlc2xpZGVyLWJhclxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcImd1aWMtdmVydGljYWwtcmFuZ2VzbGlkZXItaGFuZGxlXFxcIj48L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiIDxkaXYgY2xhc3M9XFxcImd1aWMtaG9yaXpvbnRhbC1yYW5nZXNsaWRlci13cmFwcGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiZ3VpYy1ob3Jpem9udGFsLXJhbmdlc2xpZGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiZ3VpYy1ob3Jpem9udGFsLXJhbmdlc2xpZGVyLWJhclxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcImd1aWMtaG9yaXpvbnRhbC1yYW5nZXNsaWRlci1oYW5kbGVcXFwiPjwvZGl2PiA8L2Rpdj4gPC9kaXY+IFwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCJpbXBvcnQgU2luZ2xlSGFuZGxlUmFuZ2VTbGlkZXJCYXNlIGZyb20gJy4vc2luZ2xlSGFuZGxlUmFuZ2VTbGlkZXJCYXNlJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXHJcbmltcG9ydCBSYW5nZXNsaWRlciBmcm9tICcuLi8uLi9zY3JpcHQnO1xyXG5pbXBvcnQgeyBjbGFtcCwgdmFsdWVUb1BlcmNlbnQgfSBmcm9tICcuLi9yYW5nZVNsaWRlclV0aWxzJztcclxuY29uc3QgU1BBQ0VfQkVUV0VFTl9HUklEX1BPTFMgPSAxMDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIHRoZSBiYXNpYyByYW5nZXNsaWRlciB3aGljaCBoYXMgc2luZ2xlIHRodW1iIGFuZCB3b3JrcyB3aXRoIG51bWVyaWMgdmFsdWVzLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzaWNSYW5nZVNsaWRlciBleHRlbmRzIFNpbmdsZUhhbmRsZVJhbmdlU2xpZGVyQmFzZSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7UmFuZ2VzbGlkZXJ9IHJhbmdlc2xpZGVyIC0gVGhlIGdhbWVmYWNlLXJhbmdlc2xpZGVyIGN1c3RvbSBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJhbmdlc2xpZGVyKSB7XHJcbiAgICAgICAgc3VwZXIocmFuZ2VzbGlkZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgdGhpcy5pbml0U2xpZGVyU3RhdGUoKTtcclxuICAgICAgICB0aGlzLmxvYWRUZW1wbGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gICAgdXBkYXRlVmFsdWVTdGF0ZSh2YWx1ZSkge1xyXG4gICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkgfHwgKHRoaXMubWluID4gdmFsdWUgJiYgdGhpcy5tYXggPCB2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRlLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJQb3NpdGlvbldpdGhDdXJyZW50VmFsdWUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cclxuICAgIGdldEN1cnJlbnRWYWx1ZVBlcmNlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlVG9QZXJjZW50KHRoaXMudmFsdWUsIHRoaXMubWluLCB0aGlzLm1heCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXHJcbiAgICB1cGRhdGVNaW5NYXhTdGF0ZShuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuc2V0TWluQW5kTWF4KCk7XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gbmFtZSA9PT0gJ21pbicgPyB0aGlzLm1pbiA6IHRoaXMubWF4O1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm1pbiA8PSB0aGlzLnZhbHVlICYmIHRoaXMubWF4ID49IHRoaXMudmFsdWUgPyB0aGlzLnZhbHVlIDogZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlR3JpZCh0aGlzLmdyaWQpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlU2xpZGVyUG9zaXRpb25XaXRoQ3VycmVudFZhbHVlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXHJcbiAgICBzZXRNaW5BbmRNYXgoKSB7XHJcbiAgICAgICAgY29uc3QgbWluID0gcGFyc2VGbG9hdCh0aGlzLnJhbmdlc2xpZGVyLmdldEF0dHJpYnV0ZSgnbWluJykpO1xyXG4gICAgICAgIGNvbnN0IG1heCA9IHBhcnNlRmxvYXQodGhpcy5yYW5nZXNsaWRlci5nZXRBdHRyaWJ1dGUoJ21heCcpKTtcclxuICAgICAgICB0aGlzLnN0YXRlLm1pbiA9ICFpc05hTihtaW4pID8gbWluIDogMDtcclxuICAgICAgICB0aGlzLnN0YXRlLm1heCA9ICFpc05hTihtaW4pID8gbWF4IDogMTAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gICAgc2V0SGFuZGxlVmFsdWVzKCkge1xyXG4gICAgICAgIGxldCB2YWx1ZUF0dHIgPSB0aGlzLnJhbmdlc2xpZGVyLmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcclxuXHJcbiAgICAgICAgdmFsdWVBdHRyID0gcGFyc2VGbG9hdCh2YWx1ZUF0dHIpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUudmFsdWUgPSAhaXNOYU4odmFsdWVBdHRyKSA/IHZhbHVlQXR0ciA6IHRoaXMubWluO1xyXG5cclxuICAgICAgICAvLyBjaGVja3MgaWYgdGhlIHZhbHVlIHByb3ZpZGVkIGlzIGxlc3MgdGhhbiB0aGUgbWluIG9yIG1vcmUgdGhhbiB0aGUgbWF4IGFuZCBzZXRzIGl0IHRvIHRoZSBtaW5pbXVtIHZhbHVlXHJcbiAgICAgICAgdGhpcy5zdGF0ZS52YWx1ZSA9IHRoaXMubWluIDw9IHRoaXMudmFsdWUgJiYgdGhpcy5tYXggPj0gdGhpcy52YWx1ZSA/IHRoaXMudmFsdWUgOiB0aGlzLm1pbjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cclxuICAgIGJ1aWxkR3JpZCgpIHtcclxuICAgICAgICAvLyBjYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgcG9scyB0aGUgZ3JpZCB3aWxsIGhhdmUgYmFzZWQgb24gdGhlIHNpemUgb2YgdGhlIHNsaWRlclxyXG4gICAgICAgIGNvbnN0IG51bWJlck9mUG9scyA9IE1hdGgucm91bmQodGhpcy53cmFwcGVyW3RoaXMudW5pdHMub2Zmc2V0XSAvIFNQQUNFX0JFVFdFRU5fR1JJRF9QT0xTIC8gNCkgKiA0OyAvLyBoZXJlIHdlIHJvdW5kIHRvIGEgbnVtYmVyIHRoYXQgaXMgZGl2aXNpYmxlIGJ5IDQgYW5kIHRvIG1ha2Ugc3VyZSwgdGhlIGxhc3QgcG9sIGhhcyBhIG51bWJlclxyXG4gICAgICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBncmlkLmNsYXNzTGlzdC5hZGQoYGd1aWMtJHt0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9ufS1yYW5nZXNsaWRlci1ncmlkYCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbnVtYmVyT2ZQb2xzOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gZWFjaCBmb3J0aCBwb2xsIHdpbGwgYmUgbGFyZ2VyIHdpdGggYSB2YWx1ZSBhZGRlZFxyXG4gICAgICAgICAgICBpZiAoaSAlIChudW1iZXJPZlBvbHMgLyA0KSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZ3JpZC5hcHBlbmRDaGlsZChcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUdyaWRQb2woXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoKHBhcnNlSW50KHRoaXMubWluKSArICh0aGlzLm1heCAtIHRoaXMubWluKSAqIChpIC8gbnVtYmVyT2ZQb2xzKSkudG9GaXhlZCgyKSlcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3JpZC5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUdyaWRQb2woKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyRWwuYXBwZW5kQ2hpbGQoZ3JpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXHJcbiAgICB1cGRhdGVTbGlkZXJQb3NpdGlvbldpdGhDdXJyZW50VmFsdWUoKSB7XHJcbiAgICAgICAgY29uc3QgcGVyY2VudCA9IHRoaXMuZ2V0Q3VycmVudFZhbHVlUGVyY2VudCgpO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKHBlcmNlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gICAgdXBkYXRlU2xpZGVyUG9zaXRpb24ocGVyY2VudCkge1xyXG4gICAgICAgIC8vIFRoZSBwZXJjZW50IG9mIHRoZSBzdGVwIHRoYXQgaXMgc2V0XHJcbiAgICAgICAgY29uc3QgcGVyY2VudFN0ZXAgPSB2YWx1ZVRvUGVyY2VudCh0aGlzLnN0ZXAgKyB0aGlzLm1pbiwgdGhpcy5taW4sIHRoaXMubWF4KTtcclxuXHJcbiAgICAgICAgLy8gdGhlIHJhbmdlIHdoaWNoIHNob3VsZCBiZSBjbGFtcGVkXHJcbiAgICAgICAgY29uc3QgY2xhbXBSYW5nZSA9IFswLCAxMDBdO1xyXG5cclxuICAgICAgICAvLyB0aGUgcHJvdmlkZWQgcGVyY2VudCBpcyBjbGFtcGVkXHJcbiAgICAgICAgcGVyY2VudCA9IGNsYW1wKE1hdGgucm91bmQocGVyY2VudCAvIHBlcmNlbnRTdGVwKSAqIHBlcmNlbnRTdGVwLCAuLi5jbGFtcFJhbmdlKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBwYXJzZUZsb2F0KHRoaXMuY2FsY3VsYXRlSGFuZGxlVmFsdWUocGVyY2VudCkudG9GaXhlZCgyKSk7XHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB0aGlzLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRCYXJTdHlsZXMocGVyY2VudCk7XHJcbiAgICAgICAgdGhpcy5zZXRUaHVtYlBvc2l0aW9uKHBlcmNlbnQpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ3VzdG9tSGFuZGxlcygpO1xyXG4gICAgICAgIC8vIGRpc3BhdGNoaW5nIGEgY3VzdG9tIGV2ZW50IHdpdGggdGhlIHJhbmdlc2xpZGVyIHZhbHVlc1xyXG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXIuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3NsaWRlcnVwZGF0ZScsIHsgZGV0YWlsOiB0aGlzLnZhbHVlIH0pKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgU2luZ2xlSGFuZGxlUmFuZ2VTbGlkZXJCYXNlIGZyb20gJy4vc2luZ2xlSGFuZGxlUmFuZ2VTbGlkZXJCYXNlJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXHJcbmltcG9ydCBSYW5nZXNsaWRlciBmcm9tICcuLi8uLi9zY3JpcHQnO1xyXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uL3JhbmdlU2xpZGVyVXRpbHMnO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgaXMgdGhlIHJhbmdlc2xpZGVyIHdpdGggdmFsdWVzIGFycmF5IHdoaWNoIGhhcyBzaW5nbGUgdGh1bWIgYW5kIHdvcmtzIHdpdGggc3RyaW5nIHZhbHVlcy5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbHVlc1JhbmdlU2xpZGVyIGV4dGVuZHMgU2luZ2xlSGFuZGxlUmFuZ2VTbGlkZXJCYXNlIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtSYW5nZXNsaWRlcn0gcmFuZ2VzbGlkZXIgLSBUaGUgZ2FtZWZhY2UtcmFuZ2VzbGlkZXIgY3VzdG9tIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocmFuZ2VzbGlkZXIpIHtcclxuICAgICAgICBzdXBlcihyYW5nZXNsaWRlcik7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS52YWx1ZXMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cclxuICAgIHVwZGF0ZVZhbHVlc1N0YXRlKG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUudmFsdWVzID0gbmV3VmFsdWU7XHJcbiAgICAgICAgdGhpcy50b2dnbGVHcmlkKHRoaXMuZ3JpZCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJQb3NpdGlvbldpdGhDdXJyZW50VmFsdWUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cclxuICAgIHVwZGF0ZVZhbHVlU3RhdGUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLnN0YXRlLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJQb3NpdGlvbldpdGhDdXJyZW50VmFsdWUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cclxuICAgIHVwZGF0ZVNsaWRlclBvc2l0aW9uV2l0aEN1cnJlbnRWYWx1ZSgpIHtcclxuICAgICAgICBjb25zdCBwZXJjZW50ID0gdGhpcy5nZXRDdXJyZW50VmFsdWVQZXJjZW50KCk7XHJcbiAgICAgICAgaWYgKHBlcmNlbnQgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlc1swXTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKHBlcmNlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWVzQXJyYXkgPSBKU09OLnBhcnNlKHRoaXMucmFuZ2VzbGlkZXIuZ2V0QXR0cmlidXRlKCd2YWx1ZXMnKSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUudmFsdWVzID0gQXJyYXkuaXNBcnJheSh2YWx1ZXNBcnJheSkgPyB2YWx1ZXNBcnJheSA6IFtdO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUudmFsdWVzLmxlbmd0aCkgY29uc29sZS53YXJuKCdZb3UgbmVlZCB0byBwYXNzIHRoZSBkYXRhIGluIHRoZSBjb3JyZWN0IGRhdGEgZm9ybWF0IC0gQXJyYXk8c3RyaW5nPi4nKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0U2xpZGVyU3RhdGUoKTtcclxuICAgICAgICB0aGlzLmxvYWRUZW1wbGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gICAgZ2V0Q3VycmVudFZhbHVlUGVyY2VudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMuZmluZEluZGV4KGVsID0+IGVsID09PSB0aGlzLnZhbHVlKSAqICgxMDAgLyAodGhpcy52YWx1ZXMubGVuZ3RoIC0gMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gICAgYnVpbGRHcmlkKCkge1xyXG4gICAgICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBncmlkLmNsYXNzTGlzdC5hZGQoYGd1aWMtJHt0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9ufS1yYW5nZXNsaWRlci1ncmlkYCk7XHJcbiAgICAgICAgLy8gYnVpbGRzIG9ubHkgcG9scyBmb3IgdGhlIHZhbHVlcyBvZiB0aGUgYXJyYXlcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFsdWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy52YWx1ZXNbaV07XHJcbiAgICAgICAgICAgIGdyaWQuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVHcmlkUG9sKGVudHJ5KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyRWwuYXBwZW5kQ2hpbGQoZ3JpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXHJcbiAgICBzZXRNaW5BbmRNYXgoKSB7XHJcbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhbiBhcnJheSB3ZSBzZXQgdGhlIG1pbiBhbmQgbWF4IHZhbHVlcyB0byB0aGUgZmlyc3QgYW5kIGxhc3QgZW50cnkgb2YgdGhlIGFycmF5XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5taW4gPSB0aGlzLnZhbHVlc1swXTtcclxuICAgICAgICB0aGlzLnN0YXRlLm1heCA9IHRoaXMudmFsdWVzW3RoaXMudmFsdWVzLmxlbmd0aCAtIDFdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gICAgc2V0SGFuZGxlVmFsdWVzKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlQXR0ciA9IHRoaXMucmFuZ2VzbGlkZXIuZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlLnZhbHVlID0gdmFsdWVBdHRyICE9PSBudWxsID8gdmFsdWVBdHRyIDogdGhpcy5taW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXHJcbiAgICB1cGRhdGVTbGlkZXJQb3NpdGlvbihwZXJjZW50KSB7XHJcbiAgICAgICAgLy8gVGhlIHBlcmNlbnQgb2YgdGhlIHN0ZXAgdGhhdCBpcyBzZXQsIGlmIHRoZSB2YWx1ZXMgYXJlIGFuIGFycmF5LCB0aGUgc3RlcCBpcyBiZXR3ZWVuIGVhY2ggYXJyYXkgdmFsdWVcclxuICAgICAgICBjb25zdCBwZXJjZW50U3RlcCA9IDEwMCAvICh0aGlzLnZhbHVlcy5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgICAgLy8gdGhlIHJhbmdlIHdoaWNoIHNob3VsZCBiZSBjbGFtcGVkXHJcbiAgICAgICAgY29uc3QgY2xhbXBSYW5nZSA9IFswLCAxMDBdO1xyXG5cclxuICAgICAgICAvLyB0aGUgcHJvdmlkZWQgcGVyY2VudCBpcyBjbGFtcGVkXHJcbiAgICAgICAgcGVyY2VudCA9IGNsYW1wKE1hdGgucm91bmQocGVyY2VudCAvIHBlcmNlbnRTdGVwKSAqIHBlcmNlbnRTdGVwLCAuLi5jbGFtcFJhbmdlKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLnZhbHVlc1twZXJjZW50IC8gcGVyY2VudFN0ZXBdO1xyXG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdGhpcy52YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0QmFyU3R5bGVzKHBlcmNlbnQpO1xyXG4gICAgICAgIHRoaXMuc2V0VGh1bWJQb3NpdGlvbihwZXJjZW50KTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUN1c3RvbUhhbmRsZXMoKTtcclxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhIGN1c3RvbSBldmVudCB3aXRoIHRoZSByYW5nZXNsaWRlciB2YWx1ZXNcclxuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdzbGlkZXJ1cGRhdGUnLCB7IGRldGFpbDogdGhpcy52YWx1ZSB9KSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiIDxkaXYgY2xhc3M9XFxcImd1aWMtaG9yaXpvbnRhbC1yYW5nZXNsaWRlci13cmFwcGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiZ3VpYy1ob3Jpem9udGFsLXJhbmdlc2xpZGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiZ3VpYy1ob3Jpem9udGFsLXJhbmdlc2xpZGVyLWhhbmRsZSBoYW5kbGUtMFxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcImd1aWMtaG9yaXpvbnRhbC1yYW5nZXNsaWRlci1iYXJcXFwiPjwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJndWljLWhvcml6b250YWwtcmFuZ2VzbGlkZXItaGFuZGxlIGhhbmRsZS0xXFxcIj48L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiaW1wb3J0IHsgQ29tcG9uZW50cyB9IGZyb20gJ2NvaGVyZW50LWdhbWVmYWNlLWNvbXBvbmVudHMnO1xyXG5jb25zdCBjb21wb25lbnRzID0gbmV3IENvbXBvbmVudHMoKTtcclxuaW1wb3J0IHZlcnRpY2FsVGVtcGxhdGVUd29IYW5kbGVzIGZyb20gJy4uLy4uL3RlbXBsYXRlcy92ZXJ0aWNhbFR3b0hhbmRsZXMuaHRtbCc7XHJcbmltcG9ydCBob3Jpem9udGFsVGVtcGxhdGVUd29IYW5kbGVzIGZyb20gJy4uLy4uL3RlbXBsYXRlcy9ob3Jpem9udGFsVHdvSGFuZGxlcy5odG1sJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXHJcbmltcG9ydCBSYW5nZXNsaWRlciBmcm9tICcuLi8uLi9zY3JpcHQnO1xyXG5pbXBvcnQgUmFuZ2VTbGlkZXJCYXNlIGZyb20gJy4uL3Jhbmdlc2xpZGVyQmFzZSc7XHJcblxyXG4vKipcclxuICogVGhpcyBjbGFzcyBob2xkcyBjb21tb24gbWV0aG9kcyBhbmQgZGF0YSBmb3IgYWxsIHRoZSByYW5nZXNsaWRlcnNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR3b0hhbmRsZXNSYW5nZVNsaWRlckJhc2UgZXh0ZW5kcyBSYW5nZVNsaWRlckJhc2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1Jhbmdlc2xpZGVyfSByYW5nZXNsaWRlciAtIFRoZSBnYW1lZmFjZS1yYW5nZXNsaWRlciBjdXN0b20gZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihyYW5nZXNsaWRlcikge1xyXG4gICAgICAgIGlmIChuZXcudGFyZ2V0ID09PSBUd29IYW5kbGVzUmFuZ2VTbGlkZXJCYXNlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgVHdvSGFuZGxlc1JhbmdlU2xpZGVyQmFzZSBpbnN0YW5jZXMgZGlyZWN0bHknKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIocmFuZ2VzbGlkZXIpO1xyXG4gICAgICAgIHRoaXMub25Nb3VzZURvd24gPSB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbk1vdXNlTW92ZSA9IHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICBtYXg6IDEwMCxcclxuICAgICAgICAgICAgZ3JpZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHRodW1iOiBmYWxzZSxcclxuICAgICAgICAgICAgc3RlcDogMSxcclxuICAgICAgICAgICAgdmFsdWU6IFtdLFxyXG4gICAgICAgICAgICBjdXN0b21IYW5kbGVMZWZ0OiBudWxsLFxyXG4gICAgICAgICAgICBjdXN0b21IYW5kbGVSaWdodDogbnVsbCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoZSBkZXJpdmVkIGNsYXNzIHNob3VsZCBvdmVycmlkZSB0aGUgbmV4dCBtZXRob2RzIGJlY2F1c2UgdGhleSBiZWhhdmUgZGlmZmVyZW50bHkgZm9yIGJhc2ljIGFuZCB2YWx1ZXMgcmFuZ2Ugc2xpZGVyXHJcbiAgICAvLyBPVkVSUklERSBTVEFSVFxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBwb3NpdGlvbnMgb2YgdGhlIGhhbmRsZXMgYW5kIHRoZSB3aWR0aCBvZiB0aGUgYmFyXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGVyY2VudFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVNsaWRlclBvc2l0aW9uKHBlcmNlbnQsIGluZGV4KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2QgXFwndXBkYXRlU2xpZGVyUG9zaXRpb24oKVxcJyBtdXN0IGJlIGltcGxlbWVudGVkLicpO1xyXG4gICAgfVxyXG4gICAgLy8gT1ZFUlJJREUgRU5EXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgdGhlIHJhbmdlIHNsaWRlciBoYXMgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICB2YWx1ZU1pc3NpbmcoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlICYmICF0aGlzLnZhbHVlWzBdKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjb3JyZWN0IHRlbXBsYXRlIHRvIGJlIGxvYWRlZCBmb3IgdGhlIHJhbmdlc2xpZGVyXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3JpZW50YXRpb24gLSB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHNsaWRlclxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0VGVtcGxhdGUob3JpZW50YXRpb24pIHtcclxuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHJldHVybiB2ZXJ0aWNhbFRlbXBsYXRlVHdvSGFuZGxlcztcclxuXHJcbiAgICAgICAgcmV0dXJuIGhvcml6b250YWxUZW1wbGF0ZVR3b0hhbmRsZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIHNldCB0aGUgdGh1bWIgaWYgdGhpcyBvcHRpb24gaXMgZW5hYmxlZFxyXG4gICAgICovXHJcbiAgICBzZXRUaHVtYigpIHtcclxuICAgICAgICAvLyBpZiB0aGUgdGh1bWIgYXR0cmlidXRlIGlzIGFkZGVkLCB0aGUgdGh1bWJzIGFyZSBjcmVhdGVkXHJcbiAgICAgICAgaWYgKHRoaXMudGh1bWIpIHtcclxuICAgICAgICAgICAgLy8gY3JlYXRlcyB0d28gdGh1bWJzXHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUuZm9yRWFjaCh2YWwgPT4gdGhpcy5idWlsZFRodW1iKHZhbCkpO1xyXG4gICAgICAgICAgICB0aGlzLnRodW1iRWxlbWVudCA9IHRoaXMucmFuZ2VzbGlkZXIucXVlcnlTZWxlY3RvckFsbChgLmd1aWMtJHt0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9ufS1yYW5nZXNsaWRlci10aHVtYmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgaW5pdGlhbGl6ZSB0aGUgY3VzdG9tIGhhbmRsZXMgdmFyaWFibGVzXHJcbiAgICAgKi9cclxuICAgIGluaXRDdXN0b21IYW5kbGVzKCkge1xyXG4gICAgICAgIGNvbnN0IGN1c3RvbUhhbmRsZVNlbGVjdG9ycyA9IHtcclxuICAgICAgICAgICAgTEVGVDogdGhpcy5yYW5nZXNsaWRlci5nZXRBdHRyaWJ1dGUoJ2N1c3RvbS1oYW5kbGUtbGVmdCcpLFxyXG4gICAgICAgICAgICBSSUdIVDogdGhpcy5yYW5nZXNsaWRlci5nZXRBdHRyaWJ1dGUoJ2N1c3RvbS1oYW5kbGUtcmlnaHQnKSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmFkZEN1c3RvbUhhbmRsZXMoY3VzdG9tSGFuZGxlU2VsZWN0b3JzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdXAgdGhlIHJhbmdlc2xpZGVyLCBkcmF3cyB0aGUgYWRkaXRpb25hbCB0aGluZ3MgbGlrZSBncmlkIGFuZCB0aHVtYnMsIGF0dGFjaGVzIHRoZSBldmVudCBsaXN0ZW5lcnNcclxuICAgICAqL1xyXG4gICAgc2V0dXAoKSB7XHJcbiAgICAgICAgY29tcG9uZW50cy53YWl0Rm9yRnJhbWVzKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGUgPSB0aGlzLnJhbmdlc2xpZGVyLnF1ZXJ5U2VsZWN0b3JBbGwoYC5ndWljLSR7dGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbn0tcmFuZ2VzbGlkZXItaGFuZGxlYCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBTbGlkZXIoKTtcclxuICAgICAgICB9LCAzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgdXBkYXRlIHRoZSBoYW5kbGVzIHZhbHVlcyBkZXBlbmRpbmcgb2YgaWYgdGhleSBhcmUgdHdvIG9yIGEgc2luZ2xlIG9uZVxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUN1c3RvbUhhbmRsZXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tSGFuZGxlTGVmdCAmJiB0aGlzLnZhbHVlWzBdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXN0b21IYW5kbGVMZWZ0LnRleHRDb250ZW50ID0gdGhpcy52YWx1ZVswXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmN1c3RvbUhhbmRsZVJpZ2h0ICYmIHRoaXMudmFsdWVbMV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1c3RvbUhhbmRsZVJpZ2h0LnRleHRDb250ZW50ID0gdGhpcy52YWx1ZVsxXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB3ZSBoYXZlIHR3byBoYW5kbGVzIHdlIG5lZWQgdG8gY2xhbXAgZWFjaCBzbyB0aGF0IGl0IGRvZXNuJ3QgcGFzcyBiZXlvbmQgdGhlIG90aGVyIGhhbmRsZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gY2xhbXBSYW5nZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyW119XHJcbiAgICAgKi9cclxuICAgIGNsYW1wVHdvSGFuZGxlcyhjbGFtcFJhbmdlLCBpbmRleCkge1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZVplcm9Qb3NpdGlvbiA9IHRoaXMuaGFuZGxlWzBdLnN0eWxlW3RoaXMudW5pdHMucG9zaXRpb25dO1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZU9uZVBvc2l0aW9uID0gdGhpcy5oYW5kbGVbMV0uc3R5bGVbdGhpcy51bml0cy5wb3NpdGlvbl07XHJcblxyXG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjbGFtcFJhbmdlID0gdGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/XHJcbiAgICAgICAgICAgICAgICBbMCwgMTAwIC0gcGFyc2VGbG9hdChoYW5kbGVPbmVQb3NpdGlvbildIDpcclxuICAgICAgICAgICAgICAgIFswLCBwYXJzZUZsb2F0KGhhbmRsZU9uZVBvc2l0aW9uKV07XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gMSkge1xyXG4gICAgICAgICAgICBjbGFtcFJhbmdlID0gdGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/XHJcbiAgICAgICAgICAgICAgICBbMTAwIC0gcGFyc2VGbG9hdChoYW5kbGVaZXJvUG9zaXRpb24pLCAxMDBdIDpcclxuICAgICAgICAgICAgICAgIFtwYXJzZUZsb2F0KGhhbmRsZVplcm9Qb3NpdGlvbiksIDEwMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY2xhbXBSYW5nZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGRpc2FuY2UgYmV0d2VlbiB0aGUgdHdvIGhhbmRsZXNcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdldERpc3RhbmNlQmV0d2VlblR3b0hhbmRsZXMoKSB7XHJcbiAgICAgICAgY29uc3QgZmlyc3RIYW5kbGVQb3NpdGlvblZhbHVlID0gdGhpcy5oYW5kbGVbMF0uc3R5bGVbdGhpcy51bml0cy5wb3NpdGlvbl07XHJcbiAgICAgICAgY29uc3Qgc2Vjb25kSGFuZGxlUG9zaXRpb25WYWx1ZSA9IHRoaXMuaGFuZGxlWzFdLnN0eWxlW3RoaXMudW5pdHMucG9zaXRpb25dO1xyXG5cclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMocGFyc2VGbG9hdChmaXJzdEhhbmRsZVBvc2l0aW9uVmFsdWUpIC0gcGFyc2VGbG9hdChzZWNvbmRIYW5kbGVQb3NpdGlvblZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIHNldCB0aGUgYmFyIHN0eWxlc1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGVyY2VudFxyXG4gICAgICovXHJcbiAgICBzZXRCYXJTdHlsZXMoaW5kZXgsIHBlcmNlbnQpIHtcclxuICAgICAgICB0aGlzLmhhbmRsZVtpbmRleF0uc3R5bGVbdGhpcy51bml0cy5wb3NpdGlvbl0gPSBgJHt0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnID8gMTAwIC0gcGVyY2VudCA6IHBlcmNlbnR9JWA7XHJcblxyXG4gICAgICAgIC8vIHdlIGdldCB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gaGFuZGxlcyB0byBzZXQgdGhlIHdpZHRoIG9mIHRoZSBiYXIgdG9cclxuICAgICAgICBjb25zdCBkaXN0YW5jZUJldHdlZW5IYW5kbGVzID0gdGhpcy5nZXREaXN0YW5jZUJldHdlZW5Ud29IYW5kbGVzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuYmFyLnN0eWxlW3RoaXMudW5pdHMuc2l6ZV0gPSBgJHtkaXN0YW5jZUJldHdlZW5IYW5kbGVzfSVgO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5iYXIuc3R5bGVbdGhpcy51bml0cy5wb3NpdGlvbl0gPSBgJHt0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnID8gMTAwIC0gcGVyY2VudCA6IHBlcmNlbnR9JWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2lsbCBjaGFuZ2UgdGhlIHRodW1iIHBvc2l0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGVyY2VudFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gdGhlIGluZGV4IG9mIHRoZSBoYW5kbGUgd2Ugd2FudCB0byB1cGRhdGVcclxuICAgICAqL1xyXG4gICAgc2V0VGh1bWJQb3NpdGlvbihwZXJjZW50LCBpbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRodW1iKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGh1bWJFbGVtZW50W2luZGV4XS5pbm5lckhUTUwgPSB0aGlzLnZhbHVlW2luZGV4XTtcclxuICAgICAgICAgICAgdGhpcy50aHVtYkVsZW1lbnRbaW5kZXhdLnN0eWxlW3RoaXMudW5pdHMucG9zaXRpb25dID0gYCR7dGhpcy5yYW5nZXNsaWRlci5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/IDEwMCAtIHBlcmNlbnQgOiBwZXJjZW50fSVgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgZ2V0IHRoZSBjbG9zZXN0IGhhbmRsZSB0byB0aGUgbW91c2UgcG9zaXRpb24gaW4gcGVyY2VudFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBlcmNlbnRcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdldENsb3Nlc3RIYW5kbGVUb01vdXNlUG9zaXRpb24ocGVyY2VudCkge1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5oYW5kbGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcG9zID0gcGFyc2VJbnQodGhpcy5oYW5kbGVbaV0uc3R5bGVbdGhpcy51bml0cy5wb3NpdGlvbl0pO1xyXG4gICAgICAgICAgICBkaXN0YW5jZS5wdXNoKE1hdGguYWJzKHBvcyAtIHBlcmNlbnQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlc2xpZGVyLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnID9cclxuICAgICAgICAgICAgZGlzdGFuY2UucmV2ZXJzZSgpLmluZGV4T2YoTWF0aC5taW4oLi4uZGlzdGFuY2UpKSA6XHJcbiAgICAgICAgICAgIGRpc3RhbmNlLmluZGV4T2YoTWF0aC5taW4oLi4uZGlzdGFuY2UpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4ZWN1dGVkIG9uIG1vdXNlZG93bi4gU2V0cyB0aGUgaGFuZGxlIHRvIHRoZSBjbGlja2VkIGNvb3JkaW5hdGVzIGFuZCBhdHRhY2hlcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50XHJcbiAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGVcclxuICAgICAqL1xyXG4gICAgb25Nb3VzZURvd24oZSkge1xyXG4gICAgICAgIGNvbnN0IHBlcmNlbnQgPSB0aGlzLmdldEhhbmRsZVBlcmNlbnQoZSk7XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZXMgdGhlIGFjdGl2ZSBoYW5kbGVcclxuICAgICAgICB0aGlzLmFjdGl2ZUhhbmRsZSA9IHRoaXMuZ2V0Q2xvc2VzdEhhbmRsZVRvTW91c2VQb3NpdGlvbihwZXJjZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJQb3NpdGlvbihwZXJjZW50LCB0aGlzLmFjdGl2ZUhhbmRsZSk7XHJcblxyXG4gICAgICAgIC8vIGF0dGFjaGluZyBldmVudCBsaXN0ZW5lcnMgb24gbW91c2Vkb3duIHNvIHdlIGRvbid0IGhhdmUgdGhlbSBhdHRhY2hlZCBhbGwgdGhlIHRpbWVcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW92aW5nIHRoZSBoYW5kbGUgd2l0aCB0aGUgbW91c2VcclxuICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZVxyXG4gICAgICovXHJcbiAgICBvbk1vdXNlTW92ZShlKSB7XHJcbiAgICAgICAgY29uc3QgcGVyY2VudCA9IHRoaXMuZ2V0SGFuZGxlUGVyY2VudChlKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJQb3NpdGlvbihwZXJjZW50LCB0aGlzLmFjdGl2ZUhhbmRsZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiIDxkaXYgY2xhc3M9XFxcImd1aWMtdmVydGljYWwtcmFuZ2VzbGlkZXItd3JhcHBlclxcXCI+IDxkaXYgY2xhc3M9XFxcImd1aWMtdmVydGljYWwtcmFuZ2VzbGlkZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJndWljLXZlcnRpY2FsLXJhbmdlc2xpZGVyLWhhbmRsZSBoYW5kbGUtMFxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcImd1aWMtdmVydGljYWwtcmFuZ2VzbGlkZXItYmFyXFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZ3VpYy12ZXJ0aWNhbC1yYW5nZXNsaWRlci1oYW5kbGUgaGFuZGxlLTFcXFwiPjwvZGl2PiA8L2Rpdj4gPC9kaXY+IFwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCJpbXBvcnQgVHdvSGFuZGxlc1JhbmdlU2xpZGVyQmFzZSBmcm9tICcuL3R3b0hhbmRsZXNSYW5nZVNsaWRlckJhc2UnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcclxuaW1wb3J0IFJhbmdlc2xpZGVyIGZyb20gJy4uLy4uL3NjcmlwdCc7XHJcbmltcG9ydCB7IGNsYW1wLCB2YWx1ZVRvUGVyY2VudCB9IGZyb20gJy4uL3JhbmdlU2xpZGVyVXRpbHMnO1xyXG5jb25zdCBTUEFDRV9CRVRXRUVOX0dSSURfUE9MUyA9IDEwO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgaXMgdGhlIGJhc2ljIHJhbmdlc2xpZGVyIHdoaWNoIGhhcyBzaW5nbGUgdGh1bWIgYW5kIHdvcmtzIHdpdGggbnVtZXJpYyB2YWx1ZXMuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNpY1R3b0hhbmRsZXNSYW5nZVNsaWRlciBleHRlbmRzIFR3b0hhbmRsZXNSYW5nZVNsaWRlckJhc2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1Jhbmdlc2xpZGVyfSByYW5nZXNsaWRlciAtIFRoZSBnYW1lZmFjZS1yYW5nZXNsaWRlciBjdXN0b20gZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihyYW5nZXNsaWRlcikge1xyXG4gICAgICAgIHN1cGVyKHJhbmdlc2xpZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cclxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgICAgIHRoaXMuaW5pdFNsaWRlclN0YXRlKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkVGVtcGxhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cclxuICAgIHVwZGF0ZU1pbk1heFN0YXRlKCkge1xyXG4gICAgICAgIHRoaXMuc2V0TWluQW5kTWF4KCk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVHcmlkKHRoaXMuZ3JpZCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJQb3NpdGlvbldpdGhDdXJyZW50VmFsdWUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cclxuICAgIHNldE1pbkFuZE1heCgpIHtcclxuICAgICAgICBjb25zdCBtaW4gPSBwYXJzZUZsb2F0KHRoaXMucmFuZ2VzbGlkZXIuZ2V0QXR0cmlidXRlKCdtaW4nKSk7XHJcbiAgICAgICAgY29uc3QgbWF4ID0gcGFyc2VGbG9hdCh0aGlzLnJhbmdlc2xpZGVyLmdldEF0dHJpYnV0ZSgnbWF4JykpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUubWluID0gIWlzTmFOKG1pbikgPyBtaW4gOiAwO1xyXG4gICAgICAgIHRoaXMuc3RhdGUubWF4ID0gIWlzTmFOKG1pbikgPyBtYXggOiAxMDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXHJcbiAgICBzZXRIYW5kbGVWYWx1ZXMoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS52YWx1ZSA9IFt0aGlzLm1pbiwgdGhpcy5tYXhdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gICAgYnVpbGRHcmlkKCkge1xyXG4gICAgICAgIC8vIGNhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBwb2xzIHRoZSBncmlkIHdpbGwgaGF2ZSBiYXNlZCBvbiB0aGUgc2l6ZSBvZiB0aGUgc2xpZGVyXHJcbiAgICAgICAgY29uc3QgbnVtYmVyT2ZQb2xzID0gTWF0aC5yb3VuZCh0aGlzLndyYXBwZXJbdGhpcy51bml0cy5vZmZzZXRdIC8gU1BBQ0VfQkVUV0VFTl9HUklEX1BPTFMgLyA0KSAqIDQ7IC8vIGhlcmUgd2Ugcm91bmQgdG8gYSBudW1iZXIgdGhhdCBpcyBkaXZpc2libGUgYnkgNCBhbmQgdG8gbWFrZSBzdXJlLCB0aGUgbGFzdCBwb2wgaGFzIGEgbnVtYmVyXHJcbiAgICAgICAgY29uc3QgZ3JpZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGdyaWQuY2xhc3NMaXN0LmFkZChgZ3VpYy0ke3RoaXMucmFuZ2VzbGlkZXIub3JpZW50YXRpb259LXJhbmdlc2xpZGVyLWdyaWRgKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBudW1iZXJPZlBvbHM7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBlYWNoIGZvcnRoIHBvbGwgd2lsbCBiZSBsYXJnZXIgd2l0aCBhIHZhbHVlIGFkZGVkXHJcbiAgICAgICAgICAgIGlmIChpICUgKG51bWJlck9mUG9scyAvIDQpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBncmlkLmFwcGVuZENoaWxkKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlR3JpZFBvbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCgocGFyc2VJbnQodGhpcy5taW4pICsgKHRoaXMubWF4IC0gdGhpcy5taW4pICogKGkgLyBudW1iZXJPZlBvbHMpKS50b0ZpeGVkKDIpKVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBncmlkLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlR3JpZFBvbCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXJFbC5hcHBlbmRDaGlsZChncmlkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cclxuICAgIHVwZGF0ZVNsaWRlclBvc2l0aW9uV2l0aEN1cnJlbnRWYWx1ZSgpIHtcclxuICAgICAgICAvLyBUT0RPOiBVcGRhdGUgdGhlIGNvcnJlY3Qgc2xpZGVyIHBvc2l0aW9ucyB3aXRoIHRoZSBjb3JyZWN0IHZhbHVlcyBwZXJjZW50cyBhcyBpdCBpcyBkb25lIGluXHJcbiAgICAgICAgLy8gdXBkYXRlTWluTWF4U3RhdGUgbWV0aG9kIGluIGJhc2ljUmFuZ2VzbGlkZXIuanNcclxuICAgICAgICBjb25zdCBwZXJjZW50ID0gWzAsIDEwMF07XHJcbiAgICAgICAgcGVyY2VudC5mb3JFYWNoKChwLCBpKSA9PiB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKHAsIGkpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cclxuICAgIHVwZGF0ZVNsaWRlclBvc2l0aW9uKHBlcmNlbnQsIGluZGV4KSB7XHJcbiAgICAgICAgLy8gVGhlIHBlcmNlbnQgb2YgdGhlIHN0ZXAgdGhhdCBpcyBzZXQsIGlmIHRoZSB2YWx1ZXMgYXJlIGFuIGFycmF5LCB0aGUgc3RlcCBpcyBiZXR3ZWVuIGVhY2ggYXJyYXkgdmFsdWVcclxuICAgICAgICBjb25zdCBwZXJjZW50U3RlcCA9IHZhbHVlVG9QZXJjZW50KHRoaXMuc3RlcCArIHRoaXMubWluLCB0aGlzLm1pbiwgdGhpcy5tYXgpO1xyXG5cclxuICAgICAgICAvLyB0aGUgcmFuZ2Ugd2hpY2ggc2hvdWxkIGJlIGNsYW1wZWRcclxuICAgICAgICBsZXQgY2xhbXBSYW5nZSA9IFswLCAxMDBdO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5oYW5kbGVbMV0uc3R5bGVbdGhpcy51bml0cy5wb3NpdGlvbl0pIHtcclxuICAgICAgICAgICAgY2xhbXBSYW5nZSA9IHRoaXMuY2xhbXBUd29IYW5kbGVzKGNsYW1wUmFuZ2UsIGluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRoZSBwcm92aWRlZCBwZXJjZW50IGlzIGNsYW1wZWRcclxuICAgICAgICBwZXJjZW50ID0gY2xhbXAoTWF0aC5yb3VuZChwZXJjZW50IC8gcGVyY2VudFN0ZXApICogcGVyY2VudFN0ZXAsIC4uLmNsYW1wUmFuZ2UpO1xyXG5cclxuICAgICAgICB0aGlzLnNldEJhclN0eWxlcyhpbmRleCwgcGVyY2VudCk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUudmFsdWVbaW5kZXhdID0gcGFyc2VGbG9hdCh0aGlzLmNhbGN1bGF0ZUhhbmRsZVZhbHVlKHBlcmNlbnQpLnRvRml4ZWQoMikpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFRodW1iUG9zaXRpb24ocGVyY2VudCwgaW5kZXgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ3VzdG9tSGFuZGxlcygpO1xyXG4gICAgICAgIC8vIGRpc3BhdGNoaW5nIGEgY3VzdG9tIGV2ZW50IHdpdGggdGhlIHJhbmdlc2xpZGVyIHZhbHVlc1xyXG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXIuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3NsaWRlcnVwZGF0ZScsIHsgZGV0YWlsOiB0aGlzLnZhbHVlIH0pKTtcclxuICAgIH1cclxufVxyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBsaW5lYnJlYWstc3R5bGUgKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBDb2hlcmVudCBMYWJzIEFELiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50cyB9IGZyb20gJ2NvaGVyZW50LWdhbWVmYWNlLWNvbXBvbmVudHMnO1xuY29uc3QgY29tcG9uZW50cyA9IG5ldyBDb21wb25lbnRzKCk7XG5pbXBvcnQgQmFzaWNSYW5nZVNsaWRlciBmcm9tICcuL3Jhbmdlc2xpZGVycy9zaW5nbGVIYW5kbGVTbGlkZXJzL2Jhc2ljUmFuZ2VzbGlkZXInO1xuaW1wb3J0IFZhbHVlc1JhbmdlU2xpZGVyIGZyb20gJy4vcmFuZ2VzbGlkZXJzL3NpbmdsZUhhbmRsZVNsaWRlcnMvdmFsdWVzUmFuZ2VzbGlkZXInO1xuaW1wb3J0IEJhc2ljVHdvSGFuZGxlc1JhbmdlU2xpZGVyIGZyb20gJy4vcmFuZ2VzbGlkZXJzL3R3b0hhbmRsZXNTbGlkZXJzL2Jhc2ljVHdvSGFuZGxlc1JhbmdlU2xpZGVyJztcbmltcG9ydCB7IGNoZWNrT3JpZW50YXRpb24gfSBmcm9tICcuL3Jhbmdlc2xpZGVycy9yYW5nZVNsaWRlclV0aWxzJztcblxuY29uc3QgUkFOR0VfU0xJREVSU19UWVBFUyA9IHtcbiAgICBCQVNJQzogJ2Jhc2ljJyxcbiAgICBWQUxVRVM6ICd2YWx1ZXMnLFxuICAgIEJBU0lDX1RXT19IQU5ETEVTOiAnYmFzaWNfdHdvX2hhbmRsZXMnLFxufTtcbmNvbnN0IEN1c3RvbUVsZW1lbnRWYWxpZGF0b3IgPSBjb21wb25lbnRzLkN1c3RvbUVsZW1lbnRWYWxpZGF0b3I7XG5jb25zdCBzdGF0ZVNjaGVtYSA9IHtcbiAgICBtaW46IHsgdHlwZTogWydudW1iZXInXSB9LFxuICAgIG1heDogeyB0eXBlOiBbJ251bWJlciddIH0sXG4gICAgdmFsdWU6IHsgdHlwZTogWydudW1iZXInLCAnc3RyaW5nJ10gfSxcbiAgICB2YWx1ZXM6IHsgdHlwZTogWydhcnJheSddIH0sXG4gICAgWyd0d28taGFuZGxlcyddOiB7IHR5cGU6IFsnYm9vbGVhbiddIH0sXG4gICAgZ3JpZDogeyB0eXBlOiBbJ2Jvb2xlYW4nXSB9LFxuICAgIHRodW1iOiB7IHR5cGU6IFsnYm9vbGVhbiddIH0sXG4gICAgc3RlcDogeyB0eXBlOiBbJ251bWJlciddIH0sXG4gICAgb3JpZW50YXRpb246IHsgdHlwZTogWydzdHJpbmcnXSB9LFxuICAgIFsnY3VzdG9tLWhhbmRsZSddOiB7IHR5cGU6IFsnc3RyaW5nJ10gfSxcbiAgICBbJ2N1c3RvbS1oYW5kbGUtbGVmdCddOiB7IHR5cGU6IFsnc3RyaW5nJ10gfSxcbiAgICBbJ2N1c3RvbS1oYW5kbGUtcmlnaHQnXTogeyB0eXBlOiBbJ3N0cmluZyddIH0sXG59O1xuXG4vKipcbiAqIFJhbmdlc2xpZGVyIGNvbXBvbmVudCwgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGEgbnVtZXJpYyB2YWx1ZSBieSB1c2luZyBhIHNsaWRlci5cbiAqIEl0IG11c3QgYmUgbm8gbGVzcyB0aGFuIGEgZ2l2ZW4gdmFsdWUsIGFuZCBubyBtb3JlIHRoYW4gYW5vdGhlciBnaXZlbiB2YWx1ZS5cbiAqL1xuY2xhc3MgUmFuZ2VzbGlkZXIgZXh0ZW5kcyBDdXN0b21FbGVtZW50VmFsaWRhdG9yIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkgeyByZXR1cm4gT2JqZWN0LmtleXMoc3RhdGVTY2hlbWEpOyB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZVNjaGVtYSA9IHN0YXRlU2NoZW1hO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcbiAgICAgICAgICAgIFsndHdvLWhhbmRsZXMnXTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3VzdG9tIGVsZW1lbnQgbGlmZWN5Y2xlIG1ldGhvZC4gQ2FsbGVkIHdoZW4gYW4gYXR0cmlidXRlIGlzIGNoYW5nZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkVmFsdWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufGFycmF5fSBuZXdWYWx1ZVxuICAgICAqL1xuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVuZGVyZWQpIHJldHVybjtcblxuICAgICAgICB0aGlzLnVwZGF0ZUF0dHJpYnV0ZVN0YXRlKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2lsbCB1cGRhdGUgdGhlIHN0YXRlIHByb3BlcnRpZXMgbGlua2VkIHdpdGggdGhlIGNoZWNrYm94IGF0dHJpYnV0ZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW58YXJyYXl9IG9sZFZhbHVlXG4gICAgICogQHBhcmFtIHtzdHJpbmd8Ym9vbGVhbnxhcnJheX0gdmFsdWVcbiAgICAgKi9cbiAgICB1cGRhdGVBdHRyaWJ1dGVTdGF0ZShuYW1lLCBvbGRWYWx1ZSwgdmFsdWUpIHtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlICd0d28taGFuZGxlcyc6XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUd29IYW5kbGVzU3RhdGUodmFsdWUgIT09IG51bGwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnb3JpZW50YXRpb24nOlxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlT3JpZW50YXRpb25TdGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd2YWx1ZXMnOlxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVzU3RhdGUob2xkVmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XG4gICAgICAgICAgICBjYXNlICdtYXgnOlxuICAgICAgICAgICAgY2FzZSAndmFsdWUnOlxuICAgICAgICAgICAgY2FzZSAndGh1bWInOlxuICAgICAgICAgICAgY2FzZSAnZ3JpZCc6XG4gICAgICAgICAgICBjYXNlICdzdGVwJzpcbiAgICAgICAgICAgIGNhc2UgJ2N1c3RvbS1oYW5kbGUnOlxuICAgICAgICAgICAgY2FzZSAnY3VzdG9tLWhhbmRsZS1yaWdodCc6XG4gICAgICAgICAgICBjYXNlICdjdXN0b20taGFuZGxlLWxlZnQnOlxuICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VzbGlkZXJPYmplY3QuYXR0cmlidXRlQ2hhbmdlZChuYW1lLCBvbGRWYWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBjaGVja2JveCdzIHN0YXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHByb3BcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IGJvb2xlYW59IHZhbHVlIC0gdGhlIHZhbHVlIG9mIHRoZSB0aGUgcHJvcFxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIHVwZGF0ZVN0YXRlKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0YXRlUHJvcFZhbGlkKG5hbWUsIHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlW25hbWVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2lsbCB1cGRhdGUgdGhlIHJhbmdlc2xpZGVyIHdoZW4gb3JpZW50YXRpb24gYXR0cmlidXRlIGlzIGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICB1cGRhdGVPcmllbnRhdGlvblN0YXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gY2hlY2tPcmllbnRhdGlvbih2YWx1ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUoJ29yaWVudGF0aW9uJywgb3JpZW50YXRpb24pO1xuICAgICAgICB0aGlzLnJlUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2lsbCB1cGRhdGUgdGhlIHJhbmdlc2xpZGVyIHdoZW4gdHdvLWhhbmRsZXMgYXR0cmlidXRlIGlzIGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAgICovXG4gICAgdXBkYXRlVHdvSGFuZGxlc1N0YXRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUoJ3R3by1oYW5kbGVzJywgdmFsdWUpO1xuICAgICAgICB0aGlzLnJlUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2lsbCB1cGRhdGUgdGhlIHJhbmdlc2xpZGVyIHdoZW4gdmFsdWVzIGF0dHJpYnV0ZSBpcyBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHthcnJheX0gb2xkVmFsdWVcbiAgICAgKiBAcGFyYW0ge2FycmF5fSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIHVwZGF0ZVZhbHVlc1N0YXRlKG9sZFZhbHVlLCB2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICBpZiAob2xkVmFsdWUgIT09IG51bGwgJiYgdmFsdWUgPT09IG51bGwpIHJldHVybiB0aGlzLnJlUmVuZGVyKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzU3RhdGVQcm9wVmFsaWQoJ3ZhbHVlcycsIHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICBpZiAob2xkVmFsdWUgPT09IG51bGwgJiYgdmFsdWUgIT09IG51bGwpIHJldHVybiB0aGlzLnJlUmVuZGVyKCk7XG4gICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gbnVsbCkgcmV0dXJuIHRoaXMucmFuZ2VzbGlkZXJPYmplY3QuYXR0cmlidXRlQ2hhbmdlZCgndmFsdWVzJywgb2xkVmFsdWUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIGdldCB0d29IYW5kbGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZVsndHdvLWhhbmRsZXMnXTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHNldCB0d29IYW5kbGVzKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID8gdGhpcy5zZXRBdHRyaWJ1dGUoJ3R3by1oYW5kbGVzJywgJycpIDogdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ3R3by1oYW5kbGVzJyk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcbiAgICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLm9yaWVudGF0aW9uO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZXF1aXJlLWpzZG9jXG4gICAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlICE9PSBudWxsID8gdGhpcy5zZXRBdHRyaWJ1dGUoJ29yaWVudGF0aW9uJywgdmFsdWUpIDogdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ29yaWVudGF0aW9uJyk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcbiAgICBnZXQgdmFsdWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZXNsaWRlck9iamVjdC52YWx1ZXM7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcbiAgICBzZXQgdmFsdWVzKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlICE9PSBudWxsID8gdGhpcy5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSkgOiB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgndmFsdWVzJyk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcbiAgICBnZXQgZ3JpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VzbGlkZXJPYmplY3QuZ3JpZDtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHNldCBncmlkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXJPYmplY3QuZ3JpZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZXF1aXJlLWpzZG9jXG4gICAgZ2V0IHRodW1iKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZXNsaWRlck9iamVjdC50aHVtYjtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHNldCB0aHVtYih2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0LnRodW1iID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWluaW11bSB2YWx1ZSBvZiB0aGUgc2xpZGVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAgICovXG4gICAgc2V0IG1pbih2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0Lm1pbiA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1pbmltdW0gdmFsdWUgb2YgdGhlIHNsaWRlclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IG1pbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VzbGlkZXJPYmplY3QubWluO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1heGltdW0gdmFsdWUgb2YgdGhlIHNsaWRlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldCBtYXgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5yYW5nZXNsaWRlck9iamVjdC5tYXggPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIHRoZSBzbGlkZXJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldCBtYXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0Lm1heDtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VzbGlkZXJPYmplY3QudmFsdWU7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcbiAgICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5yYW5nZXNsaWRlck9iamVjdC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZXF1aXJlLWpzZG9jXG4gICAgZ2V0IHN0ZXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0LnN0ZXA7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcbiAgICBzZXQgc3RlcCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0LnN0ZXAgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIGdldCBjdXN0b21IYW5kbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0LmN1c3RvbUhhbmRsZTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIHNldCBjdXN0b21IYW5kbGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5yYW5nZXNsaWRlck9iamVjdC5jdXN0b21IYW5kbGUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1qc2RvY1xuICAgIGdldCBjdXN0b21IYW5kbGVMZWZ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZXNsaWRlck9iamVjdC5jdXN0b21IYW5kbGVMZWZ0O1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZXF1aXJlLWpzZG9jXG4gICAgc2V0IGN1c3RvbUhhbmRsZUxlZnQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5yYW5nZXNsaWRlck9iamVjdC5jdXN0b21IYW5kbGVMZWZ0ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtanNkb2NcbiAgICBnZXQgY3VzdG9tSGFuZGxlUmlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0LmN1c3RvbUhhbmRsZVJpZ2h0O1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZXF1aXJlLWpzZG9jXG4gICAgc2V0IGN1c3RvbUhhbmRsZVJpZ2h0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXJPYmplY3QuY3VzdG9tSGFuZGxlUmlnaHQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaWxsIGRpc3BsYXkgYSBjdXN0b20gZXJyb3IgaWYgdGhlIHNsaWRlciBoYXMgdHdvIGhhbmRsZXMgYW5kIGl0IGlzIHdyYXBwZWQgaW5zaWRlIGEgZ2FtZWZhY2UgZm9ybSBjb250cm9sIGVsZW1lbnRcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBjdXN0b21FcnJvcigpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlKCd0d28taGFuZGxlcycpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ2dhbWVmYWNlLXJhbmdlc2xpZGVyIGNvbXBvbmVudCBkb2VzIG5vdCBzdXBwb3J0IGZvcm0gZGF0YSB3aGVuIFwidHdvLWhhbmRsZXNcIiBhdHRyaWJ1dGUgaXMgdXNlZCEnKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdpbGwgY2hhbmdlIHRoZSB0aHVtYiBwb3NpdGlvbiBvZiB0aGUgc2xpZGVyXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCBmcm9tIHRlc3RzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBlcmNlbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSB0aHVtYiBpbmRleFxuICAgICAqL1xuICAgIHVwZGF0ZVNsaWRlclBvc2l0aW9uKHBlcmNlbnQsIGluZGV4KSB7XG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXJPYmplY3QudXBkYXRlU2xpZGVyUG9zaXRpb24ocGVyY2VudCwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIHRlc3RpbmcgcHVycG9zZXNcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgb25Nb3VzZURvd24oZSkge1xuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0Lm9uTW91c2VEb3duKGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIHRlc3RpbmcgcHVycG9zZXNcbiAgICAgKi9cbiAgICBvbk1vdXNlVXAoKSB7XG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXJPYmplY3Qub25Nb3VzZVVwKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBmb3IgdGVzdGluZyBwdXJwb3Nlc1xuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBvbk1vdXNlTW92ZShlKSB7XG4gICAgICAgIHRoaXMucmFuZ2VzbGlkZXJPYmplY3Qub25Nb3VzZU1vdmUoZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSByYW5nZSBzbGlkZXIgaGFzIHZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgdmFsdWVNaXNzaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZXNsaWRlck9iamVjdC52YWx1ZU1pc3NpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaWxsIGdldCB0aGUgdHlwZSBvZiB0aGUgcmFuZ2VzbGlkZXJcbiAgICAgKiBAcmV0dXJucyB7UkFOR0VfU0xJREVSU19UWVBFU31cbiAgICAgKi9cbiAgICBnZXRSYW5nZVNsaWRlclR5cGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnR3b0hhbmRsZXMpIHJldHVybiBSQU5HRV9TTElERVJTX1RZUEVTLkJBU0lDX1RXT19IQU5ETEVTO1xuICAgICAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ3ZhbHVlcycpKSByZXR1cm4gUkFOR0VfU0xJREVSU19UWVBFUy5WQUxVRVM7XG5cbiAgICAgICAgcmV0dXJuIFJBTkdFX1NMSURFUlNfVFlQRVMuQkFTSUM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmFjdG9yeSBmb3IgZ2V0dGluZyB0aGUgcmFuZ2VzbGlkZXIgb2JqZWN0IGJhc2VkIG9uIGl0cyB0eXBlXG4gICAgICogQHJldHVybnMge0Jhc2ljUmFuZ2VTbGlkZXJ8VmFsdWVzUmFuZ2VTbGlkZXJ8QmFzaWNUd29IYW5kbGVzUmFuZ2VTbGlkZXJ9XG4gICAgICovXG4gICAgZ2V0UmFuZ2VTbGlkZXIoKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmdldFJhbmdlU2xpZGVyVHlwZSgpO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBSQU5HRV9TTElERVJTX1RZUEVTLkJBU0lDOiByZXR1cm4gbmV3IEJhc2ljUmFuZ2VTbGlkZXIodGhpcyk7XG4gICAgICAgICAgICBjYXNlIFJBTkdFX1NMSURFUlNfVFlQRVMuVkFMVUVTOiByZXR1cm4gbmV3IFZhbHVlc1JhbmdlU2xpZGVyKHRoaXMpO1xuICAgICAgICAgICAgY2FzZSBSQU5HRV9TTElERVJTX1RZUEVTLkJBU0lDX1RXT19IQU5ETEVTOiByZXR1cm4gbmV3IEJhc2ljVHdvSGFuZGxlc1JhbmdlU2xpZGVyKHRoaXMpO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVW5rbm93biByYW5nZXNsaWRlciB0eXBlIC0gJHt0eXBlfS4gV2lsbCBmYWxsYmFjayB0byBiYXNpYyByYW5nZXNsaWRlci5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJhc2ljUmFuZ2VTbGlkZXIodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaWxsIHJlLXJlbmRlciB0aGUgcmFuZ2VzbGlkZXIgZnJvbSBzY3JhdGNoXG4gICAgICovXG4gICAgcmVSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaXNSZW5kZXJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2lsbCBpbml0IHRoZSBzdGF0ZSBiYXNlZCBvbiB0aGUgaW5pdGlhbCBhdHRyaWJ1dGUgdmFsdWVzXG4gICAgICovXG4gICAgaW5pdFN0YXRlKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ29yaWVudGF0aW9uJykpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gY2hlY2tPcmllbnRhdGlvbih0aGlzLmdldEF0dHJpYnV0ZSgnb3JpZW50YXRpb24nKSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKCdvcmllbnRhdGlvbicsIG9yaWVudGF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKCd0d28taGFuZGxlcycsIHRoaXMuaGFzQXR0cmlidXRlKCd0d28taGFuZGxlcycpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgZWxlbWVudCB3YXMgYXR0YWNoZWQgdG8gdGhlIERPTS5cbiAgICAgKi9cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5pbml0U3RhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMucmFuZ2VzbGlkZXJPYmplY3QpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0O1xuICAgICAgICAgICAgdGhpcy5yYW5nZXNsaWRlck9iamVjdCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0ID0gdGhpcy5nZXRSYW5nZVNsaWRlcigpO1xuICAgICAgICB0aGlzLnJhbmdlc2xpZGVyT2JqZWN0LmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxufVxuXG5jb21wb25lbnRzLmRlZmluZUN1c3RvbUVsZW1lbnQoJ2dhbWVmYWNlLXJhbmdlc2xpZGVyJywgUmFuZ2VzbGlkZXIpO1xuZXhwb3J0IGRlZmF1bHQgUmFuZ2VzbGlkZXI7XG4iLCJ2YXIgZ2xvYmFsID1cbiAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpXG5cbnZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIGdsb2JhbCxcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIGdsb2JhbCAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gZ2xvYmFsICYmXG4gICAgJ0Jsb2InIGluIGdsb2JhbCAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gZ2xvYmFsLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBnbG9iYWxcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH4hXS9pLnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIC8qXG4gICAgICBmZXRjaC1tb2NrIHdyYXBzIHRoZSBSZXNwb25zZSBvYmplY3QgaW4gYW4gRVM2IFByb3h5IHRvXG4gICAgICBwcm92aWRlIHVzZWZ1bCB0ZXN0IGhhcm5lc3MgZmVhdHVyZXMgc3VjaCBhcyBmbHVzaC4gSG93ZXZlciwgb25cbiAgICAgIEVTNSBicm93c2VycyB3aXRob3V0IGZldGNoIG9yIFByb3h5IHN1cHBvcnQgcG9sbHlmaWxscyBtdXN0IGJlIHVzZWQ7XG4gICAgICB0aGUgcHJveHktcG9sbHlmaWxsIGlzIHVuYWJsZSB0byBwcm94eSBhbiBhdHRyaWJ1dGUgdW5sZXNzIGl0IGV4aXN0c1xuICAgICAgb24gdGhlIG9iamVjdCBiZWZvcmUgdGhlIFByb3h5IGlzIGNyZWF0ZWQuIFRoaXMgY2hhbmdlIGVuc3VyZXNcbiAgICAgIFJlc3BvbnNlLmJvZHlVc2VkIGV4aXN0cyBvbiB0aGUgaW5zdGFuY2UsIHdoaWxlIG1haW50YWluaW5nIHRoZVxuICAgICAgc2VtYW50aWMgb2Ygc2V0dGluZyBSZXF1ZXN0LmJvZHlVc2VkIGluIHRoZSBjb25zdHJ1Y3RvciBiZWZvcmVcbiAgICAgIF9pbml0Qm9keSBpcyBjYWxsZWQuXG4gICAgKi9cbiAgICB0aGlzLmJvZHlVc2VkID0gdGhpcy5ib2R5VXNlZFxuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICB2YXIgaXNDb25zdW1lZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChpc0NvbnN1bWVkKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQ29uc3VtZWRcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ1ZmZlci5zbGljZShcbiAgICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQsXG4gICAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlT2Zmc2V0ICsgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVxdWVzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcblxuICBpZiAodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICBpZiAob3B0aW9ucy5jYWNoZSA9PT0gJ25vLXN0b3JlJyB8fCBvcHRpb25zLmNhY2hlID09PSAnbm8tY2FjaGUnKSB7XG4gICAgICAvLyBTZWFyY2ggZm9yIGEgJ18nIHBhcmFtZXRlciBpbiB0aGUgcXVlcnkgc3RyaW5nXG4gICAgICB2YXIgcmVQYXJhbVNlYXJjaCA9IC8oWz8mXSlfPVteJl0qL1xuICAgICAgaWYgKHJlUGFyYW1TZWFyY2gudGVzdCh0aGlzLnVybCkpIHtcbiAgICAgICAgLy8gSWYgaXQgYWxyZWFkeSBleGlzdHMgdGhlbiBzZXQgdGhlIHZhbHVlIHdpdGggdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICB0aGlzLnVybCA9IHRoaXMudXJsLnJlcGxhY2UocmVQYXJhbVNlYXJjaCwgJyQxXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGEgbmV3ICdfJyBwYXJhbWV0ZXIgdG8gdGhlIGVuZCB3aXRoIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgdmFyIHJlUXVlcnlTdHJpbmcgPSAvXFw/L1xuICAgICAgICB0aGlzLnVybCArPSAocmVRdWVyeVN0cmluZy50ZXN0KHRoaXMudXJsKSA/ICcmJyA6ICc/JykgKyAnXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgaWYgKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICB9XG4gIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNwb25zZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICcnXG4gIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbn1cblxuQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgIHVybDogdGhpcy51cmxcbiAgfSlcbn1cblxuUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbnZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG5SZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbn1cblxuZXhwb3J0IHZhciBET01FeGNlcHRpb24gPSBnbG9iYWwuRE9NRXhjZXB0aW9uXG50cnkge1xuICBuZXcgRE9NRXhjZXB0aW9uKClcbn0gY2F0Y2ggKGVycikge1xuICBET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKVxuICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFja1xuICB9XG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSlcbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERPTUV4Y2VwdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgeGhyLmFib3J0KClcbiAgICB9XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpeFVybCh1cmwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB1cmwgPT09ICcnICYmIGdsb2JhbC5sb2NhdGlvbi5ocmVmID8gZ2xvYmFsLmxvY2F0aW9uLmhyZWYgOiB1cmxcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVybFxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCBmaXhVcmwocmVxdWVzdC51cmwpLCB0cnVlKVxuXG4gICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhocikge1xuICAgICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBzdXBwb3J0LmFycmF5QnVmZmVyICYmXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpICYmXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpLmluZGV4T2YoJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpICE9PSAtMVxuICAgICAgKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluaXQgJiYgdHlwZW9mIGluaXQuaGVhZGVycyA9PT0gJ29iamVjdCcgJiYgIShpbml0LmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSkge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5pdC5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgbm9ybWFsaXplVmFsdWUoaW5pdC5oZWFkZXJzW25hbWVdKSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgfSlcbn1cblxuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cbmlmICghZ2xvYmFsLmZldGNoKSB7XG4gIGdsb2JhbC5mZXRjaCA9IGZldGNoXG4gIGdsb2JhbC5IZWFkZXJzID0gSGVhZGVyc1xuICBnbG9iYWwuUmVxdWVzdCA9IFJlcXVlc3RcbiAgZ2xvYmFsLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIGxpbmVicmVhay1zdHlsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBDb2hlcmVudCBMYWJzIEFELiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuaW1wb3J0IFJhbmdlc2xpZGVyIGZyb20gJy4uL3NjcmlwdC5qcyc7XG5pbXBvcnQgeyBwbSB9IGZyb20gJ3Bvc3RtZXNzYWdlLXBvbHlmaWxsJztcbmltcG9ydCB7IGZldGNoIGFzIGZldGNoUG9seWZpbGwgfSBmcm9tICd3aGF0d2ctZmV0Y2gnO1xuXG53aW5kb3cucG9zdE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHBtKHtcbiAgICAgICAgb3JpZ2luOiAnaHR0cDovLzEyNy4wLjAuMS86MzAwMCcsXG4gICAgICAgIHRhcmdldDogd2luZG93LFxuICAgICAgICBkYXRhOiBtZXNzYWdlLFxuICAgIH0pO1xufTtcbiJdLCJuYW1lcyI6WyJOT19KUVVFUlkiLCJ3aW5kb3ciLCIkIiwidW5kZWZpbmVkIiwiYyIsImNvbnNvbGUiLCJsb2ciLCJ3YXJuIiwiZXJyb3IiLCJkZWJ1ZyIsImZuIiwiZXh0ZW5kIiwiYSIsImFyZ3VtZW50cyIsImkiLCJsZW4iLCJsZW5ndGgiLCJiIiwicHJvcCIsInBtIiwidGhpcyIsIm9wdGlvbnMiLCJzZW5kIiwiYmluZCIsInR5cGUiLCJvcmlnaW4iLCJoYXNoIiwiYXN5bmNfcmVwbHkiLCJ1bmJpbmQiLCJwb2xsIiwibyIsImRlZmF1bHRzIiwidGFyZ2V0IiwibXNnIiwiZGF0YSIsInN1Y2Nlc3MiLCJjYWxsYmFjayIsIl9jYWxsYmFjayIsImVycmJhY2siLCJfYmluZCIsInBvc3RNZXNzYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9yZXBseUJpbmQiLCJpc0NhbGxiYWNrIiwibCIsImZucyIsInB1c2giLCJtIiwiayIsInYiLCJfZGF0YSIsIl9DSEFSUyIsInNwbGl0IiwiX3JhbmRvbSIsInIiLCJNYXRoIiwicmFuZG9tIiwiam9pbiIsImNicyIsImFkZEV2ZW50TGlzdGVuZXIiLCJfZGlzcGF0Y2giLCJhdHRhY2hFdmVudCIsImUiLCJwYXJzZSIsImV4IiwiY2IiLCJtZXNzYWdlIiwic291cmNlIiwic2VuZFJlcGx5IiwidGFyZ2V0X3dpbmRvdyIsInRhcmdldF91cmwiLCJ1cmwiLCJfdXJsIiwic291cmNlX3dpbmRvdyIsInNvdXJjZV91cmwiLCJsb2NhdGlvbiIsImhyZWYiLCJwYXJlbnQiLCJmcmFtZXMiLCJuYW1lIiwiaGFzaG1lc3NhZ2UiLCJwb3N0bWVzc2FnZSIsImhhc2hfaWQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJfcmVnZXgiLCJfcmVnZXhfbGVuIiwic2V0SW50ZXJ2YWwiLCJleGVjIiwiaWQiLCJfbGFzdCIsInN1YnN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJqUXVlcnkiLCJmIiwibiIsIkRhdGUiLCJwcm90b3R5cGUiLCJ0b0pTT04iLCJrZXkiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJTdHJpbmciLCJOdW1iZXIiLCJCb29sZWFuIiwidmFsdWVPZiIsImN4IiwiZXNjYXBhYmxlIiwiZ2FwIiwiaW5kZW50IiwibWV0YSIsInJlcCIsInF1b3RlIiwic3RyaW5nIiwibGFzdEluZGV4IiwidGVzdCIsImNoYXJDb2RlQXQiLCJ0b1N0cmluZyIsInNsaWNlIiwic3RyIiwiaG9sZGVyIiwicGFydGlhbCIsIm1pbmQiLCJ2YWx1ZSIsImNhbGwiLCJpc0Zpbml0ZSIsIk9iamVjdCIsImFwcGx5IiwiaGFzT3duUHJvcGVydHkiLCJyZXBsYWNlciIsInNwYWNlIiwiRXJyb3IiLCJ0ZXh0IiwicmV2aXZlciIsImoiLCJ3YWxrIiwiZXZhbCIsIlN5bnRheEVycm9yIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuZXdMaW5lc1JlZ0V4cCIsIlJlZ0V4cCIsIk5BVElWRV9URVhUX0ZJRUxEX0VMRU1FTlRTIiwiaXNOYXRpdmVUZXh0RmllbGQiLCJlbGVtZW50IiwiaW5kZXhPZiIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsIkdVSUNvbXBvbmVudHNEZWZpbmVkRWxlbWVudHMiLCJCYXNlQ29tcG9uZW50IiwiSFRNTEVsZW1lbnQiLCJpbnN0YW5jZVR5cGUiLCJzZXR1cFRlbXBsYXRlIiwiaXNDb25uZWN0ZWQiLCJ0ZW1wbGF0ZSIsImlzU3RhdGVQcm9wVmFsaWQiLCJzY2hlbWFQcm9wZXJ0eSIsInN0YXRlU2NoZW1hIiwiaW5jbHVkZXMiLCJBcnJheSIsImlzQXJyYXkiLCJWYWxpZGF0b3IiLCJpc0Zvcm1FbGVtZW50IiwicGFyZW50RWxlbWVudCIsInRvb0xvbmciLCJ0b29TaG9ydCIsInJhbmdlT3ZlcmZsb3ciLCJyYW5nZVVuZGVyZmxvdyIsInZhbHVlTWlzc2luZyIsImhhc0F0dHJpYnV0ZSIsIm5hbWVNaXNzaW5nIiwiZ2V0QXR0cmlidXRlIiwiaXNSZXF1aXJlZCIsImN1c3RvbUVycm9yIiwid2lsbFNlcmlhbGl6ZSIsImlzQmFkVVJMIiwiaXNCYWRFbWFpbCIsIk5hdGl2ZUVsZW1lbnRWYWxpZGF0b3IiLCJjb25zdHJ1Y3RvciIsIlRleHRGaWVsZFZhbGlkYXRvciIsIkN1c3RvbUVsZW1lbnRWYWxpZGF0b3IiLCJtYXhMZW5ndGgiLCJwYXJzZUZsb2F0IiwibWluTGVuZ3RoIiwibWF4IiwibWluIiwicGF0dGVybiIsIm1hdGNoIiwiQ29tcG9uZW50cyIsIkdGX0NPTVBPTkVOVF9TTE9UX1RBR19OQU1FIiwiS0VZQ09ERVMiLCJET1dOIiwiTEVGVCIsIlJJR0hUIiwiVVAiLCJIT01FIiwiRU5EIiwiRU5URVIiLCJFU0NBUEUiLCJUQUIiLCJTSElGVCIsIkNUUkwiLCJTUEFDRSIsIlBBR0VfVVAiLCJQQUdFX0RPV04iLCJMRVRURVJfQSIsImNvbXBvbmVudHMiLCJpbXBvcnRlZCIsImNhY2hlZENvbXBvbmVudHMiLCJpbXBvcnRTY3JpcHQiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJsb2FkSFRNTCIsImxvYWRSZXNvdXJjZSIsInRoZW4iLCJyZXN1bHQiLCJ3aGVuRGVmaW5lZCIsInByb21pc2UiLCJkZWZpbmVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkZWZpbmVDdXN0b21FbGVtZW50IiwiY3VzdG9tRWxlbWVudHMiLCJnZXQiLCJkZWZpbmUiLCJpbXBvcnRDb21wb25lbnQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZW1vdmVTbGFzaGVzIiwicGF0aCIsInJlbW92ZU5ld0xpbmVzIiwidHJpbSIsInJlbW92ZUNvcHlyaWdodE5vdGljZSIsInJlc29sdmVXaXRoVGVtcGxhdGUiLCJjb21wb25lbnQiLCJpc1JlbmRlcmVkIiwiX19vcHRpbWl6ZSIsImdldEVsZW1lbnRCeUlkIiwiZmlyc3RDaGlsZCIsImlubmVySFRNTCIsInJlcXVlc3RSZXNvdXJjZSIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9ubG9hZCIsInJlc3BvbnNlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsIm9wZW4iLCJmaW5kU2xvdHMiLCJwYXJlbnRFbE5hbWUiLCJjaGlsZHJlbiIsImNoaWxkIiwiY2hpbGRUYWdOYW1lIiwiZGF0YXNldCIsInNsb3QiLCJyZXBsYWNlU2xvdHMiLCJmYWtlUm9vdCIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImxhc3RDaGlsZCIsInBhcmVudE5vZGUiLCJ0cmFuc2ZlckNvbnRlbnQiLCJub2RlcyIsIm5vZGUiLCJyZW5kZXJPbmNlIiwicmVuZGVyIiwidGVtcGxhdGVSb290IiwidGVtcGxhdGVTbG90cyIsInVzZXJTbG90cyIsInVzZXJTbG90c0tleXMiLCJrZXlzIiwidXNlclNsb3QiLCJ0cmFuc2ZlckNoaWxkcmVuIiwidGFyZ2V0Q29udGFpbmVyU2VsZWN0b3IiLCJjb250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwiZm9yRWFjaCIsIndhaXRGb3JGcmFtZXMiLCJjb3VudCIsImlzQnJvd3NlckdhbWVmYWNlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiQ29tcG9uZW50U2xvdCIsInN1cGVyIiwib3JpZ2luYWxBcHBlbmRDaGlsZCIsIm9yaWdpbmFsSW5zZXJ0QmVmb3JlIiwiaW5zZXJ0QmVmb3JlIiwib3JpZ2luYWxSZXBsYWNlQ2hpbGQiLCJyZXBsYWNlQ2hpbGQiLCJvcmlnaW5hbFJlbW92ZUNoaWxkIiwiZGlzcHRhY2hTbG90Q2hhbmdlIiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJuZXdDaGlsZCIsIm9sZENoaWxkIiwicmVwbGFjZWROb2RlIiwicmVtb3ZlZE5vZGUiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJvcmllbnRhdGlvblVuaXRzTmFtZXMiLCJNYXAiLCJtb3VzZUF4aXNDb29yZHMiLCJzaXplIiwicG9zaXRpb24iLCJjb29yZGluYXRlIiwib2Zmc2V0IiwiT1JJRU5UQVRJT05TIiwidmFsdWVUb1BlcmNlbnQiLCJjbGFtcCIsInZhbCIsImNoZWNrT3JpZW50YXRpb24iLCJvcmllbnRhdGlvbiIsInZhbGlkYXRlQ3VzdG9tSGFuZGxlIiwiY3VzdG9tSGFuZGxlU2VsZWN0b3IiLCJjdXN0b21IYW5kbGVFbGVtZW50IiwiY3VzdG9tSGFuZGxlVmFyaWFibGVOYW1lcyIsIlNJTkdMRSIsIlJhbmdlU2xpZGVyQmFzZSIsInJhbmdlc2xpZGVyIiwiVHlwZUVycm9yIiwib25Nb3VzZVVwIiwiaW5pdCIsInRodW1iIiwicmVtb3ZlQXR0cmlidXRlIiwic3RhdGUiLCJncmlkIiwidmFsdWVzIiwic3RlcCIsImN1c3RvbUhhbmRsZSIsImN1c3RvbUhhbmRsZUxlZnQiLCJjdXN0b21IYW5kbGVSaWdodCIsImF0dHJpYnV0ZUNoYW5nZWQiLCJvbGRWYWx1ZSIsInVwZGF0ZUF0dHJpYnV0ZVN0YXRlIiwidXBkYXRlVmFsdWVzU3RhdGUiLCJ1cGRhdGVNaW5NYXhTdGF0ZSIsInVwZGF0ZVN0ZXBTdGF0ZSIsInVwZGF0ZVZhbHVlU3RhdGUiLCJ1cGRhdGVUaHVtYlN0YXRlIiwidXBkYXRlR3JpZFN0YXRlIiwidXBkYXRlQ3VzdG9tSGFuZGxlU3RhdGUiLCJpbml0Q3VzdG9tSGFuZGxlcyIsInVwZGF0ZVNsaWRlclBvc2l0aW9uV2l0aEN1cnJlbnRWYWx1ZSIsIm5ld1ZhbHVlIiwibnVtZXJpY1ZhbHVlIiwiaXNOYU4iLCJ0b2dnbGVHcmlkIiwidG9nZ2xlVGh1bWIiLCJ2aXNpYmxlIiwidGh1bWJFbGVtZW50IiwiZWwiLCJyYW5nZXNsaWRlckVsIiwic2V0VGh1bWIiLCJidWlsZEdyaWQiLCJsb2FkVGVtcGxhdGUiLCJnZXRUZW1wbGF0ZSIsImNhdGNoIiwiZXJyIiwic2V0dXAiLCJzZXR1cFNsaWRlciIsIndyYXBwZXIiLCJiYXIiLCJzZXRNaW5BbmRNYXgiLCJzZXRIYW5kbGVWYWx1ZXMiLCJ1cGRhdGVDdXN0b21IYW5kbGVzIiwiYXR0YWNoRXZlbnRMaXN0ZW5lciIsImluaXRTbGlkZXJTdGF0ZSIsInVuaXRzIiwiZ2V0SGFuZGxlUGVyY2VudCIsInJhbmdlc2xpZGVyUmVjdCIsImdldFJhbmdlU2xpZGVyU2l6ZSIsIm1vdXNlQ29vcmRzIiwiY3JlYXRlR3JpZFBvbCIsInBvbENvbnRhaW5lciIsImNsYXNzTGlzdCIsImFkZCIsImFkZEN1c3RvbUhhbmRsZXMiLCJjdXN0b21IYW5kbGVTZWxlY3RvcnMiLCJjdXN0b21IYW5kbGVWYXJpYWJsZU5hbWUiLCJidWlsZFRodW1iIiwidGV4dENvbnRlbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjYWxjdWxhdGVIYW5kbGVWYWx1ZSIsInBlcmNlbnQiLCJwYXJzZUludCIsIm9uTW91c2VEb3duIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uTW91c2VNb3ZlIiwiU2luZ2xlSGFuZGxlUmFuZ2VTbGlkZXJCYXNlIiwiZ2V0Q3VycmVudFZhbHVlUGVyY2VudCIsInVwZGF0ZVNsaWRlclBvc2l0aW9uIiwiaGFuZGxlIiwic2V0QmFyU3R5bGVzIiwic3R5bGUiLCJzZXRUaHVtYlBvc2l0aW9uIiwiQmFzaWNSYW5nZVNsaWRlciIsImNvbm5lY3RlZENhbGxiYWNrIiwiZGVmYXVsdFZhbHVlIiwidmFsdWVBdHRyIiwibnVtYmVyT2ZQb2xzIiwicm91bmQiLCJ0b0ZpeGVkIiwicGVyY2VudFN0ZXAiLCJkZXRhaWwiLCJWYWx1ZXNSYW5nZVNsaWRlciIsInZhbHVlc0FycmF5IiwiZmluZEluZGV4IiwiZW50cnkiLCJUd29IYW5kbGVzUmFuZ2VTbGlkZXJCYXNlIiwiaW5kZXgiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2xhbXBUd29IYW5kbGVzIiwiY2xhbXBSYW5nZSIsImhhbmRsZVplcm9Qb3NpdGlvbiIsImhhbmRsZU9uZVBvc2l0aW9uIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvSGFuZGxlcyIsImZpcnN0SGFuZGxlUG9zaXRpb25WYWx1ZSIsInNlY29uZEhhbmRsZVBvc2l0aW9uVmFsdWUiLCJhYnMiLCJkaXN0YW5jZUJldHdlZW5IYW5kbGVzIiwiZ2V0Q2xvc2VzdEhhbmRsZVRvTW91c2VQb3NpdGlvbiIsImRpc3RhbmNlIiwicG9zIiwicmV2ZXJzZSIsImFjdGl2ZUhhbmRsZSIsIkJhc2ljVHdvSGFuZGxlc1JhbmdlU2xpZGVyIiwicCIsIlJBTkdFX1NMSURFUlNfVFlQRVMiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJyYW5nZXNsaWRlck9iamVjdCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsInVwZGF0ZVR3b0hhbmRsZXNTdGF0ZSIsInVwZGF0ZU9yaWVudGF0aW9uU3RhdGUiLCJ1cGRhdGVTdGF0ZSIsInJlUmVuZGVyIiwidHdvSGFuZGxlcyIsImdldFJhbmdlU2xpZGVyVHlwZSIsImdldFJhbmdlU2xpZGVyIiwiaW5pdFN0YXRlIiwiZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJzdXBwb3J0IiwiU3ltYm9sIiwiQmxvYiIsInZpZXdDbGFzc2VzIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIm9iaiIsIm5vcm1hbGl6ZU5hbWUiLCJub3JtYWxpemVWYWx1ZSIsIml0ZXJhdG9yRm9yIiwiaXRlbXMiLCJpdGVyYXRvciIsIm5leHQiLCJzaGlmdCIsImRvbmUiLCJIZWFkZXJzIiwiaGVhZGVycyIsIm1hcCIsImFwcGVuZCIsImhlYWRlciIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25zdW1lZCIsImJvZHlVc2VkIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImJ1ZmZlckNsb25lIiwiYnVmIiwidmlldyIsIlVpbnQ4QXJyYXkiLCJieXRlTGVuZ3RoIiwic2V0IiwiYnVmZmVyIiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsImlzUHJvdG90eXBlT2YiLCJfYm9keUJsb2IiLCJGb3JtRGF0YSIsIl9ib2R5Rm9ybURhdGEiLCJVUkxTZWFyY2hQYXJhbXMiLCJEYXRhVmlldyIsIl9ib2R5QXJyYXlCdWZmZXIiLCJyZWplY3RlZCIsImFycmF5QnVmZmVyIiwiYnl0ZU9mZnNldCIsInJlYWRBc1RleHQiLCJjaGFycyIsImZyb21DaGFyQ29kZSIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImZvcm1EYXRhIiwiZGVjb2RlIiwianNvbiIsImhhcyIsInRoaXNBcmciLCJlbnRyaWVzIiwibWV0aG9kcyIsIlJlcXVlc3QiLCJpbnB1dCIsIm1ldGhvZCIsInVwY2FzZWQiLCJjcmVkZW50aWFscyIsIm1vZGUiLCJzaWduYWwiLCJ0b1VwcGVyQ2FzZSIsInJlZmVycmVyIiwiY2FjaGUiLCJyZVBhcmFtU2VhcmNoIiwiZ2V0VGltZSIsImZvcm0iLCJieXRlcyIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJvayIsInN0YXR1c1RleHQiLCJjbG9uZSIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJET01FeGNlcHRpb24iLCJzdGFjayIsImNyZWF0ZSIsImZldGNoIiwiYWJvcnRlZCIsInhociIsImFib3J0WGhyIiwiYWJvcnQiLCJyYXdIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibGluZSIsInBhcnRzIiwicmVzcG9uc2VVUkwiLCJzZXRUaW1lb3V0Iiwib250aW1lb3V0Iiwib25hYm9ydCIsImZpeFVybCIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicG9seWZpbGwiXSwic291cmNlUm9vdCI6IiJ9