var draggable=(()=>{var n=(o,t)=>()=>(o&&(t=o(o=0)),t);var v=(o,t)=>()=>(t||o((t={exports:{}}).exports,t),t.exports);var c,f,p=n(()=>{c=class{constructor(t){this.draggableElements=[],this.draggedElement=null,this.enabled=!1,this.onMouseDown=this.onMouseDown.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.options=t}get draggedItemIndex(){return[...this.draggableElements].indexOf(this.draggedElement)}get bodyScrollOffset(){return{x:document.body.scrollLeft,y:document.body.scrollTop}}setPointerOffset(t,e,s){let{x:d,y:l}=s.getBoundingClientRect();this.offset={x:t-d,y:e-l}}},f=c});function h(o,t,e){return Math.min(Math.max(o,t),e)}function x(){return(Math.random()+1).toString(36).substring(7)}var y=n(()=>{});var r,i,g=n(()=>{r=class{constructor(){this.actions=[],this.keyboardFunctions=[],this.gamepadFunctions=[]}init(){window._IM||(window._IM=new r)}getKeys(t){return _IM.keyboardFunctions.filter(e=>e.keys.every(s=>t.includes(s)))}getKeysIndex(t){return _IM.keyboardFunctions.findIndex(e=>e.keys.every(s=>t.includes(s)))}getGamepadAction(t){return _IM.gamepadFunctions.find(e=>e.actions.every(s=>t.includes(s)))}getGamepadActionIndex(t){return _IM.gamepadFunctions.findIndex(e=>e.actions.every(s=>t.includes(s)))}getAction(t){return _IM.actions.find(e=>e.name===t)}getActionIndex(t){return _IM.actions.findIndex(e=>e.name===t)}},i=new r});var m,a,M=n(()=>{g();m=class{register(t,e){if(i.getAction(t))return console.error(`The following action "${t}" is already registered!`);_IM.actions.push({name:t,callback:e})}remove(t){let e=i.getActionIndex(t);if(e===-1)return console.error(`${t} is not a registered action!`);_IM.actions.splice(e,1)}execute(t,e){let s=i.getAction(t);if(!s)return console.error(`${t} is not a registered action!`);s.callback(e)}},a=new m});var w,u,b,E=n(()=>{p();y();M();w=["x","y"],u=class extends f{constructor(t){super(t);let e=x();this.actionName=`drag-around-${e}`,this.restrict={top:0,left:0,right:1/0,bottom:1/0},this.init()}init(){if(!this.enabled){if(this.draggableElements=document.querySelectorAll(this.options.element),this.draggableElements.length===0)return console.error(`${this.options.element} is not a valid element selector.`);this.draggableElements.forEach(t=>t.addEventListener("mousedown",this.onMouseDown)),this.registerDragActions(),this.enabled=!0}}deinit(){!this.enabled||(this.enabled=!1,this.draggableElements.forEach(t=>t.removeEventListener("mousedown"),this.onMouseDown),this.removeDragActions())}onMouseDown(t){this.draggedElement=t.currentTarget,this.draggedElement.style.position="absolute",this.elementRect=this.draggedElement.getBoundingClientRect(),this.setRestriction(),this.setPointerOffset(t.clientX,t.clientY,this.draggedElement),a.execute(this.actionName,{x:t.clientX+this.bodyScrollOffset.x-this.offset.x,y:t.clientY+this.bodyScrollOffset.y-this.offset.y,index:this.draggedItemIndex}),this.options.dragClass&&this.draggedElement.classList.add(this.options.dragClass),this.options.onDragStart&&this.options.onDragStart(this.draggedElement),document.addEventListener("mousemove",this.onMouseMove),document.addEventListener("mouseup",this.onMouseUp)}onMouseMove(t){a.execute(this.actionName,{x:t.clientX+this.bodyScrollOffset.x-this.offset.x,y:t.clientY+this.bodyScrollOffset.y-this.offset.y,index:this.draggedItemIndex})}onMouseUp(){document.removeEventListener("mousemove",this.onMouseMove),document.removeEventListener("mouseup",this.onMouseUp),this.options.onDragEnd&&this.options.onDragEnd(this.draggedElement),this.options.dragClass&&this.draggedElement.classList.remove(this.options.dragClass),this.draggedElement=null}registerDragActions(){a.register(this.actionName,({x:t,y:e,index:s})=>{if(!this.draggableElements[s])return console.error(`There is no draggable element at index ${s}`);this.options.lockAxis&&w.includes(this.options.lockAxis)&&(t=this.options.lockAxis==="y"?this.elementRect.x:t,e=this.options.lockAxis==="x"?this.elementRect.y:e),this.draggableElements[s].style.left=`${h(t,this.restrict.left,this.restrict.right)}px`,this.draggableElements[s].style.top=`${h(e,this.restrict.top,this.restrict.bottom)}px`,this.options.onDragMove&&this.options.onDragMove({x:t,y:e})})}removeDragActions(){a.remove(this.actionName)}setRestriction(){if(!this.options.restrictTo)return;let t=document.querySelector(this.options.restrictTo);if(!t)return console.error(`The element ${this.options.restrictTo} you trying to restrict dragging to is not a valid element`);let{x:e,y:s,height:d,width:l}=t.getBoundingClientRect();this.restrict={top:s,left:e,right:l+e-this.elementRect.width,bottom:d+s-this.elementRect.height}}},b=u});var A=v((U,I)=>{E();g();i.init();I.exports=b});return A();})();
//# sourceMappingURL=draggable.min.js.map
