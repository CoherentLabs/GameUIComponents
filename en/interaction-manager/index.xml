<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Interaction Manager on</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/</link><description>Recent content in Interaction Manager on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/index.xml" rel="self" type="application/rss+xml"/><item><title>Installation</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/installation/</guid><description>The coherent-gameface-interaction-manager is distributed as both ESM and UMD bundles.
Using NPM # To install it you can run
npm install coherent-gameface-interaction-manager and then do
import * as interactionManager from 'coherent-gameface-interaction-manager'; or you can also link it in your HTML directly
&amp;lt;script src=&amp;quot;node_modules/coherent-gameface-interaction-manager/dist/interaction-manager.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Using a CDN # You can either download the coherent-gameface-interaction-manager from UNPKG or jsDelivr
and then include it to your HTML
&amp;lt;script src=&amp;quot;interaction-manager.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; or you can include it directly as a CDN link</description></item><item><title>Introduction</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/introduction/</guid><description>What is the coherent-gameface-interaction-manager? # The coherent-gameface-interaction-manager is a JS library for the most common UI interactions.
The library&amp;rsquo;s aim is to provide an easy implementation for things like gamepad controls, spatial-navigation, drag and drop, resizing, rotating and panzoom.
Getting Started # To get started, you will first need to install the coherent-gameface-interaction-manager after that you can create different interactions based on your project needs.
For example to set up a draggable object, you just need to do:</description></item><item><title>Actions</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/actions/</guid><description>Allows to register actions that can be reused throughout your code.
register(action, callback) # Registers the action
actions.register('action-to-register', () =&amp;gt; {}) action # Type:
type action = string The name of the action you want to register.
callback # Type:
type callback = (value) =&amp;gt; {} The callback to be executed on this action. The arguments for the callback are provided from the execute method.
execute(action, value) # Executes an action</description></item><item><title>Keyboard</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/keyboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/keyboard/</guid><description>The keyboard object provides an easy to use way to set up keys to perform different actions in your UI. It also allows you to create key combinations with ease. It also provides two properties for adding and removing key actions
.on([keyAction]) # Sets up a key action. You can add multiple actions with a single .on call.
interactionManager.keyboard.on([keyAction]) keyAction # keys # Type:
type keys = string[] | number[] The keys array are the keys that will trigger the callback.</description></item><item><title>Gamepad</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/gamepad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/gamepad/</guid><description>The gamepad object allows for easier gamepad set up. It uses the Gamepad API to create helper functions to listen for button presses or joystick movement.
To start listening for connected gamepads, you first need to enable it. To do that you need to set the following:
gamepad.enabled = true; to disable the gamepad, just change the enabled property to false.
.on([gamepadAction]) # The .on call allows you to set up listeners for your gamepad actions.</description></item><item><title>Spatial Navigation</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/spatial-navigation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/spatial-navigation/</guid><description>A JavaScript-based implementation for Spatial Navigation with gamepad support
Basic implementation # spatialNavigation.init(['.square']); Click on an element and move the focus with your keyboard arrow keys:
If you add a disabled property to a navigatable element it will skip it when moving the focus
API # init([navigatableElement]) # Initializes the spatial navigation.
navigatableElement # The navigatableElement can either be a string with an element selector.
spatialNavigation.init(['.square']); or a navigatableArea object</description></item><item><title>Draggable</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/draggable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/draggable/</guid><description>Allows you to drag around elements on the screen.
Usage # new draggable(draggableOptions); Basic implementation # const square = new draggable({ element: '.square' });
dragableOptions # element # Type:
type element = string The element selector.
restrictTo # Type:
type restrictTo = string; Restricts the dragged element to another element. That way the dragged element won&amp;rsquo;t go out of the other element bounds.
Example
const square = new draggable({ element: '.</description></item><item><title>Dropzone</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/dropzone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/dropzone/</guid><description>Allows you to drag around elements on the screen.
Usage # new dropzone(dropzoneOptions); Basic implementation # const square = new dropzone({ element: '.square', dropzones: ['.dropzone'] });
dropzoneOptions # element # Type:
type element = string The element selector.
dropzones # Type:
type dropzones = string[] Array of dropzones that the element can be dropped into.
dragClass # Type:
type dragClass = string Class to be added to the dragged element.</description></item><item><title>Resize</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/resize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/resize/</guid><description>Allows you to resize an element.
Usage # new resize(resizeOptions); Basic implementation # const square = new resize({ element: '.square' });
resizeOptions # element # Type:
type element = string The element selector.
edgeWidth # Type:
type edgeWidth = number default: 5
The width of the edge that you can grab.
widthMin # Type:
type widthMin = number default: 50
The minimum width that element can be resized to.</description></item><item><title>Rotate</title><link>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/rotate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://CoherentLabs.github.io/GameUIComponents/en/interaction-manager/rotate/</guid><description>Allows you to rotate an element.
Usage # new rotate(rotateOptions) Basic implementation # const circle = new rotate({ element: '.circle1' });
rotateOptions # element # Type:
type element = string The element selector.
snapAngle # Type:
type snapAngle = number default: 1
The angle that the rotation snaps to.
onRotation # Type:
type onRotation = (angle) =&amp;gt; {} Executes when the element rotates.
Actions # You are able to rotate elements using actions.</description></item></channel></rss>