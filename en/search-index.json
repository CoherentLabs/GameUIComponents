[{"id":0,"href":"/GameUIComponents/en/interaction-manager/installation/","title":"Installation","content":"The coherent-gameface-interaction-manager is distributed as both ESM and UMD bundles.\nUsing NPM # To install it you can run\nnpm install coherent-gameface-interaction-manager  and then do\nimport * as interactionManager from 'coherent-gameface-interaction-manager';  or you can also link it in your HTML directly\n\u0026lt;script src=\u0026quot;node_modules/coherent-gameface-interaction-manager/dist/interaction-manager.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  Using a CDN # You can either download the coherent-gameface-interaction-manager from UNPKG or jsDelivr\nand then include it to your HTML\n\u0026lt;script src=\u0026quot;interaction-manager.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  or you can include it directly as a CDN link\n\u0026lt;script src=\u0026quot;https://unpkg.com/coherent-gameface-interaction-manager/dist/interaction-manager.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  ❗  If you plan on using the coherent-gameface-interaction-manager as a CDN link inside your project you need to make sure it will run with internet connection.   "},{"id":1,"href":"/GameUIComponents/en/interaction-manager/introduction/","title":"Introduction","content":"What is the coherent-gameface-interaction-manager? # The coherent-gameface-interaction-manager is a JS library for the most common UI interactions.\nThe library\u0026rsquo;s aim is to provide an easy implementation for things like gamepad controls, spatial-navigation, drag and drop, resizing, rotating and panzoom.\nGetting Started # To get started, you will first need to install the coherent-gameface-interaction-manager after that you can create different interactions based on your project needs.\nFor example to set up a draggable object, you just need to do:\nconst square = new interactionManager.draggable({element: '.square'})  Features # The coherent-gameface-interaction-manager supports the following features:\n Easy to set up and use keyboard combinations. Quick gamepad setup with button and joystick handling. Register and execute actions anywhere in your code. Fast way to share the same behavior between multiple inputs. Spatial navigation with different navigatable areas and gamepad support. Drag and drop with separate option for dropzones Resize elements Rotate elements Pan and zoom  All of these features can be loaded individually from the coherent-gameface-interaction-manager library.\nimport {keyboard, gamepad, actions, spatialNavigation, draggable, dropzone, resize, rotate, zoom} from 'coherent-gameface-interaction-manager`  You can also download and load them as individual scripts\n\u0026lt;script src=\u0026quot;coherent-gameface-interaction-manager/dist/keyboard.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  "},{"id":2,"href":"/GameUIComponents/en/interaction-manager/actions/","title":"Actions","content":"Allows to register actions that can be reused throughout your code.\nregister(action, callback) # Registers the action\nactions.register('action-to-register', () =\u0026gt; {})  action # Type:\ntype action = string  The name of the action you want to register.\ncallback # Type:\ntype callback = (value) =\u0026gt; {}  The callback to be executed on this action. The arguments for the callback are provided from the execute method.\nexecute(action, value) # Executes an action\naction # Type:\ntype action = string  The name of the action you want to execute.\nvalue # Type:\ntype value = any  Provides a value to the callback.\nremove(action) # Removes the action.\naction # Type:\ntype action = string  The name of the action you want to remove.\n"},{"id":3,"href":"/GameUIComponents/en/interaction-manager/keyboard/","title":"Keyboard","content":"The keyboard object provides an easy to use way to set up keys to perform different actions in your UI. It also allows you to create key combinations with ease. It also provides two properties for adding and removing key actions\n.on([keyAction]) # Sets up a key action. You can add multiple actions with a single .on call.\ninteractionManager.keyboard.on([keyAction])  keyAction # keys # Type:\ntype keys = string[] | number[]  The keys array are the keys that will trigger the callback. Putting multiple keys will treat them as a key combination.\nFor example, the following code will trigger the callback when pressing \u0026lsquo;A\u0026rsquo;, \u0026lsquo;B\u0026rsquo; and \u0026lsquo;C\u0026rsquo; keys on the keyboard at the same time\nkeyboard.on({ keys: ['A', 'B', 'C'], callback: () =\u0026gt; {}, })  Apart from using strings for keys, you can also use keycodes or the \u0026lsquo;KEYS\u0026rsquo; global object.\nkeyboard.on({ keys: [65, 66, 67], callback: () =\u0026gt; {}, })  keyboard.on({ keys: [KEYS.A, KEYS.B, KEYS.C], callback: () =\u0026gt; {}, })  callback # Type:\ntype callback = (() =\u0026gt; void) | string  The callback property is the function that will be triggered when the keys from the keys array are pressed.\nYou can either write your function inside the object\nkeyboard.on({ keys: ['A', 'B', 'C'], callback: () =\u0026gt; doSomething(), });  or if you have a registered action, you can pass it here\nkeyboard.on({ keys: ['A', 'B', 'C'], callback: 'registered-action', });  type # Type:\ntype type = ('press' | 'hold' | 'lift)  The type property shows the type of key interaction that the callback will be triggered on.\nThis example will trigger the callback on a key press. If you press and hold the key it will only trigger once.\nkeyboard.on({ keys: ['A', 'B', 'C'], callback: () =\u0026gt; doSomething(), type: 'press' });  This example will trigger the callback when you hold the key. If you press the key and release it immediately it won\u0026rsquo;t trigger anything.\nkeyboard.on({ keys: ['A', 'B', 'C'], callback: () =\u0026gt; doSomething(), type: 'hold' });  This example will trigger the callback when you lift your finger from the key. The callback will only trigger when you release the keys.\nkeyboard.on({ keys: ['A', 'B', 'C'], callback: () =\u0026gt; doSomething(), type: 'lift' });  .off([keys]) # Removes an already set up key combination.\nkeys # The keys array is an array of the keys involved in a key combination that you want to remove\nFor example if you have set up to use the \u0026lsquo;A\u0026rsquo;, \u0026lsquo;B\u0026rsquo; and \u0026lsquo;C\u0026rsquo; keys in a combination, you can remove the action by doing:\nkeyboard.off(['A', 'B', 'C'])  If you have added the key combination as keycodes or using the KEYS global object you need to remove them the same way:\nkeyboard.off([65, 66, 67])  keyboard.off([KEYS.A, KEYS.B, KEYS.C])  "},{"id":4,"href":"/GameUIComponents/en/interaction-manager/gamepad/","title":"Gamepad","content":"The gamepad object allows for easier gamepad set up. It uses the Gamepad API to create helper functions to listen for button presses or joystick movement.\nTo start listening for connected gamepads, you first need to enable it. To do that you need to set the following:\ngamepad.enabled = true;  to disable the gamepad, just change the enabled property to false.\n.on([gamepadAction]) # The .on call allows you to set up listeners for your gamepad actions.\ngamepadAction # actions # Type:\ntype actions = string[] | number[]  The actions array is an array of buttons or joystick actions that will trigger a callback.\nYou can use either the button number or an alias for the buttons. For the users convenience there are playstation and xbox specific aliases available.\n   Number Generic Alias Playstation Alias Xbox Alias     0 face-button-down playstation.x xbox.a   1 face-button-right playstation.circle xbox.b   2 face-button-left playstation.square xbox.x   3 face-button-top playstation.triangle xbox.y   4 left-sholder playstation.l1 xbox.lb   5 right-sholder playstation.r1 xbox.rb   6 left-sholder-bottom playstation.l2 xbox.lt   7 right-sholder-bottom playstation.r2 xbox.rt   8 select playstation.share xbox.view   9 start playstation.options xbox.menu   10 left-analogue-stick playstation.l3 xbox.left-thumbstick   11 right-analogue-stick playstation.r3 xbox.right-thumbstick   12 pad-up playstation.d-pad-up xbox.d-pad-up   13 pad-down playstation.d-pad-down xbox.d-pad-down   14 pad-left playstation.d-pad-left xbox.d-pad-left   15 pad-right playstation.d-pad-right xbox.d-pad-right   16 center-button playstation.center xbox.center    For example:\ngamepad.on({ actions: ['pad-down', 'right-shoulder'], callback: () =\u0026gt; {}, });  will trigger the callback when the down pad and the right shoulder button are pressed at the same time.\nYou can also use joystick aliases to trigger callbacks on specific joystick movements.\nFor example:\ngamepad.on({ actions: ['left.joystick'], callback: () =\u0026gt; {}, });  will trigger the callback when the left joystick moves.\nThere are also aliases for specific directions available:\ngamepad.on({ actions: ['left.joystick.down'], callback: () =\u0026gt; {}, });  will trigger the callback when the left joystick is moved down.\nThe available aliases are\n[ 'right.joystick', 'left.joystick', 'left.joystick.down', 'left.joystick.up', 'left.joystick.left', 'left.joystick.right', 'right.joystick.down', 'right.joystick.up', 'right.joystick.left', 'right.joystick.right', ]  ❗  Currently it's not possible to combine a joystick action with another joystick or button action   callback # Type:\ntype callback = ([{pressed, touched, value}]) =\u0026gt; {} | ([axisX, axisY]) =\u0026gt; {} | string  The function that will execute when a gamepad action is triggered.\ngamepad.on({ actions: ['face-button-down'], callback: ([button]) =\u0026gt; doSomething(button.pressed, button.touched, button.value), });  gamepad.on({ actions: ['left.joystick'], callback: ([axisX, axisY]) =\u0026gt; doSomething(axisX, axisY), });  If you are using an action for buttons, you can get the GamepadButton objects for each button that is pressed. If you are using a joystick action, you can get the x and y coordinates of the joystick.\nIf you already have a registered action you can use it instead of a function:\ngamepad.on({ actions: ['face-button-down'], callback: 'registered-action', });  .off([actions]) # Removes a registered gamepad action.\ngamepad.off(['left.joystick']);  You will need to provide the exact actions you have registered in order to remove them.\nFor example if you have registered an action using a playstation alias, you will also need to remove it using the same alias.\nlessSensitive # Type:\ntype lessSensitive = boolean  default: false\nIf you want to make the joystick less sensitive to movement you can enable the lessSensitive option\ngamepad.lessSensitive = true;  "},{"id":5,"href":"/GameUIComponents/en/interaction-manager/spatial-navigation/","title":"Spatial Navigation","content":"A JavaScript-based implementation for Spatial Navigation with gamepad support\nBasic implementation # spatialNavigation.init(['.square']);  Click on an element and move the focus with your keyboard arrow keys: \nIf you add a disabled property to a navigatable element it will skip it when moving the focus\n\nAPI # init([navigatableElement]) # Initializes the spatial navigation.\nnavigatableElement # The navigatableElement can either be a string with a element selector\nspatialNavigation.init(['.square']);  or a navigatableArea object\nspatialNavigation.init([ { area: 'square-1', elements: ['.square1'] }, { area: 'square-2', elements: ['.square2'] }, ]);  This will create different areas to separate the navigation. If you pass only a selector, it will be saved to the default area.\n\narea # Type:\ntype area = string  The name of the are you want to be navigatable\nelements # Type:\ntype elements = string[]  An array of the elements selectors that will be navigatable in this area.\n.deinit() # Removes the spatial navigation, listeners and actions.\nadd([navigatableElements]) # The same as .init() but only adds elements to areas and new areas. Use it after initialization.\nspatialNavigation.add([{ area: 'area-1', elements: ['.element'] }]);  remove(area) # type area = string  default='default'\nRemove all of the elements from an area. It uses the area name as an argument, if you don\u0026rsquo;t pass any arguments it will remove the elements from the default area.\nspatialNavigation.remove('area-1');  focusFirst(area) # type area = string  default='default'\nFocuses on the first element of an area.\nfocusLast(area) # type area = string  default='default'\nFocuses on the last element of an area.\nswitchArea(area) # type area = string  Switches to another area and focuses on the first element.\nclearFocus() # Unfocuses the currently focused element in a navigatable area.\nActions # The spatial-navigation registers actions that move the focus. You can use these from your code directly with\naction.execute('move-focus-down'); // moves the focus down action.execute('move-focus-up'); // moves the focus up action.execute('move-focus-left'); // moves the focus left action.execute('move-focus-right'); // moves the focus right  "},{"id":6,"href":"/GameUIComponents/en/interaction-manager/draggable/","title":"Draggable","content":"Allows you to drag around elements on the screen.\nUsage # new draggable(draggableOptions);  Basic implementation # const square = new draggable({ element: '.square' });  \ndragableOptions # element # Type:\ntype element = string  The element selector.\nrestrictTo # Type:\ntype restrictTo = string;  Restricts the dragged element to another element. That way the dragged element won\u0026rsquo;t go out of the other element bounds.\nExample\nconst square = new draggable({ element: '.square', restrictTo: '.container' });  \ndragClass # Type:\ntype dragClass = string  Class to be added to the dragged element.\nlockAxis # Type:\ntype lockAxis = 'x' | 'y'  Locks the dragged element to either the x or y axis.\nExample\nconst square1 = new draggable({ element: '.square1', lockAxis: 'x' }); const square2 = new draggable({ element: '.square2', lockAxis: 'y' });  \nonDragStart # Type:\ntype onDragStart = () =\u0026gt; {}  Executes when you start dragging the element.\nonDragMove # Type:\ntype onDragMove = () =\u0026gt; {}  Executes when you move the dragged element.\nonDragEnd # Type:\ntype onDragEnd = () =\u0026gt; {}  Executes when you stop dragging the element.\nActions # You are able to drag elements using actions. Since every draggable action is unique you can do the following:\nconst element = new draggable({ element: '.square'}); actions.execute(element.actionName, {x: 100, y: 100, index: 0});  You will need to pass the x and y coordinates where you want the element to go and the index of the element.\n"},{"id":7,"href":"/GameUIComponents/en/interaction-manager/dropzone/","title":"Dropzone","content":"Allows you to drag around elements on the screen.\nUsage # new dropzone(dropzoneOptions);  Basic implementation # const square = new dropzone({ element: '.square', dropzones: ['.dropzone'] });  \ndropzoneOptions # element # Type:\ntype element = string  The element selector.\ndropzones # Type:\ntype dropzones = string[]  Array of dropzones that the element can be dropped into.\ndragClass # Type:\ntype dragClass = string  Class to be added to the dragged element.\ndropzoneActiveClass # Type:\ntype dropzoneActiveClass = string  Class to be added to the dropzone, whenever an element is dragged over it.\ndropType # Type:\ntype dropType = 'switch' | 'add' | 'shift' | 'none'  default: 'add'\nThe type of action to take, when you drop an element over a dropzone that already has elements inside.\n   Type Description     none Returns the dragged element to the initial position   switch Switches the dragged element with the element in the dropzone   add Adds the dragged element to the dropzone   shift Shifts the element to the nearest empty dropzone\u0026quot;    Example\nconst square = new dropzone({ element: '.square1', dropzones: ['.dropzone1'], dropType: 'add' }); const square1 = new dropzone({ element: '.square2', dropzones: ['.dropzone2'], dropType: 'none' }); const square2 = new dropzone({ element: '.square3', dropzones: ['.dropzone3'], dropType: 'switch' }); const square3 = new dropzone({ element: '.square4', dropzones: ['.dropzone4'], dropType: 'shift' });  \nonDragStart # Type:\ntype onDragStart = () =\u0026gt; {}  Executes when you start dragging the element.\nonDragMove # Type:\ntype onDragMove = () =\u0026gt; {}  Executes when you move the dragged element.\nonDragEnd # Type:\ntype onDragEnd = () =\u0026gt; {}  Executes when you stop dragging the element.\nonDropZoneLeave # Type:\ntype onDropZoneLeave = () =\u0026gt; {}  Executes when you drag an element out of a a dropzone\nonDropZoneEnter # Type:\ntype onDropZoneEnter = () =\u0026gt; {}  Executes when you drag an element over a dropzone\nActions # You are able to drag elements using actions. Since every dropzone action is unique you can do the following:\nconst element = new dropzone({ element: '.square', dropzones: ['.dropzone'] }); actions.execute(element.actionName, {x: 100, y: 100, index: 0});  You will need to pass the x and y coordinates where you want the element to go and the index of the element.\n"},{"id":8,"href":"/GameUIComponents/en/interaction-manager/resize/","title":"Resize","content":"Allows you to resize an element.\nUsage # new resize(resizeOptions);  Basic implementation # const square = new resize({ element: '.square' });  \nresizeOptions # element # Type:\ntype element = string  The element selector.\nedgeWidth # Type:\ntype edgeWidth = number  default: 5\nThe width of the edge that you can grab.\nwidthMin # Type:\ntype widthMin = number  default: 50\nThe minimum width that element can be resized to.\nwidthMax # Type:\ntype widthMax = number  default: window.innerWidth\nThe maximum width that element can be resized to.\nheightMin # Type:\ntype heightMin = number  default: 50\nThe minimum height that element can be resized to.\nheightMax # Type:\ntype heightMax = number  default: window.innerHeight\nThe maximum height that element can be resized to.\nonWidthChange # Type:\ntype onWidthChange = (width) =\u0026gt; {}  Executes when the element width changes\nonHeightChange # Type:\ntype onHeightChange = (height) =\u0026gt; {}  Executes when the element height changes.\nActions # You are able to resize elements using actions. Since every resize action is unique you can do the following:\nconst element = new resize({ element: '.square' }); actions.execute(element.heightAction, height); actions.execute(element.widthAction, width);  "},{"id":9,"href":"/GameUIComponents/en/interaction-manager/rotate/","title":"Rotate","content":"Allows you to rotate an element.\nUsage # new rotate(rotateOptions)  Basic implementation # const circle = new rotate({ element: '.circle1' });  \nrotateOptions # element # Type:\ntype element = string  The element selector.\nsnapAngle # Type:\ntype snapAngle = number  default: 1\nThe angle that the rotation snaps to.\nonRotation # Type:\ntype onRotation = (angle) =\u0026gt; {}  Executes when the element rotates.\nActions # You are able to rotate elements using actions. Since every rotate action is unique you can do the following:\nconst element = new rotate({ element: '.circle1' }); actions.execute(element.actionName, angle);  "},{"id":10,"href":"/GameUIComponents/en/interaction-manager/zoom/","title":"Pan and Zoom","content":"Allows you to zoom in on an element.\nUsage # new zoom(zoomOptions)  Basic implementation # const grid = new zoom({ element: '.grid' });  \nzoomOptions # element # Type:\ntype element = string  The element selector.\nminZoom # Type:\ntype minZoom = number  default: 0.1\nHow much you can zoom out of the element.\nmaxZoom # Type:\ntype maxZoom = number  default: Inifinity\nHow much you can zoom in on the element.\nzoomFactor # Type:\ntype zoomFactor = number  default: 0.1\nBy how much to zoom in or out of the element.\nonZoom # Type:\ntype onZoom = () =\u0026gt; {}  Executes when the element zooms in or out.\nActions # You are able to zoom elements using actions. Since every zoom action is unique you can do the following:\nconst element = new zoom({ element: '.grid' }); actions.execute(element.actionName, {x: 100, y: 100, zoomDirection: -1});  Where you need to provide the x and y coordinates of the element, where you want to zoom to and the zoomDirection which can be -1 for zoom out and 1 for zoom in.\n"},{"id":11,"href":"/GameUIComponents/en/","title":"Components for Game User Interface","content":"This is a suite of custom elements designed specifically for Gameface. All components can also be used in Google Chrome. You can preview them by starting the demo. You can serve the root directory and open the demo.html file using an http-server of your choice. Or use the default setup in the package. All components are npm packages available in the npm registry. Use npm i coherent-gameface-\u0026lt;component-name\u0026gt; to install any of them. You can also build them from source.\nRunning the demo # Navigate to the root directory and run:\nnpm install  This will install a webpack server as well as all other dependencies. After that run:\nnpm run build  This will build all components. After that run:\nnpm run start:demo  This will serve the files on http://localhost:8080. Load that url in the Gameface player or in Chrome and preview the components. You can change the port in the webpack.config.js file.\nSamples # The samples are more complex examples of how to create a complete user interface using the components. They are located in samples/user_interface. There are three pages - main, settings and shop. To run any of them navigate to their folder an run npm i to install the dependencies. After that load the *.html file in Chrome. Keep in mind that each page has a link to one of the others and if you haven\u0026rsquo;t installed the dependencies there, it will not work as expected. To avoid this make sure you execute npm i in all folders.\nAvailable Commands # These are the commands used to build and package the components.\n   Command Description Arguments Usage     rebuild Do a clean install of all dependencies and build everything. N/A npm run rebuild   build Build all components - create their demo, umd and cjs bundles. \u0026ndash;no-install -ni, \u0026ndash;library npm run build -- --no-install --library   build:demo Build only the demos of all components. N/A npm run build:demo   build:library Build only the components library. N/A npm run build:library   build:dev Build the components using only the local packages. Will install dependencies only from source, not the npm registry. N/A npm run build:dev   build:documentation Build the components, the demos and the documentation. \u0026ndash;rebuild, \u0026ndash;component npm run build:documentation -- --component checkbox, npm run build:documentation -- --rebuild   check:copyright Will check the files inside the components folder for copyright notice. N/A npm run check:copyright   add:copyright Will add copyright notice to files inside the components folder that are missing it. N/A npm run add:copyright   start:demo Serve the demo project. N/A npm run start:demo   test Start Karma server on localhost:\u0026lt;port\u0026gt;/debug.html N/A npm run test   test:Chrome Start Karma server and run the tests in Google Chrome. N/A npm run test:Chrome   pack Bundle the components to npm packages ready for publish. N/A npm run pack   pack:library Create npm package of the component library. N/A npm run pack:library   link Create links for all components to test with local packages only1. N/A npm run link   unlink Remove all global links that exist for components. To remove the local packages use npm run clean. N/A npm run link   clean Remove all existing bundles, packages and installed dependencies. N/A npm run clean    After you successfully execute npm run tests open the Gameface player or Chrome with \u0026ldquo;\u0026ndash;url=http://localhost:9876/debug.html\u0026rdquo; to see the tests running.\nBuilding from source # To build the components from this repository use the npm run build:dev command. This will:\n create symlinks for all components build all components and their demos - NPM will use the links to install the dependencies, not the public npm packages. This means that if a component depends on another, the dependency will be installed from the source, making it easy to test local changes. For example - the dropdown component depends on the scrollable container. If you make changes to the scrollable-container and run npm run build:dev you\u0026rsquo;ll be able to observe the changes that you did to the scrollable-container in the demo of dropdown, because it uses the local package created by the build:dev command. If you inspect the scrollable-container package located in the dropdown\u0026rsquo;s node_modules you\u0026rsquo;ll see that it is a symbolic link that references the source of the scrollable container located in the components folder.  The npm run build:dev command will build all components. If you are not changing all of them you don\u0026rsquo;t need to rebuild them every time. You can build individual components using the coherent game UI components CLI. This is a command line tool that enables you to create, build and watch for changes, making the development iterations faster and easier. You can read more about it in the documentation.\nAfter you install it, navigate to a component, for example components/dropdown and run: coherent-guic-cli build Make sure you\u0026rsquo;ve installed the dependencies before that using either npm run build:dev, npm i or npm run link Refer to the commands table for more info on each command.\nCreating new components # All components are npm modules. Your component doesn\u0026rsquo;t have to be an npm module. If you need to use it in your project only, you can skip the steps which make a component an npm module. However if at some point you decide that you want to make your component an npm module - follow the steps below to see how to do it.\nStructure of a Component # All Gameface JavaScript components are custom HTML elements. Each component has:\n a JavaScript source file - the custom element\u0026rsquo;s definition; where all the logic is implemented a JavaScript index file - the entry file an HTML file - the component\u0026rsquo;s template; a CSS file - the component\u0026rsquo;s styles a package.json file a README markdown file - short documentation explaining what the component does and how it\u0026rsquo;s used a demo folder - folder containing an example of the component  Using without bundling # If you don\u0026rsquo;t want to add your component to the GameUIComponent suite you can use it without building and packaging it as npm module. However, you\u0026rsquo;ll still have to use the components library as dependency. Initialize an npm project using\nnpm init  and install the components library:\nnpm i coherent-gameface-components  After that create an index.html and index.js files. Import the components library and the component\u0026rsquo;s definition file using script tag:\n\u0026lt;script src=\u0026quot;node_modules/coherent-gameface-components/umd/components.development.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;script.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  Add the custom component to the page:\n\u0026lt;gameface-checkbox\u0026gt;\u0026lt;/\u0026lt;gameface-checkbox\u0026gt;  The JavaScript definition is a simple class which extends the HTMLElemnt. The template is loaded using XHR. The url property of the component class shows the path to the template html file. Use the  tags to import style files. Use the loadResource method to load the template. When the template is loaded you can render the component.\nclass Checkbox extends HTMLElement { constructor() { super(); this.url = '/components/checkbox/template.html'; } connectedCallback() { components.loadResource(this) .then((result) =\u0026gt; { this.template = result.template; components.renderOnce(this); }) .catch(err =\u0026gt; console.error(err)); } } components.defineCustomElement('gameface-checkbox', Checkbox);  To test the component start an http server at the root and open index.html. If you use http-server go to /checkbox and run:\nhttp-server  Navigate to localhost:\u0026lt;port\u0026gt; and check your component.\nAdding component to the components suite # If you want to contribute to the components library and add a new component you need to add the required files in the correct folders. Make sure they can be successfully bundled and add documentation.\n All components are placed in the /components folder. The folders are named using lower case and camel-case for longer names. All names should be prefixed with gameface-. So now instead of some-component the custom element should be named gameface-some-component:  components.defineCustomElement('gameface-some-component', SomeComponent);\nNote that only the name of the custom element and the name of the npm package in package.json must be prefixed.\nYou can use the coherent-guic-cli to build single component. Follow the steps bellow to see how to manually build all components if you don\u0026rsquo;t want yo use the CLI.\nThe build command generates UMD and CJS bundles of the component. The module bundler that is used is Rollup. That means we can use import and export statements and rollup will automatically resolve all modules. Now we can import all dependencies at the top of the script.js file:\nimport components from 'coherent-gameface-components'; import template from './template.html';  And we can export the checkbox at the bottom:\nexport { Checkbox };  Because the templates are imported as modules we no longer need to load them using XHR. Set the template as a property of the component:\nthis.template = template;  The loadResource method can both work with URL and an imported template. The usage is the same so that it is more convenient to switch between XHR and imported template. This is how the component\u0026rsquo;s definition looks like after the changes:\nimport components from 'coherent-gameface-components'; import template from './template.html'; class Checkbox extends HTMLElement { constructor() { super(); this.template = template; } connectedCallback() { components.loadResource(this) .then((result) =\u0026gt; { this.template = result.template; components.renderOnce(this); }) .catch(err =\u0026gt; console.error(err)); } } components.defineCustomElement('gameface-checkbox', Checkbox); export { Checkbox };  Because all components are npm packages you need to add an entry index.js file. This is the file that would be loaded when you import your component from node_modules like this:\nimport { Checkbox } from 'gameface-checkbox';  It should export either the development or the production CJS bundle:\nif (process.env.NODE_ENV === 'production') { module.exports = require('./cjs/checkbox.production.min.js'); } else { module.exports = require('./cjs/checkbox.development.js'); }  Each component has a demo page. It is placed in a /demo folder. The JavaScript file of the demo should be bundled so that it can be easily checked with double click or drag and drop without the need to manually setup an environment. The demo.js file imports all dependencies so that Rollup can resolve and bundle them.\nimport components from 'coherent-gameface-components'; import checkbox from '../umd/checkbox.development.js'  The demo.html file should import the bundle.js and use the custom element:\n\u0026lt;body\u0026gt; \u0026lt;gameface-checkbox\u0026gt;\u0026lt;/gameface-checkbox\u0026gt; \u0026lt;script src=\u0026quot;./bundle.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt;  Note that the demo files should have the names demo.js and demo.html for the JavaScript and html files respectively. Make sure all files have the LICENSE notice at the top. Run npm run add:copyright to automatically add copyright notice to all files.\nTo build the component run:\nnpm run rebuild  The newly created bundles are located in checkbox/umd and checkbox/cjs folders. To test if everything works open the demo.html file.\nIf everything works, add a README.md file to the component folder and add a documentation page to the docs/ folder.\nAdding styles # The styles of a component are located in the same location as its source in a style.css file. You can use different file name and folder structure if it makes sense. For example the styles of the slider component are located in a separate folder and they have names corresponding to the type of slider they style. Make sure to prefix all selectors with guic- to avoid overwriting global selectors with common names. The prefix is an abbreviation of Game UI Components. Import the styles using a link tag in the file where you use the custom component:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  Adding flexibility through slots # The  HTML element is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together. This component system provides a custom element called  which replaces the standard  element, but keeps the main idea. Slots are usable in cases where a dynamic content must be placed in a specific place in the HTML. In the example of the  if template is:\n\u0026lt;div\u0026gt; \u0026lt;div class=\u0026quot;check-mark\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;component-slot data-name=\u0026quot;label\u0026quot;\u0026gt;Click me!\u0026lt;/component-slot\u0026gt; \u0026lt;/div\u0026gt;  the label is the dynamic part. If the label is not specified - the default one will be used, this allows the component to be used like this:\n\u0026lt;gameface-checkbox\u0026gt;\u0026lt;/gameface-checkbox\u0026gt;  and the renderOnce method will replace this with:\n\u0026lt;gameface-checkbox\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026quot;check-mark\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;component-slot data-name=\u0026quot;label\u0026quot;\u0026gt;Click me!\u0026lt;/component-slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/gameface-checkbox\u0026gt;  If the label is specified the data-name=\u0026ldquo;label\u0026rdquo; will be replaced with the element passed to that slot:\n\u0026lt;gameface-checkbox\u0026gt; \u0026lt;component-slot data-name=\u0026quot;label\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;some-custom-fancy-label-wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;more-wrappers\u0026quot;\u0026gt;My custom label\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-checkbox\u0026gt;  will be replaced with:\n\u0026lt;gameface-checkbox\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026quot;check-mark\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;component-slot data-name=\u0026quot;label\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;some-custom-fancy-label-wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;more-wrappers\u0026quot;\u0026gt;My custom label\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/component-slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/gameface-checkbox\u0026gt;  See the full checkbox component here.\nSlots can be very powerful when a component has more complicated template, especially if there are nested components. For example the dropdown component has a scrollable-container (another component) in its template and all options (list items) of the dropdown, which are passed through slots as they are dynamic go into the scrollable container:\n\u0026lt;div class=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;dropdown-header\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;selected\u0026quot;\u0026gt;Select an option\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;custom-select-arrow\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;options-container hidden\u0026quot;\u0026gt; \u0026lt;gameface-scrollable-container class=\u0026quot;scrollable-container-component\u0026quot;\u0026gt; \u0026lt;div slot=\u0026quot;scrollable-content\u0026quot; data-name=\u0026quot;scrollable-content\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;options\u0026quot;\u0026gt; \u0026lt;!--all options go here--\u0026gt; \u0026lt;component-slot data-name=\u0026quot;option\u0026quot;\u0026gt;\u0026lt;/component-slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/gameface-scrollable-container\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  The usage of the component looks a lot simpler:\n\u0026lt;gameface-dropdown class=\u0026quot;gameface-dropdown-component\u0026quot;\u0026gt; \u0026lt;dropdown-option slot=\u0026quot;option\u0026quot;\u0026gt;Cat1\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option slot=\u0026quot;option\u0026quot; disabled\u0026gt;Cat1\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option slot=\u0026quot;option\u0026quot; disabled\u0026gt;Cat1\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option slot=\u0026quot;option\u0026quot;\u0026gt;Cat3\u0026lt;/dropdown-option\u0026gt; \u0026lt;/gameface-dropdown\u0026gt;  And when the component is rendered and all elements are slotted the final markup will look like this:\n\u0026lt;div class=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;dropdown-header\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;selected\u0026quot;\u0026gt;Select an option\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;custom-select-arrow\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;options-container hidden\u0026quot;\u0026gt; \u0026lt;gameface-scrollable-container class=\u0026quot;scrollable-container-component\u0026quot;\u0026gt; \u0026lt;div slot=\u0026quot;scrollable-content\u0026quot; data-name=\u0026quot;scrollable-content\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;options\u0026quot;\u0026gt; \u0026lt;dropdown-option slot=\u0026quot;option\u0026quot;\u0026gt;Cat1\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option slot=\u0026quot;option\u0026quot; disabled\u0026gt;Cat1\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option slot=\u0026quot;option\u0026quot; disabled\u0026gt;Cat1\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option slot=\u0026quot;option\u0026quot;\u0026gt;Cat3\u0026lt;/dropdown-option\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/gameface-scrollable-container\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  Testing # All tests are located in tools/tests. For more information on how to create and run a test refer to the documentation.\nPublishing components to npm # Before you publish make sure:\n The component builds - the umd and cjs packages are successfully generated. All tests pass. There is a README.md with useful information about how to use the component. The name of the component is correct (prefixed with coherent-gameface-). The demo is bundled. There is a public documentation committed in the docs folder. Add the rest of the team\u0026rsquo;s npm accounts to collaborators using the npm owners add command or through npmjs.com.  Manually update the version of the component in package.json and run\nnpm publish\nComponents style guide # To prevent errors, improve the code quality and readability, to make maintainable and consistent code we decided to add a style guide to the repository. We defined all the rules by setting an eslinter that will force all the developers to respect the style guide when developing JavaScript features. To make sure that \u0026ldquo;clean\u0026rdquo; code is committed we added additional actions:\n We added a pre-commit hook that is set up by the husky and load-staged modules. When committing changes the hook will run the linter on the staged files to make sure everything is fine. If the lint check fails the commit will be discarded so the errors be fixed first. When the errors are fixed you can try again to make a commit. To fix all the errors from the lint check you can run npm run lint:fix. Make sure that they are correctly fixed! If you want to check anytime if you have some linter errors you can run npm run lint:errors. If you want to check for warnings as well you can run npm run lint:all. We advise you to use lint:all command! You can install a VSCode extension that will run the linter in the background while you are coding. This will save you time fixing the errors at the end. We added a GitHub action that will be triggered when you make a pull request. It will run the linter each time you make a change to the pull request to make sure everything is fine with the code.    The components will not use the local packages created from source, not the ones from the npm registry. Useful when you are doing changes the core library or to any of the existing components and you want to test your changes. Remember to build with the \u0026ndash;no-install option when using links as otherwise the build will perform npm install which will overwrite the links.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "},{"id":12,"href":"/GameUIComponents/en/components/accordion-menu/","title":"Accordion menu","content":"The accordion-menu is part of the Gameface custom components suite. As most of the components in this suite it uses slots to allow dynamic content.\nUsage # The accordion-menu component comes with UMD and CJS builds.\nInstallation # npm i coherent-gameface-accordion-menu\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the accordion-menu component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-accordion-menu/umd/accordion-menu.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the gameface-accordion-menu component to your html along with the gameface-accordion-panel, gameface-accordion-header and gameface-accordion-content:  \u0026lt;gameface-accordion-menu\u0026gt;\u0026lt;/gameface-accordion-menu\u0026gt;  This is all! Load the file in Gameface to see the accordion-menu.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the accordion-menu from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import accordionMenu from 'coherent-gameface-accordion-menu';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import accordionMenu from './node_modules/coherent-gameface-accordion-menu/umd/accordion-menu.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const accordionMenu = require('coherent-gameface-accordion-menu');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nAdd the styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\nLoad the HTML file in Gameface to see the accordion-menu.\nHow to use # To use the accordion-menu component add the following element to your html\n\u0026lt;gameface-accordion-menu\u0026gt;\u0026lt;/gmeface-accordion-menu\u0026gt;  To add panels that will expand on click you need to add gameface-accordion-panel.\n\u0026lt;gameface-accordion-menu \u0026gt; \u0026lt;gameface-accordion-panel slot=\u0026quot;accordion-panel\u0026quot;\u0026gt; \u0026lt;gameface-accordion-header\u0026gt;Long Text\u0026lt;/gameface-accordion-header\u0026gt; \u0026lt;gameface-accordion-content\u0026gt; Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius, in! At nesciunt earum ea deserunt architecto animi quod neque dicta asperiores. Error aliquid facilis hic in culpa quisquam temporibus aliquam. \u0026lt;/gameface-accordion-content\u0026gt; \u0026lt;/gameface-accordion-panel\u0026gt; \u0026lt;/gameface-accordion-menu\u0026gt;  You can add a gameface-accordion-panel for each panel in the accordion menu, it needs to contain a gameface-accordion-header and gameface-accordion-content components to display properly. The gameface-accordion-header is the part of the panel that is always visible and the gameface-accordion-content is hidden and gets expanded.\nYou can use the following attributes to customize the accordion-menu\n   Attribute Type Default Description     multiple Boolean false If you can expand multiple panels at once    You can also add the following attributes to the gameface-accordion-panel\n   Attribute Type Default Description     disabled Boolean false If the panel is disabled. You can\u0026rsquo;t expand or shrink disabled panels   expanded Boolean false If the panel is expanded on load    "},{"id":13,"href":"/GameUIComponents/en/examples/accordion-menu/","title":"Accordion menu","content":" [data-dark-mode] gameface-accordion-menu { color: black; } .flex-box { display: flex; } .container-flex { width: 49vw; padding: 0 20px; }   Single  Long Text Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius, in! At nesciunt earum ea deserunt architecto animi quod neque dicta asperiores. Error aliquid facilis hic in culpa quisquam temporibus aliquam. Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolores ea ipsam accusantium quasi placeat illo incidunt corrupti iste molestiae aut itaque molestias, laudantium sapiente, veritatis repudiandae rem, aspernatur dolore quisquam? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Hic quisquam, a tenetur eaque asperiores praesentium, obcaecati nostrum doloremque labore tempora maxime dolorum quas libero ratione. Debitis totam deleniti quibusdam hic.   Disabled Closed Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius, in! At nesciunt earum ea deserunt architecto animi quod neque dicta asperiores. Error aliquid facilis hic in culpa quisquam temporibus aliquam.   Disabled Open Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius, in! At nesciunt earum ea deserunt architecto animi quod neque dicta asperiores. Error aliquid facilis hic in culpa quisquam temporibus aliquam.   Short Text Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius, in! At nesciunt earum ea deserunt architecto animi quod neque dicta asperiores. Error aliquid facilis hic in culpa quisquam temporibus aliquam.     Multiple Long Text Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius, in! At nesciunt earum ea deserunt architecto animi quod neque dicta asperiores. Error aliquid facilis hic in culpa quisquam temporibus aliquam. Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolores ea ipsam accusantium quasi placeat illo incidunt corrupti iste molestiae aut itaque molestias, laudantium sapiente, veritatis repudiandae rem, aspernatur dolore quisquam? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Hic quisquam, a tenetur eaque asperiores praesentium, obcaecati nostrum doloremque labore tempora maxime dolorum quas libero ratione. Debitis totam deleniti quibusdam hic.   Disabled Closed Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius, in! At nesciunt earum ea deserunt architecto animi quod neque dicta asperiores. Error aliquid facilis hic in culpa quisquam temporibus aliquam.   Disabled Open Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius, in! At nesciunt earum ea deserunt architecto animi quod neque dicta asperiores. Error aliquid facilis hic in culpa quisquam temporibus aliquam.   Short Text Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius, in! At nesciunt earum ea deserunt architecto animi quod neque dicta asperiores. Error aliquid facilis hic in culpa quisquam temporibus aliquam.        "},{"id":14,"href":"/GameUIComponents/en/components/automatic-grid/","title":"Automatic grid","content":"The automatic-grid component is part of the Gameface custom components suite. As most of the components in this suite it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-automatic-grid\nUsage # The automatic-grid component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the automatic-grid component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-automatic-grid/umd/automatic-grid.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the automatic-grid component to your html:  \u0026lt;gameface-automatic-grid\u0026gt;\u0026lt;/gameface-automatic-grid\u0026gt;  This is all! Load the file in Gameface to see the automatic-grid.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the automatic-grid from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import automatic-grid from 'coherent-gameface-automatic-grid';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import automatic-grid from './node_modules/coherent-gameface-automatic-grid/umd/automatic-grid.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const automatic-grid = require('coherent-gameface-automatic-grid');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nAdd the styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;grid.production.min.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\nLoad the HTML file in Gameface to see the automatic-grid.\nHow to use # To use the automatic-grid component add the following element to your html\n\u0026lt;gameface-automatic-grid class=\u0026quot;automatic-grid-component\u0026quot;\u0026gt;\u0026lt;/gameface-automatic-grid\u0026gt;  To add items to your grid you need to add componet-slot elements to the grid\n\u0026lt;gameface-automatic-grid class=\u0026quot;automatic-grid-component\u0026quot;\u0026gt; \u0026lt;component-slot data-name=\u0026quot;item\u0026quot;\u0026gt;Automatic Grid\u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-automatic-grid\u0026gt;  You can use the following attributes to customize the automatic-grid\n   Attribute Type Default Description Notes     columns Number 6 The number of columns the grid has The maximum number of columns is 12   rows Number 5 The number of rows the grid has    draggable Boolean false If you can drag and drop items in the grid     Apart from that you can add the following attributes to the component-slot\n   Attribute Type Default Description Notes     col Number none The column the item is on    row Number none The row the item is on     Using with data-binding # If you want to iterate a list of items from a model in the automatic-grid, you can do the following in your JS:\nengine.whenReady.then(() =\u0026gt; { const grid = document.querySelector('gameface-automatic-grid'); grid.addItemsToCells(); });  This will distribute the items from the model in the grid.\n"},{"id":15,"href":"/GameUIComponents/en/examples/automatic-grid/","title":"Automatic grid","content":"  .page-wrapper { height: 45vh; } .automatic-grid-component { width: 100%; } .guic-row { margin: 0; } .guic-automatic-grid-container { border-right: 3px solid black; border-bottom: 3px solid black; } .guic-automatic-grid-cell { border-top: 3px solid black; border-left: 3px solid black; display: flex; align-items: center; justify-content: center; } [data-dark-mode] .guic-automatic-grid-container, [data-dark-mode] .automatic-grid-cell { border-color: #dee2e6; } .box { width: 50px; height: 50px; display: flex; justify-content: center; align-items: center; background-color: cadetblue; color: white; font-size: 1.5rem; }     1 2 3 4 5 6     "},{"id":16,"href":"/GameUIComponents/en/components/checkbox/","title":"Checkbox","content":"The checkbox is part of the Gameface custom components suite. As most of the components in this suite it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-checkbox\nUsage # The checkbox component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the checkbox component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-checkbox/umd/checkbox.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the checkbox component to your html:  \u0026lt;gameface-checkbox class=\u0026quot;checkbox-component\u0026quot;\u0026gt;\u0026lt;/gameface-checkbox\u0026gt;  This is all! Load the file in Gameface to see the checkbox.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the checkbox from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import checkbox from 'coherent-gameface-checkbox';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import checkbox from './node_modules/coherent-gameface-checkbox/umd/checkbox.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const checkbox = require('coherent-gameface-checkbox');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nCustomizing the Checkbox # The checkbox has three slots:\n checkbox-background - holds the check box itself check-mark - holds the check symbol checkbox-label - holds the text of the checkbox; leave empty if no label is required  Use the slots to put customized background or label.\n\u0026lt;gameface-checkbox class=\u0026quot;checkbox-component\u0026quot; data-url=\u0026quot;checkbox\u0026quot;\u0026gt; \u0026lt;component-slot data-name=\u0026quot;checkbox-background\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;guic-checkbox-background\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/component-slot\u0026gt; \u0026lt;component-slot data-name=\u0026quot;checkbox-label\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;guic-checkbox-label\u0026quot;\u0026gt;Enable Music\u0026lt;/span\u0026gt; \u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-checkbox\u0026gt;  Add the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\nYou can put any custom styles inline or use class names and add an external file.\n"},{"id":17,"href":"/GameUIComponents/en/examples/checkbox/","title":"Checkbox","content":"  Document  .page-wrapper { height: 45vh; }      Enable Music      "},{"id":18,"href":"/GameUIComponents/en/components/","title":"Components","content":""},{"id":19,"href":"/GameUIComponents/en/components/dropdown/","title":"Dropdown","content":"The gameface-dropdown is part of the Gameface custom components suite.\nInstallation # npm i coherent-gameface-dropdown\nUsage # The gameface-dropdown component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the gameface-dropdown component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-dropdown/umd/dropdown.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the gameface-dropdown component to your html:  \u0026lt;gameface-dropdown\u0026gt;\u0026lt;/gameface-dropdown\u0026gt;  To add options to the dropdown use the dropdown-option custom element:\n\u0026lt;gameface-dropdown\u0026gt; \u0026lt;dropdown-option\u0026gt;Cat\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option\u0026gt;Dog\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option\u0026gt;Giraffe\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option\u0026gt;Lion\u0026lt;/dropdown-option\u0026gt; \u0026lt;/gameface-dropdown\u0026gt;  To manually select an option use the setSelected(\u0026lt;optionIndex\u0026gt;) function. For example - to select the Giraffe option from the dropdown above call:\nconst dropdown = document.getElementById('my-dropdown'); dropdown.setSelected(2);  This is all! Load the file in Gameface to see the gameface-dropdown.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the gameface-dropdown from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import GamefaceDropdown from 'coherent-gameface-dropdown';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import GamefaceDropdown from './node_modules/coherent-gameface-dropdown/umd/dropdown.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const GamefaceDropdown = require('coherent-gameface-dropdown');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nMultiple Select # To enable multiple selection add a multiple attribute to the gameface-dropdown:\n\u0026lt;gameface-dropdown class=\u0026quot;gameface-dropdown-component\u0026quot; multiple\u0026gt; \u0026lt;dropdown-option\u0026gt;Cat1\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option\u0026gt;Parrot\u0026lt;/dropdown-option\u0026gt; \u0026lt;/gameface-dropdown\u0026gt;  By default the multiple select will have its options list expanded and it won\u0026rsquo;t have a header. If you would like to have a dropdown that looks like a single select, but supports multiple selected elements - add the collapsable attribute along with the multiple attribute:\n\u0026lt;gameface-dropdown class=\u0026quot;gameface-dropdown-component\u0026quot; multiple collapsable\u0026gt; \u0026lt;dropdown-option\u0026gt;Cat1\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option\u0026gt;Parrot\u0026lt;/dropdown-option\u0026gt; \u0026lt;/gameface-dropdown\u0026gt;  Features and Limitations # This is not a standard HTML select multiple. It is a custom HTML element that enables you to define a list of options.\n The multiple attribute makes it possible to select more than one option using the Ctrl key and the mouse.  All options can be selected with Ctrl + A combination.   Set the disabled attribute to gameface-dropdown or a dropdown-option to disable it. Set the selected attribute to any dropdown-option to pre-select it.  These are some of the differences to the standard select that are partially or not yet supported:\n Selecting multiple options via keyboard - this is possible with Shift + Arrow Up/Left/Down/Right and Shift + Home/End. Selecting a range of elements.  Add the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;node_modules/coherent-gameface-scrollable-container/style.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;node_modules/coherent-gameface-slider/styles/horizontal.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;node_modules/coherent-gameface-slider/styles/vertical.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\n"},{"id":20,"href":"/GameUIComponents/en/examples/dropdown/","title":"Dropdown","content":"   body { background-color: transparent; } .page-wrapper { height: 45vh; } .page-wrapper .guic-dropdown-selected-option { background-color: rgba(100, 100, 100, 0.1); } [data-dark-mode] .page-wrapper .guic-dropdown-selected-option { background-color: rgba(255, 255, 255, 0.3); color: #dee2e6; } [data-dark-mode] dropdown-option:not([disabled]) { color: #dee2e6; } [data-dark-mode] dropdown-option { color: rgb(87, 87, 87); } .page-wrapper .guic-dropdown-option-active { background-color: var(--default-color-blue); } .guic-dropdown-option-active { background-color: transparent; } .guic-scrollable-container-wrapper { width: 100%; height: 200px; } .guic-vertical-slider-wrapper { height: 200px; } gameface-dropdown { line-height: 100%; } [data-dark-mode] dropdown-option, [data-dark-mode] .guic-dropdown-options { background-color: rgba(0, 0, 0, 0.3); }    Cat1 Cat1 Cat1 Cat3 Cat4 Dog Giraffe Lion Pig Eagle Parrot Last Parrot Last Parrota Last Parrot      "},{"id":21,"href":"/GameUIComponents/en/examples/","title":"Examples","content":""},{"id":22,"href":"/GameUIComponents/en/components/form-control/","title":"Form control","content":"The gameface-form-control is part of the Gameface custom components suite. As most of the components in this suite, it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-form-control\nUsage # The gameface-form-control component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the gameface-form-control component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-form-control/umd/form-control.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  This is all! Load the file in Gameface to see the gameface-form-control.\n\u0026lt;gameface-form-control\u0026gt;\u0026lt;/gameface-form-control\u0026gt;  If you wish to import the modules using JavaScript you can replace the script tags with import statements like this:\nimport components from 'coherent-gameface-components'; import GamefaceFormControl from 'coherent-gameface-form-control';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively, you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import GamefaceFormControl from './node_modules/coherent-gameface-form-control/umd/form-control.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const GamefaceFormControl = require('coherent-gameface-form-control');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler to use them in a browser.\nForm control attributes #    Attribute Required Values Default value Usage     method Yes GET, POST GET Used to specify the HTTP method that will be used to send data when the form is submitted. If the attribute is not added or with no valid value the form won\u0026rsquo;t be published.   action No Any valid URL ./ Used to specify where the form will send the data. If the attribute is not added the data will be sent to the current page URL.    Examples #  \u0026lt;gameface-form-control method=\u0026quot;GET\u0026quot; action=\u0026quot;http://localhost:12345/login\u0026quot;\u0026gt;\u0026lt;/gameface-form-control\u0026gt; - Submitting this form will create a GET request with the form data and send it to the server that is available on http://localhost:12345/login. \u0026lt;gameface-form-control method=\u0026quot;POST\u0026quot;\u0026gt;\u0026lt;/gameface-form-control\u0026gt; - Submitting this form will create a POST request with the form data and send it to the current page location. \u0026lt;gameface-form-control\u0026gt;\u0026lt;/gameface-form-control\u0026gt; - Submitting this form will produce a warning and the request will be aborted.  Form control events # Inline event handlers #    Event Value Usage     onload Function Will call the function that is added from the attribute\u0026rsquo;s value when the form request has been completed, whether with success or not.   onsubmit Function Will call the function that is added from the attribute\u0026rsquo;s value when the form is submitted and right before the request is made to the server.    Examples # Let us have the following functions:\nfunction onRequestEnd(event) { console.log(\u0026quot;Request response: \u0026quot;, event.detail.target.response) } function preventSubmit(event) { event.preventDefault(); }   \u0026lt;gameface-form-control onload=\u0026quot;onRequestEnd(event)\u0026quot; method=\u0026quot;GET\u0026quot; action=\u0026quot;http://localhost:12345/login\u0026quot;\u0026gt;\u0026lt;/gameface-form-control\u0026gt; - onRequestEnd will log the response from the request. \u0026lt;gameface-form-control onsubmit=\u0026quot;preventSubmit(event)\u0026quot; method=\u0026quot;GET\u0026quot; action=\u0026quot;http://localhost:12345/login\u0026quot;\u0026gt;\u0026lt;/gameface-form-control\u0026gt; - preventSubmit will prevent form from making request to the server when the form is submitted.  Event handlers #    Event Usage     loadend Will be triggered when the form request has completed, whether with success or not.   submit Will be triggered when the form is submitted and right before the request is made to the server.    Examples # Let us have the following form - \u0026lt;gameface-form-control id=\u0026quot;form\u0026quot; method=\u0026quot;GET\u0026quot; action=\u0026quot;http://localhost:12345/login\u0026quot;\u0026gt;\u0026lt;/gameface-form-control\u0026gt;.\n Log the response from the request.  const form = document.getElementById('form'); form.addEventListener('loadend', (event)=\u0026gt;{ console.log(\u0026quot;Request response: \u0026quot;,event.detail.target.response) });   Prevent form from submitting.  const form = document.getElementById('form'); form.addEventListener('submit', (event) =\u0026gt; { event.preventDefault(); });  Form control elements # Input # Text inputs # \u0026lt;input\u0026gt; element is supported from the gameface form control just when it is holding text values input with type text, password, email, etc.\nThe name attribute will be used to specify the form-data key and the value will be used to specify the form data value of the input.\nSubmit input # So far Gameface does not support input elements with the type submit although they can be defined in the DOM.\nThe form control will treat these elements like submit buttons and when they are clicked the form will be submitted.\nOther inputs # Any other input elements with type range, color, date, etc. are not supported.\nExample # \u0026lt;gameface-form-control method=\u0026quot;GET\u0026quot; action=\u0026quot;http://localhost:12345/login\u0026quot;\u0026gt; \u0026lt;span\u0026gt;User name:\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;user\u0026quot; value=\u0026quot;name\u0026quot;/\u0026gt; \u0026lt;span\u0026gt;Password:\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026quot;password\u0026quot; name=\u0026quot;password\u0026quot; value=\u0026quot;pass\u0026quot;/\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;emptyInput\u0026quot;/\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; name=\u0026quot;submitButton\u0026quot; value=\u0026quot;It is input not a button\u0026quot;/\u0026gt; \u0026lt;/gameface-form-control\u0026gt;  Clicking on the input with type submit will make a GET request to http://localhost:12345/login?user=name\u0026amp;password=pass\u0026amp;submitButton=It+is+input+not+a+button.\nNotes #  The data from \u0026lt;input type=\u0026quot;submit\u0026quot;/\u0026gt; will be included in the request if this input is clicked. The name attribute is required if you want your input to be included in the form data on submitting!  Select # Native \u0026lt;select\u0026gt; element is not supported by Gameface. However, there is a polyfill that transforms \u0026lt;select\u0026gt; into a working dropdown in the Gameface. That dropdown element - \u0026lt;custom-select\u0026gt; is supported by the form control component.\nThe polyfill is located inside the Gameface package - Samples/uiresources/Dropdown.\nExample # \u0026lt;gameface-form-control method=\u0026quot;GET\u0026quot; action=\u0026quot;http://localhost:12345/\u0026quot;\u0026gt; \u0026lt;span\u0026gt;Select city\u0026lt;/span\u0026gt; \u0026lt;select name=\u0026quot;city\u0026quot;\u0026gt; \u0026lt;option id=\u0026quot;Chongqing\u0026quot; name=\u0026quot;Chongqing\u0026quot; value=\u0026quot;Chongqing\u0026quot;\u0026gt;Chongqing\u0026lt;/option\u0026gt; \u0026lt;option id=\u0026quot;Shanghai\u0026quot; name=\u0026quot;Shanghai\u0026quot; value=\u0026quot;Shanghai\u0026quot;\u0026gt;Shanghai\u0026lt;/option\u0026gt; \u0026lt;option id=\u0026quot;Beijing\u0026quot; name=\u0026quot;Beijing\u0026quot; value=\u0026quot;Beijing\u0026quot;\u0026gt;Beijing\u0026lt;/option\u0026gt; \u0026lt;option id=\u0026quot;Lagos\u0026quot; name=\u0026quot;Lagos\u0026quot; value=\u0026quot;Lagos\u0026quot;\u0026gt;Lagos\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/gameface-form-control\u0026gt; \u0026lt;script src=\u0026quot;Samples/uiresources/Dropdown/custom-select.js\u0026quot;\u0026gt;  Textarea # \u0026lt;textarea\u0026gt; element is supported from the gameface form control.\nThe name attribute is required if you want the value to be included in the form data on submit.\nThe name attribute will be used to specify the form-data key and the value will be used to specify the form data value of the input.\nExample # \u0026lt;gameface-form-control method=\u0026quot;POST\u0026quot; action=\u0026quot;http://localhost:12345/register\u0026quot;\u0026gt; \u0026lt;span\u0026gt;User info:\u0026lt;/span\u0026gt; \u0026lt;textarea name=\u0026quot;info\u0026quot;\u0026gt;Default value\u0026lt;/textarea\u0026gt; \u0026lt;span\u0026gt;Additional info:\u0026lt;/span\u0026gt; \u0026lt;textarea name=\u0026quot;moreInfo\u0026quot;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Submit form\u0026lt;/button\u0026gt; \u0026lt;/gameface-form-control\u0026gt;  Clicking on the button will make a POST request to http://localhost:12345/register with the body {\u0026quot;info\u0026quot;:\u0026quot;Default value\u0026quot;}. moreInfo won\u0026rsquo;t be included in the request body if its value is empty.\nButton # \u0026lt;button\u0026gt; element is supported from the gameface form control.\nTo make a button that submits the form you need to add the type=\u0026quot;submit\u0026quot; attribute to the button.\nIf a button has name and value attributes their values will be included in the form data on submit if this button is clicked.\nExample # \u0026lt;gameface-form-control method=\u0026quot;GET\u0026quot; action=\u0026quot;http://localhost:12345/buttons\u0026quot;\u0026gt; \u0026lt;button id=\u0026quot;button-with-data\u0026quot; name=\u0026quot;button\u0026quot; value=\u0026quot;data\u0026quot; type=\u0026quot;submit\u0026quot;\u0026gt;Submit form\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026quot;button-with-no-data\u0026quot; type=\u0026quot;submit\u0026quot;\u0026gt;Submit form\u0026lt;/button\u0026gt; \u0026lt;/gameface-form-control\u0026gt;   Clicking on the button with id button-with-data will make a GET request to http://localhost:12345/buttons?button=data. Clicking on the button with id button-with-no-data will make a GET request to http://localhost:12345/buttons.  Gameface checkbox # \u0026lt;gameface-checkbox\u0026gt; is a gameface component that represents a checkbox and it is supported by the gameface form control.\nThe name attribute is required if you want the checkbox to be included in the form data when submitted.\nThe value attribute is not required but if it is empty and the checkbox is checked then the value will be - on by default.\nIf the checkbox is checked then its name and value will be included in the form data on submit and vice versa if not.\nExample # \u0026lt;gameface-form-control action=\u0026quot;http://localhost:3000/interests\u0026quot; method=\u0026quot;GET\u0026quot;\u0026gt; \u0026lt;gameface-checkbox name=\u0026quot;user-interests\u0026quot; value=\u0026quot;music\u0026quot;\u0026gt; \u0026lt;component-slot data-name=\u0026quot;checkbox-background\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;guic-checkbox-background\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/component-slot\u0026gt; \u0026lt;component-slot data-name=\u0026quot;checkbox-label\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;guic-checkbox-label\u0026quot;\u0026gt;Music\u0026lt;/span\u0026gt; \u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-checkbox\u0026gt; \u0026lt;gameface-checkbox name=\u0026quot;user-interests\u0026quot; value=\u0026quot;coding\u0026quot;\u0026gt; \u0026lt;component-slot data-name=\u0026quot;checkbox-background\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;guic-checkbox-background\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/component-slot\u0026gt; \u0026lt;component-slot data-name=\u0026quot;checkbox-label\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;guic-checkbox-label\u0026quot;\u0026gt;Coding\u0026lt;/span\u0026gt; \u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-checkbox\u0026gt; \u0026lt;gameface-checkbox name=\u0026quot;user-interests\u0026quot;\u0026gt; \u0026lt;component-slot data-name=\u0026quot;checkbox-background\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;guic-checkbox-background\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/component-slot\u0026gt; \u0026lt;component-slot data-name=\u0026quot;checkbox-label\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;guic-checkbox-label\u0026quot;\u0026gt;Nothing\u0026lt;/span\u0026gt; \u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-checkbox\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/gameface-form-control\u0026gt;  Clicking on the submit button will make a GET request to http://localhost:3000/interests?user-interests=music\u0026amp;user-interests=coding\u0026amp;user-interests=on.\nUnchecking the Nothing and Coding checkboxes and then submitting the form will make a GET request to http://localhost:3000/interests?user-interests=music.\nGameface radio group/button # \u0026lt;gameface-radio-group\u0026gt; is a gameface component that represents a group with radio buttons that lets the user choose one from all and it is supported by the gameface form control.\nThe name attribute is required if you want the radio group to be included in the form data when submitted.\nThe value attribute is not required for the radio-button element but if it is empty and the radio button is checked then the value will be - on by default.\nExample # \u0026lt;gameface-form-control action=\u0026quot;http://localhost:3000/options\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;span\u0026gt;Normal:\u0026lt;/span\u0026gt; \u0026lt;gameface-radio-group name=\u0026quot;option1\u0026quot;\u0026gt; \u0026lt;radio-button checked value=\u0026quot;1\u0026quot;\u0026gt;1\u0026lt;/radio-button\u0026gt; \u0026lt;radio-button value=\u0026quot;2\u0026quot;\u0026gt;2\u0026lt;/radio-button\u0026gt; \u0026lt;radio-button value=\u0026quot;3\u0026quot;\u0026gt;3\u0026lt;/radio-button\u0026gt; \u0026lt;/gameface-radio-group\u0026gt; \u0026lt;span\u0026gt;No value:\u0026lt;/span\u0026gt; \u0026lt;gameface-radio-group name=\u0026quot;option2\u0026quot;\u0026gt; \u0026lt;radio-button value=\u0026quot;1\u0026quot;\u0026gt;1\u0026lt;/radio-button\u0026gt; \u0026lt;radio-button checked\u0026gt;2\u0026lt;/radio-button\u0026gt; \u0026lt;radio-button value=\u0026quot;3\u0026quot;\u0026gt;3\u0026lt;/radio-button\u0026gt; \u0026lt;/gameface-radio-group\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/gameface-form-control\u0026gt;  Clicking on the submit button will make a POST request to http://localhost:3000/options with body {\u0026quot;option1\u0026quot;:1,\u0026quot;option2\u0026quot;:\u0026quot;on\u0026quot;}.\nGameface switch # \u0026lt;gameface-switch\u0026gt; is a gameface component that represents a switch toggle button that lets the uses enable/disable the option and it is supported by the gameface form control.\nThe name attribute is required if you want the switch to be included in the form data when submitted.\nThe value attribute is not required for the switch element but if it is empty and the switch is enabled then the value will be - on by default.\nExample # \u0026lt;gameface-form-control action=\u0026quot;http://localhost:3000/options\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;guic-checkbox-label\u0026quot;\u0026gt;Normal\u0026lt;/span\u0026gt; \u0026lt;gameface-switch name=\u0026quot;option1\u0026quot; value=\u0026quot;checked\u0026quot; type=\u0026quot;text-inside\u0026quot;\u0026gt; \u0026lt;component-slot data-name=\u0026quot;switch-unchecked\u0026quot;\u0026gt;No\u0026lt;/component-slot\u0026gt; \u0026lt;component-slot data-name=\u0026quot;switch-checked\u0026quot;\u0026gt;Yes\u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-switch\u0026gt; \u0026lt;span\u0026gt;No value:\u0026lt;/span\u0026gt; \u0026lt;gameface-switch name=\u0026quot;option2\u0026quot; type=\u0026quot;text-inside\u0026quot;\u0026gt; \u0026lt;component-slot data-name=\u0026quot;switch-unchecked\u0026quot;\u0026gt;No\u0026lt;/component-slot\u0026gt; \u0026lt;component-slot data-name=\u0026quot;switch-checked\u0026quot;\u0026gt;Yes\u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-switch\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/gameface-form-control\u0026gt;  Enable both switch buttons.\nClicking on the submit button will make a POST request to http://localhost:3000/options with body {\u0026quot;option1\u0026quot;:1,\u0026quot;option2\u0026quot;:\u0026quot;on\u0026quot;}.\nGameface dropdown # \u0026lt;gameface-dropdown\u0026gt; is a gameface component that represents the native select menu and it is supported by the gameface form control.\nThe name attribute is required if you want the dropdown to be included in the form data when submitted.\nThe value attribute is not required for the dropdown option element but if it is empty and the options are selected then the value will be the text content of the option by default.\nExample # \u0026lt;gameface-form-control action=\u0026quot;http://localhost:3000/options\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;guic-checkbox-label\u0026quot;\u0026gt;Normal\u0026lt;/span\u0026gt; \u0026lt;gameface-dropdown name=\u0026quot;option1\u0026quot; class=\u0026quot;gameface-dropdown-component\u0026quot; id=\u0026quot;dropdown-default\u0026quot;\u0026gt; \u0026lt;dropdown-option value=\u0026quot;1\u0026quot; slot=\u0026quot;option\u0026quot;\u0026gt;One\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option value=\u0026quot;2\u0026quot; slot=\u0026quot;option\u0026quot;\u0026gt;Two\u0026lt;/dropdown-option\u0026gt; \u0026lt;/gameface-dropdown\u0026gt; \u0026lt;span class=\u0026quot;guic-checkbox-label\u0026quot;\u0026gt;No values\u0026lt;/span\u0026gt; \u0026lt;gameface-dropdown name=\u0026quot;option2\u0026quot; class=\u0026quot;gameface-dropdown-component\u0026quot; id=\u0026quot;dropdown-default\u0026quot;\u0026gt; \u0026lt;dropdown-option slot=\u0026quot;option\u0026quot;\u0026gt;One\u0026lt;/dropdown-option\u0026gt; \u0026lt;dropdown-option slot=\u0026quot;option\u0026quot;\u0026gt;Two\u0026lt;/dropdown-option\u0026gt; \u0026lt;/gameface-dropdown\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/gameface-form-control\u0026gt;  Clicking on the submit button will make a POST request to http://localhost:3000/options with body {\u0026quot;option1\u0026quot;:1,\u0026quot;option2\u0026quot;:\u0026quot;One\u0026quot;}.\nText Field # \u0026lt;gameface-text-field\u0026gt; is a component that allows you to use a text input of different types - text, email, password, number, etc. It supports validation. For example, if you create a text field with the type:\n email - the built-in validation will check if the value has a @ symbol and it will show an error if does not. url - the built-in validation will check a pattern as an attribute to the text field and its value should match this pattern. For example if the url should match certain domain name - \u0026lt;gameface-text-field type=\u0026quot;url\u0026quot; pattern=\u0026quot;mydomain.*\u0026quot;\u0026gt;. password - the built-in validation will check length through the minlength and maxlength attributes. number - the built-in validation will check min and max attributes. text, password, search - the built-in validation will check length through the minlength and maxlength attributes.  Example # \u0026lt;gameface-form-control style=\u0026quot;position: absolute;top: 200px;\u0026quot;\u0026gt; \u0026lt;gameface-text-field id=\u0026quot;text\u0026quot; name=\u0026quot;text\u0026quot; label=\u0026quot;User name:\u0026quot; type=\u0026quot;text\u0026quot; value=\u0026quot;thisisvalid\u0026quot; minlength=\u0026quot;5\u0026quot; maxlength=\u0026quot;20\u0026quot;\u0026gt;\u0026lt;/gameface-text-field\u0026gt; \u0026lt;gameface-text-field id=\u0026quot;url\u0026quot; name=\u0026quot;url\u0026quot; pattern=\u0026quot;https://.*\u0026quot; label=\u0026quot;Website:\u0026quot; value=\u0026quot;https://localhost:9090\u0026quot; type=\u0026quot;url\u0026quot;\u0026gt;\u0026lt;/gameface-text-field\u0026gt; \u0026lt;gameface-text-field id=\u0026quot;email\u0026quot; name=\u0026quot;email\u0026quot; label=\u0026quot;Email:\u0026quot; type=\u0026quot;email\u0026quot; value=\u0026quot;text-field@test.com\u0026quot;\u0026gt;\u0026lt;/gameface-text-field\u0026gt; \u0026lt;gameface-text-field id=\u0026quot;number\u0026quot; name=\u0026quot;number\u0026quot; label=\u0026quot;Age:\u0026quot; type=\u0026quot;number\u0026quot; min=\u0026quot;15\u0026quot; max=\u0026quot;200\u0026quot; step=\u0026quot;10\u0026quot; value=\u0026quot;30\u0026quot;\u0026gt;\u0026lt;/gameface-text-field\u0026gt; \u0026lt;button class=\u0026quot;form-element\u0026quot; id=\u0026quot;submit\u0026quot; type=\u0026quot;submit\u0026quot;\u0026gt;Login\u0026lt;/button\u0026gt; \u0026lt;/gameface-form-control\u0026gt;  Validation # The form control supports validation. These are the attributes that you can use:\n   Name Purpose Supported Elements     required Used to indicate that a value is required. Will show an error if the element doesn\u0026rsquo;t have value. Input, Textarea, Checkbox, Switch, Radio Button   minlength Used to indicate the minimum length of a text field. Input   maxlength Used to indicate the minimum length of a text field. Input   min Used to indicate the minimum value of a number input Input   max Used to indicate the maximum value of a number input Input   pattern Used to specify a url pattern. TextField[type=\u0026ldquo;url\u0026rdquo;]   required Used to specify that the element must have value. All form supported elements    Custom validation # The form control component supports custom validation as well. Its purpose is to customize the default methods for validation, error messages, or where to show them. The default methods for validating form are stored in a map where each method has a default message defined for it. These methods are checking if a form element meets the requirements to be valid that are defined by the attributes above. Here is a table describing each method name, its error, and its relevant form element attribute.\n   Default validator method name Error message Corresponding attribute Additional info     notAForm This element is not part of a form. N/A This validator validates if the element is part of the form control.   nameMissing The element does not have a name attribute and will not be submitted N/A This validator validates if a form element has valid name attribute set.   tooLong The value is too long. Maximum length is ${element.getAttribute('maxlength')}. maxlength    tooShort The value is too short. Minimal length is ${element.getAttribute('minlength')}. minlength    rangeOverflow The value is too big. Maximum is ${element.getAttribute('max')}. max    rangeUnderflow The value is too small. Minimum is ${element.getAttribute('min')}. min    valueMissing The value is required. required    badURL Please enter a valid URL. It should match the following pattern: /${element.pattern}/. N/A This validator validates \u0026lt;gameface-text-field\u0026gt; component\u0026rsquo;s value when its type is url.   badEmail Please enter a valid email. It should contain a @ symbol. N/A This validator validates \u0026lt;gameface-text-field\u0026gt; component\u0026rsquo;s value when its type is email.    As you can see some validators have error messages that include some properties from the validated element. That is because each validator dynamically constructs the error messages using the currently validated form element.\nCustom form validation methods # \u0026lt;gameface-form-control\u0026gt; component has some methods for making custom validation possible.\n   Method Arguments Description     setCustomValidators (name: string, validators: ValidatorsConfig) Will set custom defined validators related to the form elements with the corresponding name attribute.   removeCustomValidator (name: string) Will remove any custom validators related to the form element with the corresponding name attribute.   removeCustomValidators (names: string[]) Same as the removeCustomValidator but works with multiple names.   setCustomDisplayErrorElement (name: string, selector: string) Will change the default behavior of showing error messages. The name argument specifies the form element that will be modified. The selector specifies the element in which the error will be displayed.   removeCustomDisplayErrorElement (name: string) Remove the custom error message element previously added using setCustomDisplayErrorElement. The name argument specifies the form element. The default tooltip will be used instead for displaying errors.   removeCustomDisplayErrorElements (names: string[]) Same as the removeCustomDisplayErrorElement method but works with multiple names.    ValidatorsConfig # It is an object that has the following type:\ninterface ValidatorsConfig { [ValidatorName: string]: { method?: (element: HTMLElement) =\u0026gt; boolean | Promise\u0026lt;boolean\u0026gt; errorMessage?: (element: HTMLElement) =\u0026gt; string } }  With the ValidatorName key you define your custom validator name or you can use some of the default validator names to overwrite their behavior.\nmethod is the function that is used to tell the form component if the currently validated element is valid. It receives that element and should return a boolean with the result about the validity of the element. You can use the async function to define the method property. To overwrite the default validators use ValidatorName that has the same name as the one you wish to change:\nform.setCustomValidators('username', { valueMissing: { // will use this one, no the default method: (element) =\u0026gt; !element.value, errorMessage: () =\u0026gt; 'The username is required! ' } })  errorMessage is the function that constructs the message if the validation of the form element fails. It receives that element so you can extract its attributes and return a more specific error message. The function should return a string. If this property is added to ValidatorName that is some of the default ones will overwrite the default validation message.\nform.setCustomValidators('username', { valueMissing: { errorMessage: () =\u0026gt; 'The username is required! ' // will use this error message, not the default that is \u0026quot;The value is required.\u0026quot; } })  Example # Let us have the following form defined\n\u0026lt;gameface-form-control id=\u0026quot;custom-validation-form\u0026quot;\u0026gt; \u0026lt;gameface-text-field name=\u0026quot;username\u0026quot; label=\u0026quot;User name:\u0026quot; type=\u0026quot;text\u0026quot; minlength=\u0026quot;5\u0026quot; maxlength=\u0026quot;20\u0026quot;\u0026gt;\u0026lt;/gameface-text-field\u0026gt; \u0026lt;span id=\u0026quot;username-error\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;gameface-text-field name=\u0026quot;url\u0026quot; label=\u0026quot;Website:\u0026quot; type=\u0026quot;url\u0026quot;\u0026gt;\u0026lt;/gameface-text-field\u0026gt; \u0026lt;gameface-text-field name=\u0026quot;email\u0026quot; label=\u0026quot;Email:\u0026quot; type=\u0026quot;email\u0026quot;\u0026gt;\u0026lt;/gameface-text-field\u0026gt; \u0026lt;button class=\u0026quot;form-element\u0026quot; type=\u0026quot;submit\u0026quot;\u0026gt;Register\u0026lt;/button\u0026gt; \u0026lt;/gameface-form-control\u0026gt;  As you can see some attributes are used to validate the user name. The url and email will be validated by default. We can add our custom validators using the methods exposed in the gameface-form-control component. Note: Custom validation should be added after the form control bundle is added to the page.\n// Custom validators should be set after the components library is added! const form = document.getElementById('custom-validation-form'); let serverError = false, serverNotReachable = false; //Will set custom validators for the form element with name attribute that has value - \u0026quot;username\u0026quot; form.setCustomValidators('username', { //There is no required attribute to the form element so we can add validation about it here valueMissing: { method: (element) =\u0026gt; !element.value, errorMessage: () =\u0026gt; 'The username is required! ' }, //We can change the default message on the 'tooShort' preset validator tooShort: { errorMessage: (element) =\u0026gt; `The username should have more than ${element.getAttribute('minlength')} symbols typed! `}, //Async validator that checks if the user is already added to the database by making a request to the server usernameExists: { method: async (element) =\u0026gt; { if (!element.value) return false; serverError = false; serverNotReachable = false; return new Promise((resolve) =\u0026gt; { const xhr = new XMLHttpRequest(); xhr.open('GET', `http://localhost:3000/user-exists?username=${element.value}`); xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); xhr.onload = (event) =\u0026gt; resolve(event.target.response === 'true'); xhr.onerror = () =\u0026gt; { serverError = true; return resolve(true) } xhr.timeout = 1000; xhr.ontimeout = () =\u0026gt; { serverNotReachable = true; return resolve(true) } xhr.send(); }) }, errorMessage: (element) =\u0026gt; { if (serverNotReachable) return 'Unable to reach the server! '; if (serverError) return 'Unable to reach the server due an error! '; return `\u0026quot;${element.value}\u0026quot; already used! Please use another one! `; } } }); //By default the error will be visible in a tooltip displayed next to the form element //We can change that behavior for the user name by selecting another element for this purpose form.setCustomDisplayErrorElement('username', '#username-error'); //We can set a custom validation of the form element with a custom method and a message form.setCustomValidators('url', { notStartingWithHttpProtocol: { method: (element) =\u0026gt; !element.value.startsWith('http://') \u0026amp;\u0026amp; !element.value.startsWith('https://'), errorMessage: () =\u0026gt; 'The url should start with \u0026quot;http://\u0026quot; or \u0026quot;https://\u0026quot;!' } }); form.setCustomValidators('email', { //We can remove the preset error message if the preset validator for email fails //That will also remove the tooltip because no error messages should be visible even if the check fails badEmail: { errorMessage: () =\u0026gt; '' } });  Accessing the XMLHttpRequest # An XMLHttpRequest is created when a form is submitted. It is helpful to access this XHR in case you need to check the status of the request, the response, or if you want to do something on success/error. You can access this request through the properties of the form control:\n\u0026lt;gameface-form-control id=\u0026quot;my-form\u0026quot; action=\u0026quot;http://localhost:3000/options\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;user\u0026quot; value=\u0026quot;name\u0026quot; /\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/gameface-form-control\u0026gt;  const form = document.getElementById('my-form'); const xhr = form.xhr; xhr.addEventListener('progress', () =\u0026gt; console.log('onProgress')); xhr.addEventListener('load', () =\u0026gt; console.log('load')); xhr.addEventListener('error', () =\u0026gt; console.log('error')); xhr.addEventListener('abort', () =\u0026gt; console.log('abort'));  "},{"id":23,"href":"/GameUIComponents/en/components/grid/","title":"Grid","content":"The grid is part of the Gameface components suite. It provides a set of styles which enable the creation of a responsive grid.\nInstallation # npm i coherent-gameface-grid\nUsage # First you need to import the grid library:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;\u0026lt;path_to_grid.css\u0026gt;\u0026quot;\u0026gt;  Or if you use a css-loader:\nimport grid from 'coherent-gameface-grid';  The grid is made up of rows and columns. It is like a table. Each cell has a responsive width. The grid can have 12 columns. The width is specified by the class name - guic-col-6 is a column which takes half the width of a row. To create a row add a div with class name guic-row:\n\u0026lt;div class=\u0026quot;guic-row\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  To add a column create a div with class name guic-col-\u0026lt;size_number\u0026gt;:\n\u0026lt;div class=\u0026quot;guic-row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;guic-col-12\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;guic-col-6\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;guic-col-6\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  You can add offsets to the columns. The offsets can be the same sizes as the columns. To add an offset create a column div and add to its class name guic-col-offset-\u0026lt;size_number\u0026gt;:\n\u0026lt;div class=\u0026quot;guic-row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;guic-col-offset-11 guic-col-1\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  This will offset the column by 11. Keep in mind that the sum of the offset and the column size should not be greater than 12 because a row can be divided into 12 columns.\nIf you don\u0026rsquo;t want to manually specify the widths of the columns you can use auto width by using the guic-col class. It doesn\u0026rsquo;t have a size number. The columns will be automatically resized.\n\u0026lt;div class=\u0026quot;guic-row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;guic-col\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;guic-col\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  "},{"id":24,"href":"/GameUIComponents/en/examples/grid/","title":"Grid","content":"  Document  .box { box-sizing: border-box; background: #25a5d6; margin-bottom: 1rem; height: 4rem; } body { font-size: 16px; background-color: #ffffff; } .title { margin-bottom: 3rem; } .selected { transform: scale(1.2); } .avatar { margin-bottom: 2rem; min-height: 21vw; background-size: contain; background-repeat: no-repeat no-repeat; } .avatar-container { z-index: 1; } .avatar-container:hover { z-index: 3; } .avatar:hover, .class:hover { cursor: pointer; transform: scale(1.2); } .avatar1 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/avatar1.png); } .avatar2 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/avatar2.png); } .avatar3 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/avatar3.png); } .avatar4 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/avatar4.png); } .avatar5 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/avatar5.png); } .avatar6 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/avatar6.png); } #avatar1-classes, #avatar2-classes, #avatar3-classes, #avatar4-classes, #avatar5-classes, #avatar6-classes { display: none; } .class { margin-bottom: 1rem; min-height: 10vw; background-size: contain; background-repeat: no-repeat no-repeat; } .class.active { filter: saturate(14); } .class1 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class1.png); } .class2 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class2.png); } .class3 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class3.png); } .class4 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class4.png); } .class5 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class5.png); } .class6 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class6.png); } .class7 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class7.png); } .class8 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class8.png); } .class9 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class9.png); } .class10 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class10.png); } .class11 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class11.png); } .class12 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/class12.png); } .custom-static-col-300px { flex: 0 0 auto; max-width: none; width: 300px; } .guic-row { box-sizing: border-box; display: flex; flex: 0 1 auto; flex-direction: row; flex-wrap: wrap; margin-right: -0.5rem; margin-left: -0.5rem; } .guic-col, .guic-col-1, .guic-col-2, .guic-col-3, .guic-col-4, .guic-col-5, .guic-col-6, .guic-col-7, .guic-col-8, .guic-col-9, .guic-col-10, .guic-col-11, .guic-col-12, .guic-col-offset-0, .guic-col-offset-1, .guic-col-offset-2, .guic-col-offset-3, .guic-col-offset-4, .guic-col-offset-5, .guic-col-offset-6, .guic-col-offset-7, .guic-col-offset-8, .guic-col-offset-9, .guic-col-offset-10, .guic-col-offset-11, .guic-col-offset-12 { box-sizing: border-box; flex: 0 0 auto; padding-right: 0.5rem; padding-left: 0.5rem; } .guic-col { flex-grow: 1; flex: 1 1 0; max-width: 100%; } .guic-col-1 { flex: 1 1 8.33333333%; max-width: 8.33333333%; } .guic-col-2 { flex: 1 1 16.66666667%; max-width: 16.66666667%; } .guic-col-3 { flex: 1 1 25%; max-width: 25%; } .guic-col-4 { flex: 1 1 33.33333333%; max-width: 33.33333333%; } .guic-col-5 { flex: 1 1 41.66666667%; max-width: 41.66666667%; } .guic-col-6 { flex: 1 1 50%; max-width: 50%; } .guic-col-7 { flex: 1 1 58.33333333%; max-width: 58.33333333%; } .guic-col-8 { flex: 1 1 66.66666667%; max-width: 66.66666667%; } .guic-col-9 { flex: 1 1 75%; max-width: 75%; } .guic-col-10 { flex: 1 1 83.33333333%; max-width: 83.33333333%; } .guic-col-11 { flex: 1 1 91.66666667%; max-width: 91.66666667%; } .guic-col-12 { flex: 1 1 100%; max-width: 100%; } .guic-col-offset-0 { margin-left: 0; } .guic-col-offset-1 { margin-left: 8.33333333%; } .guic-col-offset-2 { margin-left: 16.66666667%; } .guic-col-offset-3 { margin-left: 25%; } .guic-col-offset-4 { margin-left: 33.33333333%; } .guic-col-offset-5 { margin-left: 41.66666667%; } .guic-col-offset-6 { margin-left: 50%; } .guic-col-offset-7 { margin-left: 58.33333333%; } .guic-col-offset-8 { margin-left: 66.66666667%; } .guic-col-offset-9 { margin-left: 75%; } .guic-col-offset-10 { margin-left: 83.33333333%; } .guic-col-offset-11 { margin-left: 91.66666667%; }    Select character                                                                                                                       Fluid                                           Offsets                                  Auto Width                      Set and Auto Width                         Static Size and Auto Width                     "},{"id":25,"href":"/GameUIComponents/en/interaction-manager/","title":"Interaction Manager","content":""},{"id":26,"href":"/GameUIComponents/en/components/menu/","title":"Menu","content":"The gameface-menu is part of the Gameface custom components suite. As most of the components in this suite it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-menu\nUsage # The gameface-menu component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the menu component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-menu/umd/menu.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the menu component to your html:  \u0026lt;gameface-menu\u0026gt;\u0026lt;/gameface-menu\u0026gt;  This is all! Load the file in Gameface to see the menu.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the gameface-menu from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import menu from 'coherent-gameface-menu';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import menu from './node_modules/coherent-gameface-menu/umd/menu.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const gameface-menu = require('coherent-gameface-menu');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nUsage in the HTML: # The menu component exposes several custom HTML elements:\n  \u0026lt;gameface-menu\u0026gt; - the menu component, it has one slot name menu-item; this is where the menu elements go to; by default it is anchored to the top.\n  \u0026lt;menu-item\u0026gt; - the menu item; provides navigation and onevent handlers\n  \u0026lt;gameface-left-menu\u0026gt; - a gameface menu that is anchored to the left\n  \u0026lt;gameface-right-menu\u0026gt; - a gameface menu that is anchored to the right\n  \u0026lt;gameface-bottom-menu\u0026gt; - a gameface menu that is anchored to the bottom\n  \u0026lt;gameface-menu\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Start Game\u0026lt;/menu-item\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Settings\u0026lt;/menu-item\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Credits\u0026lt;/menu-item\u0026gt; \u0026lt;/gameface-menu\u0026gt;  This will create a horizontal menu component. Use the orientation attribute to change the layout of the menu to vertical:\n\u0026lt;gameface-menu orientation=\u0026quot;vertical\u0026quot;\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Start Game\u0026lt;/menu-item\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Settings\u0026lt;/menu-item\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Credits\u0026lt;/menu-item\u0026gt; \u0026lt;/gameface-menu\u0026gt;  The supported orientation values are horizontal and vertical.\nAnd you can use one of the anchored menus for easier positioning.\nThe \u0026lt;menu-item\u0026gt; element supports all onevent handlers. If you want to execute a function on click add it as you would normally add it to an HTMLElement:\n\u0026lt;gameface-menu orientation=\u0026quot;vertical\u0026quot;\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot; onclick=\u0026quot;console.log('Clicked on Start Game.')\u0026quot;\u0026gt;Start Game\u0026lt;/menu-item\u0026gt; \u0026lt;/gameface-menu\u0026gt;  or pass a function\n\u0026lt;script\u0026gt; function onStartGame() { console.log('Clicked on Start Game.); } \u0026lt;/script\u0026gt; \u0026lt;gameface-menu orientation=\u0026quot;vertical\u0026quot;\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot; onclick=\u0026quot;onStartGame()\u0026quot;\u0026gt;Start Game\u0026lt;/menu-item\u0026gt; \u0026lt;/gameface-menu\u0026gt;  Nesting Menus # You can put a \u0026lt;gameface-menu\u0026gt; element as a child of \u0026lt;menu-item\u0026gt; of you want to have a sub-menu. The nested menu will be automatically displayed on click of the parent menu-item. It will also be automatically positioned.\n\u0026lt;gameface-menu\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Start Game\u0026lt;/menu-item\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt; Settings \u0026lt;gameface-menu id=\u0026quot;settings\u0026quot; orientation=\u0026quot;vertical\u0026quot;\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Graphics\u0026lt;/menu-item\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Keyboard\u0026lt;/menu-item\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Mouse\u0026lt;/menu-item\u0026gt; \u0026lt;/gameface-menu\u0026gt; \u0026lt;/menu-item\u0026gt; \u0026lt;menu-item slot=\u0026quot;menu-item\u0026quot;\u0026gt;Credits\u0026lt;/menu-item\u0026gt; \u0026lt;/gameface-menu\u0026gt;  Add the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;menus/menu.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;menus/bottom/bottom.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;menus/left/left.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;menus/right/right.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\n"},{"id":27,"href":"/GameUIComponents/en/examples/menu/","title":"Menu","content":"   body { width: 100%; height: 100%; margin: 0px; padding: 0px; } [data-dark-mode] menu-item:not(.guic-menu-active):not(.guic-menu-hover):not(.guic-menu-active-menu-item):not([disabled]) { color: #ccc; background-color: var(--bs-body-color); } [data-dark-mode] .guic-menu-hover { color: var(--bs-body-color); } gameface-menu { border: 2px solid #ccc; } gameface-left-menu { border: 2px solid #ccc; } [data-dark-mode] menu-item[disabled] { background-color: var(--bs-body-color); color: rgb(95, 95, 95); } .left-menu, .right-menu { top: 20vh; } .page-wrapper { height: 45vh; }    Start Game Settings  Graphics Keyboard  Graphics Keyboard Mouse  Graphics Keyboard Mouse     Mouse    Hero Gallery Credits     "},{"id":28,"href":"/GameUIComponents/en/components/modal/","title":"Modal","content":"The modal is part of the Gameface custom components suite. As most of the components in this suite it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-modal\nUsage # The modal component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the modal component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-modal/umd/modal.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the modal component to your html:  \u0026lt;gameface-modal\u0026gt;\u0026lt;/gameface-modal\u0026gt;  This is all! Load the file in Gameface to see the modal.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the modal from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import modal from 'coherent-gameface-modal';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import modal from './node_modules/coherent-gameface-modal/umd/modal.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const modal = require('coherent-gameface-modal');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nCustomizing the Modal # The modal has three slots:\n header - located on the top of the modal; it usually contains the heading body - located in the center; this is where the main content is put footer - located at the bottom; this is where the action buttons are placed  Add class=\u0026ldquo;close\u0026rdquo; to any button that should close the modal.\nUse the slots to put customized background or label.\n\u0026lt;gameface-modal\u0026gt; \u0026lt;div slot=\u0026quot;header\u0026quot;\u0026gt; Character name selection \u0026lt;/div\u0026gt; \u0026lt;div slot=\u0026quot;body\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;confirmation-text\u0026quot;\u0026gt;Are you sure you want to save this name?\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div slot=\u0026quot;footer\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;button id=\u0026quot;confirm\u0026quot; class=\u0026quot;close guic-modal-button confirm controls\u0026quot;\u0026gt;Yes\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;close guic-modal-button discard controls\u0026quot;\u0026gt;No\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/gameface-modal\u0026gt;  Add the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\nYou can put any custom styles inline or use class names and add an external file.\n"},{"id":29,"href":"/GameUIComponents/en/examples/modal/","title":"Modal","content":"   .page-wrapper { height: 45vh; } .character-customization { display: flex; flex-direction: row; } .save { margin-left: 10px; } .hidden { display: none; } .disabled { background-color: #eeeeee; color: #7b7878; pointer-events: none; } .guic-modal { top: auto; left: auto; display: block; z-index: 11112; overflow: hidden; color: var(--bs-body-color); } .guic-modal-button { width: 100px; height: 30px; border: none; background-color: #adacac; } .guic-modal-button:hover { background-color: rgb(121, 123, 131); } .actions { display: flex; flex-direction: row; justify-content: center; } .confirmation-text { text-align: center; } .controls { margin-left: 20px; }    Chose a name for your character.\nSave  The name you chose is:    Character name selection  Are you sure you want to save this name?  Yes No        "},{"id":30,"href":"/GameUIComponents/en/privacy-policy/","title":"Privacy Policy","content":"Data collected on the basis of consent # Upon your request and expression of consent, we collect the following data for the purpose of providing services to you. Your data is not used for any other purposes or shared with third parties. It is removed upon your withdrawal of consent.\nStatistics # The website uses a minimal build of Google Analytics, a service which transmits website traffic data to Google servers in the United States and allows us to notice trends to improve the user experience on our website. This minimal build processes personal data such as: the unique User ID set by Google Analytics, the date and time, the title of the page being viewed, the URL of the page being viewed, the URL of the page that was viewed prior to the current page, the search words used to search for content through the Search field, the screen resolution, the time in local timezone, the links clicked on to an outside domain, the type of device, and the country, region, and city.\nCookies # Cookies are text files placed on your computer to collect standard Internet log information and visitor behavior information. When you visit our websites, we may collect information from you automatically through cookies or similar technology.\nFor further information, visit allaboutcookies.org.\nHow do we use cookies? #  Understanding how you use our website.  What types of cookies do we use? # There are a number of different types of cookies, however, our website uses:\n Functionality (Preferences) cookies – our company uses these cookies so that we recognize you on our website and remember your previously selected preferences. These could include what language you prefer and location you are in. A mix of first-party and third-party cookies are used. Statistics (Performance) cookies – these cookies are used to collect information about how you use our website, like which pages you visited and which links you clicked on. None of this information can be used to identify you. It is all aggregated and, therefore, anonymized. This includes cookies from third-party analytics services as long as the cookies are for the exclusive use of the owner of the website visited.  How to manage cookies # You can set your browser not to accept cookies, and the above website tells you how to remove cookies from your browser. However, in a few cases, some of our website features may not function as a result.\nUpon opening our website for the first time, a cookie notification pop-up will be displayed. You can choose to opt-out of the Statistics cookies by clicking on the \u0026ldquo;Let me choose\u0026rdquo; link.\nIf you don\u0026rsquo;t interact with the cookie notification pop-up, no cookies will be stored.\nPrivacy policies of other websites # This website contains links to other websites. Our privacy policy applies only to our website, so if you click on a link to another website, you should read their privacy policy.\n"},{"id":31,"href":"/GameUIComponents/en/components/progress-bar/","title":"Progress bar","content":"The progress-bar is part of the Gameface custom components suite.\nInstallation # npm i coherent-gameface-progress-bar\nUsage # The progress-bar component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the progress-bar component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-progress-bar/umd/progress-bar.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the progress-bar component to your html:  \u0026lt;gameface-progress-bar\u0026gt;\u0026lt;/gameface-progress-bar\u0026gt;  Configuration and usage is explained further down the document.\nImport using ES modules:\nimport components from 'coherent-gameface-components'; import progressBar from 'coherent-gameface-progress-bar';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder.\nUsage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const progressBar = require('coherent-gameface-progress-bar');  The CommonJS(CJS) modules are native for NodeJS environment, be sure to use a module bundler in order to be able to import the components in a browser.\nConfiguration and Usage # The progress-bar has data-animation-duration attribute by which the animation duration between the start and the end target value is set. The value is expected to be a number and it is used as milliseconds.\nThe attribute is optional and if not provided, there will be no animation when setting the new progress.\nHere is an example:\n\u0026lt;gameface-progress-bar data-animation-duration=\u0026quot;2000\u0026quot;\u0026gt; \u0026lt;/gameface-progress-bar\u0026gt;  Add the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\nLoad the HTML file in Gameface to see the progress-bar.\nUsage # Taking into account the example code above and then:\nconst progressBar = document.querySelector('gameface-progress-bar'); // and set the progress with: progressBarOne.setProgress(100);  Specifications Overview #  The progress can be set in ascending or descending order. Works with and without an animation (through the data-animation-duration attribute on the HTML element). Provide values between 0 and 100. This is the target % to which the bar will animate.  "},{"id":32,"href":"/GameUIComponents/en/examples/progress-bar/","title":"Progress bar","content":"   .page-wrapper { position: relative; font-size: 3vh; height: 45vh; } [data-dark-mode] .page-wrapper { color: #dee2e6; } .progress-bar-wrapper-one, .progress-bar-wrapper-two, .progress-bar-wrapper-three { position: absolute; top: 0vh; width: 100%; height: 15px; } .progress-bar-wrapper-two { top: 10vh; } .progress-bar-wrapper-three { top: 20vh; }    0% - 100% with 2000ms animation duration.   0% - 100% with no animation.   Random progress set on random interval between 250 and 750 ms with 1000ms animation duration.     const progressBarOne = document.getElementById('progress-bar-one'); progressBarOne.setProgress(100); function getRandomInt(min, max) { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min) + min); } const progressBarTwo = document.getElementById('progress-bar-two'); let progressBarTwoValue = 0; setInterval(() = { (progressBarTwoValue { progressBarThree.setProgress(getRandomInt(0, 100)); }, getRandomInt(250, 750));   "},{"id":33,"href":"/GameUIComponents/en/components/radial-menu/","title":"Radial menu","content":"The radial-menu is part of the Gameface custom Components suite.\nInstallation # npm i coherent-gameface-radial-menu\nUsage # The radial-menu Component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the Components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the radial-menu Component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-radial-menu/umd/radial-menu.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the radial-menu Component to your html:  \u0026lt;gameface-radial-menu\u0026gt;\u0026lt;/gameface-radial-menu\u0026gt;  This is all! Load the file in Gameface to see the radial-menu.\nImport using ES modules:\nimport components from 'coherent-gameface-components'; import RadialMenu from 'coherent-gameface-radial-menu';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder.\nUsage with CJS modules: #  Import the Components library:  const components = require('coherent-gameface-components'); const RadialMenu = require('coherent-gameface-radial-menu');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nFeatures and Configuration # The radial menu has a few data-* attributes by which it is configured.\nHere is an example with all available attributes:\n\u0026lt;gameface-radial-menu id=\u0026quot;radial-menu-one\u0026quot; data-name=\u0026quot;Radial Menu\u0026quot; data-change-event-name=\u0026quot;radOneItemChanged\u0026quot; data-select-event-name=\u0026quot;radOneItemSelected\u0026quot; data-open-key-code=\u0026quot;SHIFT\u0026quot;\u0026gt; \u0026lt;/gameface-radial-menu\u0026gt;  The id attribute is added so the radial menu instance can be accessed later for providing the items to it. It is not required.\nName # Set the name by providing data-name=\u0026quot;Example Name\u0026quot;. This will be visualized at the center of the menu.\nAssign Open Key # Set a key for opening the menu by directly providing a keyCode value to the data-open-key-code attribute or use some of the defined names in the components.KEYCODES object e.g. HOME, CTRL, SPACE.\nPopulate Items # Create segments in the menu by providing an exposed array of items to the instance of the targeted radial menu on the items property like so:\nconst radialMenuOne = document.getElementById('radial-menu-one'); // Provide the items. radialMenuOne.items = itemsModel.items;  Events #   Provide the name of the event that will be emitted by the component (instance) when another item is highlighted to the data-change-event-name attribute.\n  Provide the name of the event that will be emitted by the component (instance) when an item is selected to the data-select-event-name attribute.\n  A basic approach which allows executing code through the event and the code or the attached functions are decoupled from the component itself.\nListener for Opening # If case there is a need to disable the radial menu from opening, just get the component Element object and call removeOpenKeyEvent().\nExample:\nconst radialMenuOne = document.getElementById('radial-menu-one'); radialMenuOne.removeOpenKeyEvent();  Then re-add the listener with radialMenuOne.addOpenKeyEvent() when needed.\nIn case the key with which the radial menu should be opened needs to change, before adding the event, change the keyCode with radialMenuOne.openKeyCode = \u0026lt;number\u0026gt;;\nSpecifications Overview #   Event listeners for mousemove, click, resize and keyup are added on opening the menu and removed when it is closed.\n  The topmost item\u0026rsquo;s segment id is 0 and the first item from the provided array is created there.\n  Multiple menus can be created.\n  The menu is hidden with visibility: hidden so it is more light when it is opened again.\n  Add the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\n"},{"id":34,"href":"/GameUIComponents/en/examples/radial-menu/","title":"Radial menu","content":"   body { width: 100vw; height: 100vh; margin: 0; overflow: hidden; } .radial-menu-component { position: absolute; left: 40vw; top: 20vh; } .radial-menu-component-two { position: absolute; right: 5vw; top: 15vh; } .guic-radial-menu { border: 2px solid #000; border-radius: 50%; } [data-dark-mode] .guic-radial-menu { border: 2px solid #ccc; } .guic-radial-menu-items { background-color: rgba(102, 102, 102, 0.5); } [data-dark-mode] .guic-radial-menu-items { background-color: rgba(102, 102, 102, 0.2); } .guic-radial-menu-center-bullseye { background-color: #000; } [data-dark-mode] .guic-radial-menu-center-bullseye { background-color: #ccc; } .guic-radial-menu-center-text { color: #fff; } [data-dark-mode] .guic-radial-menu-center-text { color: #000; } .guic-radial-menu-center-bullseye-outer { border-color: #000; } [data-dark-mode] .guic-radial-menu-center-bullseye-outer { border-color: #ccc; } .guic-radial-menu-selector-bg-2 { border: 8.25vh solid rgba(0, 0, 0, 0.5); } [data-dark-mode] .guic-radial-menu-selector-bg-2 { border: 8.25vh solid rgba(255, 255, 255, 0.75); } .page-wrapper { height: 45vh; }    Hold the Left Shift button to show the menu.\n    const itemsModel = { items: [ { id: '125', name: 'Pistol X0RG', imagePath: \"https://CoherentLabs.github.io/GameUIComponents//images/weapon1.png\", }, { id: '421', name: 'Shotgun SBud', imagePath: \"https://CoherentLabs.github.io/GameUIComponents//images/weapon2.png\", }, { id: '735', name: 'Assault Brawl D0G', imagePath: \"https://CoherentLabs.github.io/GameUIComponents//images/weapon3.png\", }, { id: '234', name: 'Laser Pistol G0RG', imagePath: \"https://CoherentLabs.github.io/GameUIComponents//images/weapon4.png\", }, { id: '635', name: 'Big Fancy Gun V04', imagePath: \"https://CoherentLabs.github.io/GameUIComponents//images/weapon5.png\", }, { id: '872', name: 'Snippy Flagger', imagePath: \"https://CoherentLabs.github.io/GameUIComponents//images/weapon6.png\", }, { id: '446', name: 'Slide-Action DBud', imagePath: \"https://CoherentLabs.github.io/GameUIComponents//images/weapon2.png\", }, { id: '247', name: 'Laser Blagger', imagePath: \"https://CoherentLabs.github.io/GameUIComponents//images/weapon4.png\", } ] }; const radialMenuOne = document.getElementById('radial-menu-one'); // Provide the items. radialMenuOne.items = itemsModel.items; const radialMenuTwo = document.getElementById('radial-menu-two'); // Provide the items. radialMenuTwo.items = itemsModel.items; // Listen to the same event names provided in the related attributes. radialMenuOne.addEventListener('radOneItemChanged', () = { console.log(`Highlighted item has changed.`); }); radialMenuOne.addEventListener('radOneItemSelected', () = { console.log( ('Item ' + ' with id: ' + radialMenuOne.items[radialMenuOne.currentSegmentId].id + ' in segment #' + radialMenuOne.currentSegmentId) + ' selected'); });   "},{"id":35,"href":"/GameUIComponents/en/components/radio-button/","title":"Radio button","content":"The radio-button is part of the Gameface custom components suite.\nUsage # The radio-button component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the radio-button component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-radio-button/umd/coherent-gameface-radio-button.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the radio-button group and button custom Elements to your html:  \u0026lt;gameface-radio-group\u0026gt; \u0026lt;radio-button slot=\u0026quot;radio-button\u0026quot;\u0026gt;\u0026lt;/radio-button\u0026gt; \u0026lt;radio-button slot=\u0026quot;radio-button\u0026quot;\u0026gt;\u0026lt;/radio-button\u0026gt; \u0026lt;/gameface-radio-group\u0026gt;  Configuration and usage is explained further down the document.\nImport using ES modules:\nimport components from 'coherent-gameface-components'; import radioButton from 'coherent-gameface-radio-button';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder.\nUsage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const radioButton = require('coherent-gameface-radio-button');  The CommonJS(CJS) modules are native for NodeJS environment, be sure to use a module bundler in order to be able to import the components in a browser.\nConfiguration and Usage # The radio-button has value and checked getters and setters. Also each radio button has its own radio group element which is convenient.\nHere is an example:\n\u0026lt;gameface-radio-group\u0026gt; \u0026lt;radio-button slot=\u0026quot;radio-button\u0026quot;\u0026gt;Tab Targeting\u0026lt;/radio-button\u0026gt; \u0026lt;radio-button slot=\u0026quot;radio-button\u0026quot; checked\u0026gt;Action Combat\u0026lt;/radio-button\u0026gt; \u0026lt;/gameface-radio-group\u0026gt;  Add the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\nLoad the HTML file in Gameface to see the radio-button. You can also see an example in the demo folder of the component.\nUsage # On top of using the radioButton.checked and radioButton.checked you can get one of the \u0026lt;gameface-radio-group\u0026gt; Elements and call radioGroup.allButtons which will return an Array of all \u0026lt;radio-button\u0026gt; Elements.\nWhen a radio-button as a checked attribute, this will be the initially checked button.\nMouse focusing works as well as keyboard navigation and focusing using the arrow keys and Enter or Space keys.\n"},{"id":36,"href":"/GameUIComponents/en/examples/radio-button/","title":"Radio button","content":"   body { width: 100vw; height: 100vh; justify-content: center; } .section { margin-bottom: 15px; } .section-label { font-size: 24px; margin-bottom: 5px; } .radio-button { line-height: normal; }    Targeting System:  Tab Targeting Action Combat   HUD Elements Placement:  Locked (Default) Grid Slots (Sticky) Unlocked      "},{"id":37,"href":"/GameUIComponents/en/components/rangeslider/","title":"Rangeslider","content":"The gameface-rangeslider is part of the Gameface custom components suite. As most of the components in this suite it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-rangeslider\nUsage # The gameface-rangeslider component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the gameface-rangeslider component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-rangeslider/umd/rangeslider.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the gameface-rangeslider component to your html:  \u0026lt;gameface-rangeslider\u0026gt;\u0026lt;/gameface-rangeslider\u0026gt;  This is all! Load the file in Gameface to see the rangeslider.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the rangeslider from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import RangeSlider from 'coherent-gameface-rangeslider';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import GamefaceSlider from './node_modules/coherent-gameface-rangeslider/umd/rangeslider.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const RangeSlider = require('coherent-gameface-rangeslider');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nHow to use # To use simply add\n\u0026lt;gameface-rangeslider\u0026gt;\u0026lt;/gameface-rangeslider\u0026gt;  to your html file.\nYou can use the following attributes to customize the rangeslider\n   Attribute Type Default Description Notes     value Number 0 The initial value of the rangeslider If there is a min value set, it defaults to it   min Number 0 The minimum value of the rangeslider    max Number 100 The maximum value of the rangeslider    step Number 1 The step of the handle    grid Boolean false Draws a grid with numbers or array entries To enable it you just need to put \u0026lsquo;grid\u0026rsquo; as attribute   thumb Boolean false Draws a thumb with a value for each handle To enable it you just need to put \u0026lsquo;thumb\u0026rsquo; as attribute   two-handles Boolean false Creates two handles to specify a range To enable it you just need to put \u0026lsquo;two-handles\u0026rsquo; as attribute. If enabled the value attribute is ignored   custom-handle String '' Element selector Will find the element with the specified selector and will automatically render the slider value in it. This option will work when the two-handles option is set to false.   custom-handle-left String '' Element selector Will find the element with the specified selector and will automatically render the left slider value in it. This option will work when the two-handles option is set to true.   custom-handle-right String '' Element selector Will find the element with the specified selector and will automatically render the right slider value in it. This option will work when the two-handles option is set to true.   values Array [] Uses an array for the rangeslider The array must be added in the following format \u0026lsquo;[\u0026ldquo;value1\u0026rdquo;, \u0026ldquo;value2\u0026rdquo;]\u0026rsquo; where the array is wrapped in single quotes and the values in double. If there is an Array the two-handles, min and max attributes are ignored    Examples # \u0026lt;gameface-rangeslider orientation=\u0026quot;horizontal\u0026quot; min=\u0026quot;56\u0026quot; max=\u0026quot;255\u0026quot; grid thumb step=\u0026quot;20\u0026quot;\u0026gt;\u0026lt;gameface-rangeslider\u0026gt; \u0026lt;gameface-rangeslider orientation=\u0026quot;horizontal\u0026quot; min=\u0026quot;56\u0026quot; max=\u0026quot;255\u0026quot; grid thumb two-handles step=\u0026quot;20\u0026quot;\u0026gt;\u0026lt;/gameface-rangeslider\u0026gt; \u0026lt;gameface-rangeslider orientation=\u0026quot;horizontal\u0026quot; grid thumb value=\u0026quot;Hard\u0026quot; values='[\u0026quot;Easy\u0026quot;,\u0026quot;Normal\u0026quot;, \u0026quot;Hard\u0026quot;, \u0026quot;Expert\u0026quot;, \u0026quot;Nightmare\u0026quot;]' step=\u0026quot;20\u0026quot;\u0026gt;\u0026lt;/gameface-rangeslider\u0026gt; \u0026lt;gameface-rangeslider orientation=\u0026quot;vertical\u0026quot; min=\u0026quot;56\u0026quot; max=\u0026quot;255\u0026quot; grid thumb step=\u0026quot;20\u0026quot;\u0026gt;\u0026lt;gameface-rangeslider\u0026gt;  "},{"id":38,"href":"/GameUIComponents/en/examples/rangeslider/","title":"Rangeslider","content":"   gameface-rangeslider { /* reset the :root styles comming from Hugo's theme.min.css in order to show the thumb correctly */ line-height: normal; } [data-dark-mode] .guic-rangeslider-horizontal-grid-text, [data-dark-mode] .guic-rangeslider-vertical-grid-text { color: #dee2e6; } [data-dark-mode] .guic-rangeslider-horizontal-grid-pol, [data-dark-mode] .guic-rangeslider-vertical-grid-pol { background-color: #dee2e6; } [data-dark-mode] .guic-rangeslider-horizontal-rangeslider, [data-dark-mode] .guic-rangeslider-vertical-rangeslider { background-color: rgba(255, 255, 255, 0.7); } .flex-container { display: flex; flex-direction: row; flex-wrap: wrap; align-items: center; }      Current value:     Current left value:  Current right value:     Current value:       Current value:    Current value:    Current value:  Current value:        "},{"id":39,"href":"/GameUIComponents/en/components/router/","title":"Router","content":"The gameface-router is part of the components suite. It is not a custom element like most of the components in this suite. It is a JavaScript library similar to the components library.\nInstallation # npm i coherent-gameface-router\nImporting the Router # The router component comes with UMD and CJS builds.\nWith UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the gameface-router component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-router/umd/router.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  If you import the router using a script tag - a global variable router will be available. You can access the Router, Route, BrowserHistory, HashHistory from it:\nconst browserHistory = new router.BrowserHistory(); router.Route.use(browserHistory); new router.Router({ '/': 'home-page', '/start-game': '\u0026lt;div\u0026gt;Start Game\u0026lt;/div\u0026gt;', '/heroes': '\u0026lt;div\u0026gt;Heroes Page\u0026lt;/div\u0026gt;', '**': '\u0026lt;div\u0026gt;404\u0026lt;/div\u0026gt;' }, browserHistory);  If you wish to import the modules using JavaScript you can remove the script tags which import the components and the gameface-router from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import { Router } from 'coherent-gameface-router';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively, you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import { Router } from './node_modules/coherent-gameface-router/umd/router.production.min.js';  With CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const gameface-router = require('coherent-gameface-router');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to use them in a browser.\nAvailable Modules # Along with the router comes the BrowserHistory and HashHistory package, a custom element called \u0026lt;gameface-route\u0026gt; and another custom element called \u0026lt;router-view\u0026gt;.\nThe Browser and Hash History # Both histories are a thin wrapper around the HTML5 history object. It provides methods that help the router keep better track of the state of history. The main difference between them is that the BrowserHistory will use the history object to control the current path and the HashHistory will use the history object in collaboration with the window.location.hash. When the router path has changed:\n BrowserHistory will change the path directly in the page URL (for example - from \u0026lsquo;C:/Test/\u0026rsquo; to \u0026lsquo;C:/Test/start\u0026rsquo;) HashHistory will append the hash symbol # to the current URL and then append the current router path (for example - from \u0026lsquo;C:/Test/index.html\u0026rsquo; to \u0026lsquo;C:/Test/index.html#/start\u0026rsquo;)  When to use the browser or hash history? # If you have a component that is linked with a route path and inside this component, you are referring assets relative to the main directory then it is a good idea to use the HashHistory instead the BrowserHistory because it will preserve the current working directory (that is the directory of the index page) and the assets will be linked correctly to the component.\nIn any other scenario, the BrowserHistory can be used.\nThe Route Element # The \u0026lt;gameface-route\u0026gt; custom element is a special link element that navigates to a specified page. It updates the BrowserHistory or HashHistory and as a result of this, the router updates the page.\nThe \u0026lt;gameface-route\u0026gt; has an attribute called to. It specifies the path to the page it is supposed to navigate to.\n\u0026lt;gameface-route to=\u0026quot;/start-game\u0026quot;\u0026gt;Start Game\u0026lt;/gameface-route\u0026gt;  You can specify a class name that will be added to the \u0026lt;gameface-route\u0026gt; element when it is active. To do so define your style using css:\n.myActiveStyle { color: blue; }  And then add it as an attribute of the \u0026lt;gameface-route\u0026gt;:\n\u0026lt;gameface-route activeClass=\u0026quot;myActiveStyle\u0026quot;\u0026gt;\nYou can apply the activeClass to multiple \u0026lt;gameface-route\u0026gt; elements by adding it to a container:\n\u0026lt;div activeClass=\u0026quot;myActiveStyle\u0026quot;\u0026gt; \u0026lt;gameface-route to=\u0026quot;/\u0026quot;\u0026gt;Home\u0026lt;/gameface-route\u0026gt; \u0026lt;gameface-route to=\u0026quot;/play\u0026quot;\u0026gt;Play\u0026lt;/gameface-route\u0026gt; \u0026lt;gameface-route to=\u0026quot;/settings\u0026quot;\u0026gt;Settings\u0026lt;/gameface-route\u0026gt; \u0026lt;/div\u0026gt;  If you have both activeClass on the wrapper an on some individual elements, those routes that don\u0026rsquo;t have own activeClass will inherit it from the parent element and those that have will use their own:\n\u0026lt;div activeClass=\u0026quot;green\u0026quot;\u0026gt; \u0026lt;gameface-route to=\u0026quot;/\u0026quot;\u0026gt;Home\u0026lt;/gameface-route\u0026gt; // will be green \u0026lt;gameface-route activeClass=\u0026quot;red\u0026quot; to=\u0026quot;/play\u0026quot;\u0026gt;Play\u0026lt;/gameface-route\u0026gt; // will be red \u0026lt;gameface-route to=\u0026quot;/settings\u0026quot;\u0026gt;Settings\u0026lt;/gameface-route\u0026gt; // will be green \u0026lt;/div\u0026gt;  If you don\u0026rsquo;t add activeClass to the wrapper div and the route element then the default light blue color will be used.\nThe RouterView Element # The \u0026lt;router-view\u0026gt; element is a placeholder for the components that will be rendered upon navigation. Put the \u0026lt;router-view\u0026gt; somewhere in the document:\n\u0026lt;gameface-route to=\u0026quot;/start-game\u0026quot;\u0026gt;Start Game\u0026lt;/gameface-route\u0026gt; \u0026lt;router-view\u0026gt;\u0026lt;/router-view\u0026gt;  Usage # You can import the Router, Route, BrowserHistory, and the HashHistory like this:\nimport { Router, Route, BrowserHistory, HashHistory } from 'coherent-gameface-router';  Route is a helper class that sets up the \u0026lt;gameface-route\u0026gt; element.\nThe router can not work without history, it is mandatory, so the first thing you need to do is to instantiate the history:\nconst myHistory = new BrowserHistory(); or const myHistory = new HashHistory();  The \u0026lt;gameface-route\u0026gt; also depends on the history. To initialize it do:\nRoute.use(myHistory);  The router is configured using an object of { \u0026lsquo;route\u0026rsquo;: \u0026lsquo;component-name | HTML\u0026rsquo; } pairs:\nconst config = { '/': 'home-page', '/start-game': 'start-game-page', '/heroes': 'heroes-page', }; You can also directly put the HTML that you want to be displayed: const config = { '/': '\u0026lt;div\u0026gt;Home\u0026lt;/div\u0026gt;', '/start-game': '\u0026lt;button\u0026gt;Start Game\u0026lt;button\u0026gt;', }; const router = new Router(config, myHistory);  And the second parameter is the history. The components in the configuration are the names of the custom element. When the router navigates to \u0026lsquo;/start-game\u0026rsquo; it will show the \u0026lt;start-game-page\u0026gt; element.\nRoute Params \u0026amp; Wildcard Navigation # Route Params # You can specify dynamic route parameters by using colon(:) in the path:\nconst config = { '/': 'home-page', '/start-game': 'start-game-page', '/heroes': 'heroes-page', '/heroes/:id': 'hero-component', }; const router = new Router(config, myHistory);  Now, if the router navigates to a route \u0026lsquo;/heroes/support\u0026rsquo;, the hero-component will receive an object with the route parameter and its current value: element.params = { id: 'support' }. The key used to save the route parameters is called params and the key for the parameter itself is the value after the :.\nA route configuration: \u0026lsquo;/start-game/:mode\u0026rsquo; and a route: \u0026lsquo;/start-game/ranked\u0026rsquo;\nwill pass a params object - { mode: \u0026lsquo;ranked\u0026rsquo; }.\nConfiguring a Wildcard Route # The wildcard route is used to specify which component to be displayed if the router doesn\u0026rsquo;t match any of the configured routes. It\u0026rsquo;s the missing 404 page displayed in websites when the server returns a \u0026ldquo;not found\u0026rdquo; response code - 404.\nTo configure the wildcard route use two asterisks(**) in the route:\nconst config = { '/': 'home-page', '/start-game': 'start-game-page', '/heroes': 'heroes-page', '/heroes/:id': 'hero-component', '**': 'not-found-page' }; const router = new Router(config, myHistory);  Nesting Routers # Sometimes if your UI has a lot of nesting levels, the routes can get long and it can become hard to read and understand them, especially if you have a long list of routes:\nconst config = { '/': 'home-page', '/start-game': 'start-game-page', '/heroes': 'heroes-page', '/heroes/:id': 'hero-page', '/heroes/:id/name': 'hero-name-page', '/heroes/:id/abilities': 'hero-abilities-page', '**': 'not-found-page' };  To avoid this, you can nest routers. Instead of specifying all of your routes in a single object, you can pass another router to a path and define the routes in the nested router relative to its parent. For the example above, we can create a heroesRouter which will handle all sub-routes of the heroes page:\nconst heroesRouter = new Router({ '/support': 'support-page', '/tanks': 'tanks-page', '/id:/name': 'hero-name-page' '/id:/abilities': 'hero-abilities-page' });  And we pass the heroesRouter to the main router:\nconst config = { '/': 'home-page', '/start-game': 'start-game-page', '/heroes': 'heroes-page', '/heroes/:id': heroesRouter, '**': 'not-found-page' };  Note, that only the top router requires the history instance, you don\u0026rsquo;t have to pass it to the nested router, they will receive it from the parent\nIntercepting Navigation # If you would like to prevent the navigation at some point, you can pass a onBeforeNavigation function that will be executed as the name suggests - before navigation. The onBeforeNavigation receives a callback as a first parameter. This is the navigation callback that was intercepted. To continue the navigation you must call the callback. The second parameter are the callback params:\nfunction preventNavigation (callback, params) =\u0026gt; { // do nothing - will not navigate // callback.apply(null, params); - will navigate }  And pass this callback to the router:\nconst router = new Router({}, myHistory, preventNavigation);  Just like the history, only the main router can receive a preventNavigation callback.\nManually updating the History # You can manually set new entries to the history stack. For example to setup the initial page:\nconst state = { current: '/', id: myHistory.currentRouteId }; const title = 'home'; myHistory.pushState(state, title, '/');  BrowserHistory.pushState and HashHistory.pushState accepts the same parameter the standard history.pushState accepts.\nDirectly updating the global history object will not trigger the router, if you want to navigate manually, use the BrowserHistory instance.\nYou can also use the history methods for manually updating the history like history.go, history.back, history.forward - This will work just in Chrome and not in GameFace!\nThis is all the information you need to setup the router. For more detailed examples check the demo located the /demo folder.\nAdd the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\n"},{"id":40,"href":"/GameUIComponents/en/examples/router/","title":"Router","content":"  .page-wrapper { height: 45vh; } .menu { display: flex; align-items: center; border: 1px solid #a5a3a3; height: 25px; margin-bottom: 25px; } body { background-color: #fff; } .active { color: var(--default-color-blue); } .healers-menu { display: flex; height: 135px; margin-bottom: 25px; } .avatar-container { display: flex; flex-direction: column; width: 100px; } .avatar { margin-bottom: 5px; min-height: 50px; height: 100px; background-size: contain; background-repeat: no-repeat no-repeat; } .avatar1 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/imgAvatar_2.png); } .avatar2 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/imgAvatar_3.png); } .avatar3 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/imgAvatar_4.png); } .tanks-menu { display: flex; height: 135px; margin-bottom: 25px; } .tank-avatar1 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/avatar1.png); } .tank-avatar2 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/avatar4.png); } .tank-avatar3 { background-image: url(https://CoherentLabs.github.io/GameUIComponents//images/avatar5.png); }   Home Start Game Heroes Missing Page      const routes = document.querySelectorAll('gameface-route'); let activeRoute = document.querySelector('gameface-route.active'); for (let i = 0; i { const currentRoute = e.currentTarget; activeRoute.classList.remove('active'); currentRoute.classList.add('active'); activeRoute = currentRoute; }); }   "},{"id":41,"href":"/GameUIComponents/en/components/scrollable-container/","title":"Scrollable container","content":"The gameface-scrollable-container is part of the Gameface custom components suite. As most of the components in this suite it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-scrollable-container\nUsage # The gameface-scrollable-container component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the gameface-scrollable-container component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-scrollable-container/umd/scrollable-container.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the gameface-scrollable-container component to your html:  \u0026lt;gameface-scrollable-container class=\u0026quot;scrollable-container-component\u0026quot;\u0026gt;\u0026lt;/gameface-scrollable-container\u0026gt;  This is all! Load the file in Gameface to see the gameface-scrollable-container.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the gameface-scrollable-container from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import GamefaceScrollableContainer from 'coherent-gameface-scrollable-container';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import GamefaceScrollableContainer from './node_modules/coherent-gameface-scrollable-container/umd/scrollable-container.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const GamefaceScrollableContainer = require('coherent-gameface-scrollable-container');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to use them in a browser.\nManually showing and resizing the scrollbar # If the scrollable container is hidden, you\u0026rsquo;ll need to manually re-initialize the scrollbar once you show the scrollable container. The scrollable container has a method called showScrollBar. It accepts the scrollbar as an argument:\nconst scrollableContainer = document.querySelector('.guic-scrollable-container'); scrollableContainer.showScrollBar(scrollableContainer.scrollbar);  To resize the scrollbar call the resize function of the scrollbar and pass it the scrollable container as an argument:\nconst scrollableContent = scrollableContainer.querySelector('[name=\u0026quot;scrollable-content\u0026quot;]'); const scrollableContainer = document.querySelector('.guic-scrollable-container'); scrollableContainer.scrollbar.resize(scrollableContent);  The scrollableContainer has a method called shouldShowScrollbar which checks if the scrollable content is bigger than the scrollable container and if it is - it shows the scrollbar. Use this if you are not sure if you have to show the scrollbar:\nconst scrollableContainer = document.querySelector('.guic-scrollable-container'); scrollableContainer.shouldShowScrollbar();  If you need to hide the scrollbar - use the hideScrollBar method and pass it the scrollbar as an argument:\nconst scrollableContainer = document.querySelector('.guic-scrollable-container'); scrollableContainer.hideScrollBar(scrollableContainer.scrollbar);  Automatically showing and resizing the scrollbar # To automatically show, hide and resize the scrollbar set the automatic attribute to the \u0026lt;gameface-scrollable-container\u0026gt; element. This will initiate an observer that will monitor the scrollable-container for changes so that it can automatically re-adjust itself if it has to. Keep in mind that a mutationObserver can affect the performance of your UI. Consider manually re-adjusting the scrollbar if its content will change multiple tiles in a frame.\n\u0026lt;gameface-scrollable-container class=\u0026quot;scrollable-container-component fixed-width\u0026quot; automatic\u0026gt;\nAdd the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;node_modules/coherent-gameface-slider/styles/horizontal.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;node_modules/coherent-gameface-slider/styles/vertical.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\n"},{"id":42,"href":"/GameUIComponents/en/examples/scrollable-container/","title":"Scrollable container","content":"   body { background-color: transparent; } .guic-slider-component { width: 30px; } .guic-scrollable-container { background: none; width: 70%; height: 30vw; } .guic-vertical-slider-wrapper { height: 30vw; } .dynamic-content { display: none; } div.visible { display: block !important; } .fixed-width .guic-scrollable-container-wrapper { width: 35vw; height: 60vh; } .fixed-width .guic-vertical-slider-wrapper { height: 60vh; } .grid { display: flex; flex-direction: row; } .grid button { margin: 15px; padding: 10px; }    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In eu urna tempus, ultricies lacus fermentum, posuere arcu. Ut eget elit magna. Interdum et malesuada fames ac ante ipsum primis in faucibus. Suspendisse feugiat auctor finibus. Ut in euismod magna. Fusce eget dapibus arcu. Curabitur laoreet elit id lobortis tristique. Sed vel finibus turpis. Nulla sed lectus ante. Sed rutrum libero odio, non congue erat hendrerit non. Nunc in vulputate dolor, et dapibus neque. Sed accumsan sapien fermentum facilisis pharetra. Pellentesque fermentum, ligula faucibus suscipit elementum, erat ante ullamcorper tortor, id cursus mi eros ut lorem. Mauris condimentum leo vitae leo vehicula tincidunt. Quisque vehicula erat elit. Donec commodo bibendum ipsum vel commodo. Curabitur egestas massa sed purus dapibus commodo. Nam auctor tempus lacus, quis eleifend ipsum faucibus id. Nunc ullamcorper velit in lorem ultrices, eu auctor ante euismod. Donec in congue lacus. Quisque erat nibh, viverra sit amet ultrices eu, imperdiet ut lectus. Integer pellentesque convallis nibh id viverra. Nam consequat rhoncus placerat. Donec velit tortor, malesuada et scelerisque ut, commodo sit amet purus. Proin nec enim ultricies mi vulputate dignissim. Integer varius augue vel tortor semper, non tempor lectus tempor. Aenean ac iaculis lacus, vel placerat nunc. Praesent rhoncus nisi vel tortor sollicitudin, ut sollicitudin nunc cursus. Suspendisse fringilla magna non sapien commodo, et vulputate erat volutpat. Aenean suscipit pulvinar faucibus. Nullam semper porta purus vitae efficitur. Sed id pharetra ligula, eget aliquet libero. Duis eleifend blandit lorem sed hendrerit. Nulla volutpat dapibus aliquam. Vestibulum vehicula elementum dui id maximus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Proin aliquam pretium cursus. Vivamus in gravida odio, eu pulvinar quam. Sed sit amet elementum neque. Fusce dui dolor, laoreet a eros a, hendrerit ultricies nibh. Suspendisse aliquam magna diam, quis porttitor diam dictum viverra. Sed in lacus tincidunt, sodales quam non, dapibus lacus. Phasellus scelerisque velit elit, eget hendrerit ipsum lacinia eu. Aliquam vitae sem et mauris molestie porttitor. Vestibulum in convallis lectus. Nam at turpis eget mauris gravida ullamcorper. Sed metus ex, semper eget quam vitae, pellentesque gravida lectus. Etiam condimentum sit amet felis ac tempor. Duis finibus accumsan justo, id dictum purus ornare at. Mauris congue elementum pellentesque. Quisque vel tempor ipsum. Mauris dignissim suscipit ex vel posuere. Fusce mattis tortor in cursus feugiat. Duis consequat sem non tempor fringilla. Duis ac orci velit. Curabitur et sem elit. Nam enim nisl, pellentesque in rutrum a, tincidunt vitae augue. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam nunc tellus, ultricies vel vehicula ac, ultrices nec ipsum. Integer luctus vitae nunc quis sollicitudin. Proin id ipsum dapibus urna aliquet vulputate. Curabitur consequat tincidunt massa non condimentum. Sed at lobortis metus. Donec sed elit sit amet orci lacinia sagittis nec ac sapien. Etiam convallis nibh nec tellus mattis, in sagittis enim posuere. Pellentesque et pharetra diam. Integer lacinia dapibus felis, id ornare tellus pellentesque a. Quisque venenatis ligula sed nisl faucibus, non ornare quam porta. Nullam vitae luctus nibh. Duis quis consectetur urna. Vivamus elementum id nulla eu viverra. In maximus, libero ac placerat blandit, metus risus pretium augue, sed porta nunc risus ac justo. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Maecenas interdum eleifend convallis. Aliquam erat volutpat. Aliquam ac efficitur odio. Sed sit amet ex eget nibh volutpat maximus vitae facilisis dui. Cras vitae egestas nisi. In hac habitasse platea dictumst. Integer eget leo in enim gravida rhoncus vitae ut sapien. Donec eget sapien est. Sed sapien lacus, feugiat sed nibh at, luctus tempus velit. Nulla vel imperdiet nibh, at sodales lacus. Proin in consequat lacus. Suspendisse eu ullamcorper nisl. Donec arcu enim, fermentum vitae elementum vel, cursus tincidunt metus. Nulla aliquam enim quis sagittis dictum. Praesent venenatis sed elit non lobortis. Mauris sodales rutrum volutpat. Suspendisse eget sem et enim varius cursus quis in lectus. Fusce libero sapien, tincidunt sit amet pellentesque nec, consequat vel dolor. Quisque sit amet nibh suscipit justo scelerisque vehicula at in augue. Ut tincidunt blandit erat sed tincidunt. Maecenas imperdiet eleifend vulputate. Vivamus sit amet est suscipit, ornare tortor a, sagittis nibh. Quisque pretium vulputate bibendum. Proin interdum tortor vitae urna facilisis feugiat. In tincidunt enim massa, sit amet laoreet nisl aliquet et. Suspendisse quam turpis, egestas vitae efficitur et, hendrerit nec sem. Nullam commodo neque ipsum, vel iaculis mauris facilisis vel. Suspendisse at magna ut libero ornare tempor in non ex. Aenean maximus dictum turpis, et rutrum sapien elementum a. Nulla convallis ipsum ut efficitur convallis. Suspendisse suscipit iaculis scelerisque. Nunc eu dui augue. Duis nec pellentesque odio, a iaculis lacus. Morbi venenatis nibh lacus, quis molestie ante finibus in. Etiam scelerisque magna quis feugiat ultricies. Cras euismod massa sed risus aliquam eleifend. Phasellus finibus augue ac rhoncus mattis. Sed commodo erat quis urna faucibus facilisis. Cras sit amet risus nec nunc dignissim porttitor nec sit amet ligula. Mauris tincidunt cursus eros, in convallis magna ultricies eu. Donec ut faucibus ligula. In vitae dui dolor. Suspendisse varius non nisi id auctor. Suspendisse et ligula at elit vulputate commodo. Fusce aliquam sagittis orci, quis porta tellus. Donec nunc leo, viverra facilisis ante quis, tincidunt sagittis orci. Aliquam feugiat tincidunt posuere. Morbi nibh neque, lacinia ut semper id, efficitur quis mauris. Aliquam accumsan elit nec leo elementum, volutpat consectetur orci tempus. Pellentesque consectetur dapibus ante quis condimentum. Vestibulum tellus ex, pretium quis auctor id, fermentum a nisl. Suspendisse potenti. Mauris tristique, felis eget tempus maximus, eros lorem vestibulum risus, ac viverra enim est nec tortor. Aenean velit urna, molestie scelerisque neque eget, viverra facilisis enim. Etiam cursus venenatis velit, eleifend ultrices felis molestie eget. Etiam congue vehicula dui, molestie sagittis massa cursus sed. Nunc congue accumsan est at suscipit. Sed ut congue massa. Nulla non dui quis velit interdum pharetra. Proin posuere bibendum nibh non tincidunt. Phasellus id lectus lacus. In hac habitasse platea dictumst. Etiam placerat consequat scelerisque. Praesent vitae risus at felis laoreet congue. Donec rhoncus lacus eget dignissim convallis. Duis nisl neque, ultricies euismod nisl et, sagittis congue urna. Fusce rhoncus elit sit amet tellus convallis tempus. Etiam malesuada varius ex, sit amet feugiat sapien rutrum quis. Mauris at turpis cursus, vestibulum sem nec, consectetur libero. Morbi rutrum varius elementum. Proin scelerisque purus in libero laoreet, nec interdum sapien condimentum. Aliquam imperdiet ligula nec leo elementum pharetra. Quisque ac libero id nisi lobortis efficitur. Aliquam erat volutpat. Donec consectetur suscipit arcu sit amet posuere. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Pellentesque pulvinar sollicitudin odio a semper. Sed consectetur dui vel nisl egestas, et aliquam est iaculis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sodales lorem. Phasellus at pharetra ex, nec euismod massa. Cras sollicitudin interdum dignissim. Aliquam commodo efficitur posuere. Quisque et dolor in quam vulputate semper. Suspendisse euismod fermentum dictum. Sed pretium diam lacus. Sed sed erat tempor, gravida sem id, facilisis nibh. Aenean scelerisque urna non fermentum laoreet. Quisque faucibus lacinia sapien elementum faucibus. Duis id lorem a magna mollis efficitur. Integer venenatis eget leo nec viverra. Etiam ac felis sollicitudin, venenatis erat molestie, blandit ante. Aenean volutpat arcu enim, in ultrices arcu suscipit ac. Curabitur porta venenatis maximus. Vivamus sed viverra ipsum, nec posuere elit. Morbi placerat egestas massa, non convallis sem dignissim sit amet. Quisque arcu ex, auctor at elit non, dignissim vulputate lorem. Mauris pulvinar in est vitae consequat. Mauris volutpat justo non ligula malesuada, et porttitor dui auctor. Cras sit amet ex volutpat, aliquam mauris quis, aliquam justo. Praesent non orci nec dui bibendum faucibus porttitor sed elit. Praesent lobortis lacus nec erat commodo, ut lobortis dolor lobortis. Mauris rhoncus arcu vel nisl fringilla pellentesque. Pellentesque sit amet nunc convallis, tincidunt neque vel, elementum dolor. Quisque sit amet imperdiet quam. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Morbi ultricies tellus dolor, ac rhoncus nulla posuere ac. Sed rutrum consequat condimentum. In at lacus est. Ut varius mi nunc. Proin aliquet justo lacus. Etiam ut mauris lacinia, placerat purus eget, elementum felis. Aliquam commodo ac tortor nec elementum. Nulla imperdiet erat nec justo tristique laoreet. Vivamus quis eros gravida, dignissim ante in, scelerisque tellus. Aenean euismod hendrerit ex vel porta. Nunc ac nisl eros. Morbi efficitur lorem lectus, in rhoncus purus tempor vel. Phasellus id mi placerat, venenatis dui eu, sagittis risus. Ut ac ornare leo. Duis condimentum lorem ut est scelerisque malesuada. Etiam varius ornare libero, nec consequat magna tristique porttitor. Cras dapibus, augue vel hendrerit fermentum, nibh lectus venenatis dui, quis porta odio lorem dignissim lacus. Aliquam tempor eros et volutpat tincidunt. Vestibulum vel sagittis libero, pretium iaculis enim. Etiam libero nulla, consequat quis nunc id, viverra condimentum turpis. Nulla facilisi. Mauris sit amet auctor justo. Ut faucibus erat a ornare malesuada. Duis a justo pharetra, ullamcorper lacus quis, iaculis lectus. Morbi dapibus nisl mauris, ac tincidunt est vehicula eu. Suspendisse purus risus, efficitur ac rhoncus eu, congue vel ipsum. Ut pharetra tristique feugiat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam ut rutrum massa. Suspendisse tincidunt tempor mauris, vitae auctor nisl viverra quis. Quisque vitae bibendum turpis. Morbi ut lectus eros. Aliquam sed quam vitae risus semper bibendum vitae pretium augue. Integer rhoncus consectetur orci eget mollis. Vestibulum cursus ut leo vitae sagittis. Integer pretium eu lorem vel elementum. Nunc vehicula sit amet augue ultrices commodo. Cras in ornare est. Cras tristique luctus nibh, non lacinia orci pretium nec. Integer a ligula non velit dignissim facilisis nec ut lectus. Maecenas eget lobortis lectus. Ut pretium mi in purus interdum, ut mattis tortor vulputate. Nunc eu blandit magna, nec efficitur augue. Etiam ac hendrerit sapien. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Etiam eu gravida lorem. Phasellus accumsan porta lacinia. Nam eu augue non dolor consectetur hendrerit vitae non massa. Etiam commodo vel dolor eu vestibulum. Ut euismod tempus urna, et commodo nibh varius sit amet. Nam posuere ornare faucibus. In hac habitasse platea dictumst. Integer elit tellus, vehicula nec odio ac, efficitur ultricies nunc. Sed laoreet volutpat facilisis. Integer orci massa, posuere sed enim ut, vulputate viverra ex. Mauris consectetur turpis ac porta interdum. Nam eu porta leo. Nam at justo enim. Nam dictum facilisis mattis. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Fusce eget blandit ex, nec elementum erat. Vivamus purus purus, bibendum quis hendrerit sed, vehicula vitae arcu. Nam enim ligula, rutrum vitae imperdiet vitae, tristique id urna. Aenean rutrum sed nunc vel ultricies. Suspendisse iaculis, dolor vel blandit blandit, lacus tellus sodales nulla, id aliquam est nisl eu ligula. Nulla fermentum neque quis metus tristique scelerisque. Nulla aliquam vel libero sit amet mollis. Nulla ut consequat nisl. Proin eu dignissim nisi.    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In eu urna tempus, ultricies lacus fermentum, posuere arcu. Ut eget elit magna. Interdum et malesuada fames ac ante ipsum primis in faucibus. Suspendisse Lorem ipsum dolor sit amet, consectetur adipiscing elit. In eu urna tempus, ultricies lacus fermentum, posuere arcu. Ut eget elit magna. Interdum et malesuada fames ac ante ipsum primis in faucibus. Suspendisse feugiat auctor finibus. Ut in euismod magna. Fusce eget dapibus arcu. Curabitur laoreet elit id lobortis tristique. Sed vel finibus turpis. Nulla sed lectus ante. Sed rutrum libero odio, non congue erat hendrerit non. Nunc in vulputate dolor, et dapibus neque. Sed accumsan sapien fermentum facilisis pharetra. Pellentesque fermentum, ligula faucibus suscipit elementum, erat ante ullamcorper tortor, id cursus mi eros ut lorem. Mauris condimentum leo vitae leo vehicula tincidunt. Quisque vehicula erat elit. Donec commodo bibendum ipsum vel commodo. Curabitur egestas massa sed purus dapibus commodo. Nam auctor tempus lacus, quis eleifend ipsum faucibus id. Nunc ullamcorper velit in lorem ultrices, eu auctor ante euismod. Donec in congue lacus. Quisque erat nibh, viverra sit amet ultrices eu, imperdiet ut lectus. Integer pellentesque convallis nibh id viverra. Nam consequat rhoncus placerat. Donec velit tortor, malesuada et scelerisque ut, commodo sit amet purus. Proin nec enim ultricies mi vulputate dignissim. Integer varius augue vel tortor semper, non tempor lectus tempor. Aenean ac iaculis lacus, vel placerat nunc. Praesent rhoncus nisi vel tortor sollicitudin, ut sollicitudin nunc cursus. Suspendisse fringilla magna non sapien commodo, et vulputate erat volutpat. Aenean suscipit pulvinar faucibus. Nullam semper porta purus vitae efficitur. Sed id pharetra ligula, eget aliquet libero. Duis eleifend blandit lorem sed hendrerit. Nulla volutpat dapibus aliquam. Vestibulum vehicula elementum dui id maximus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Proin aliquam pretium cursus. Vivamus in gravida odio, eu pulvinar quam. Sed sit amet elementum neque. Fusce dui dolor, laoreet a eros a, hendrerit ultricies nibh. Suspendisse aliquam magna diam, quis porttitor diam dictum viverra. Sed in lacus tincidunt, sodales quam non, dapibus lacus. Phasellus scelerisque velit elit, eget hendrerit ipsum lacinia eu. Aliquam vitae sem et mauris molestie porttitor. Vestibulum in convallis lectus. Nam at turpis eget mauris gravida ullamcorper. Sed metus ex, semper eget quam vitae, pellentesque gravida lectus. Etiam condimentum sit amet felis ac tempor. Duis finibus accumsan justo, id dictum purus ornare at. Mauris congue elementum pellentesque. Quisque vel tempor ipsum. Mauris dignissim suscipit ex vel posuere. Fusce mattis tortor in cursus feugiat. Duis consequat sem non tempor fringilla. Duis ac orci velit. Curabitur et sem elit. Nam enim nisl, pellentesque in rutrum a, tincidunt vitae augue. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam nunc tellus, ultricies vel vehicula ac, ultrices nec ipsum. Integer luctus vitae nunc quis sollicitudin. Proin id ipsum dapibus urna aliquet vulputate. Curabitur consequat tincidunt massa non condimentum. Sed at lobortis metus. Donec sed elit sit amet orci lacinia sagittis nec ac sapien. Etiam convallis nibh nec tellus mattis, in sagittis enim posuere. Pellentesque et pharetra diam. Integer lacinia dapibus felis, id ornare tellus pellentesque a. Quisque venenatis ligula sed nisl faucibus, non ornare quam porta. Nullam vitae luctus nibh. Duis quis consectetur urna. Vivamus elementum id nulla eu viverra. In maximus, libero ac placerat blandit, metus risus pretium augue, sed porta nunc risus ac justo. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Maecenas interdum eleifend convallis. Aliquam erat volutpat. Aliquam ac efficitur odio. Sed sit amet ex eget nibh volutpat maximus vitae facilisis dui. Cras vitae egestas nisi. In hac habitasse platea dictumst. Integer eget leo in enim gravida rhoncus vitae ut sapien. Donec eget sapien est. Sed sapien lacus, feugiat sed nibh at, luctus tempus velit. Nulla vel imperdiet nibh, at sodales lacus. Proin in consequat lacus. Suspendisse eu ullamcorper nisl. Donec arcu enim, fermentum vitae elementum vel, cursus tincidunt metus. Nulla aliquam enim quis sagittis dictum. Praesent venenatis sed elit non lobortis. Mauris sodales rutrum volutpat. Suspendisse eget sem et enim varius cursus quis in lectus. Fusce libero sapien, tincidunt sit amet pellentesque nec, consequat vel dolor. Quisque sit amet nibh suscipit justo scelerisque vehicula at in augue. Ut tincidunt blandit erat sed tincidunt. Maecenas imperdiet eleifend vulputate. Vivamus sit amet est suscipit, ornare tortor a, sagittis nibh. Quisque pretium vulputate bibendum. Proin interdum tortor vitae urna facilisis feugiat. In tincidunt enim massa, sit amet laoreet nisl aliquet et. Suspendisse quam turpis, egestas vitae efficitur et, hendrerit nec sem. Nullam commodo neque ipsum, vel iaculis mauris facilisis vel. Suspendisse at magna ut libero ornare tempor in non ex. Aenean maximus dictum turpis, et rutrum sapien elementum a. Nulla convallis ipsum ut efficitur convallis. Suspendisse suscipit iaculis scelerisque. Nunc eu dui augue. Duis nec pellentesque odio, a iaculis lacus. Morbi venenatis nibh lacus, quis molestie ante finibus in. Etiam scelerisque magna quis feugiat ultricies. Cras euismod massa sed risus aliquam eleifend. Phasellus finibus augue ac rhoncus mattis. Sed commodo erat quis urna faucibus facilisis. Cras sit amet risus nec nunc dignissim porttitor nec sit amet ligula. Mauris tincidunt cursus eros, in convallis magna ultricies eu. Donec ut faucibus ligula. In vitae dui dolor. Suspendisse varius non nisi id auctor. Suspendisse et ligula at elit vulputate commodo. Fusce aliquam sagittis orci, quis porta tellus. Donec nunc leo, viverra facilisis ante quis, tincidunt sagittis orci. Aliquam feugiat tincidunt posuere. Morbi nibh neque, lacinia ut semper id, efficitur quis mauris. Aliquam accumsan elit nec leo elementum, volutpat consectetur orci tempus. Pellentesque consectetur dapibus ante quis condimentum. Vestibulum tellus ex, pretium quis auctor id, fermentum a nisl. Suspendisse potenti. Mauris tristique, felis eget tempus maximus, eros lorem vestibulum risus, ac viverra enim est nec tortor. Aenean velit urna, molestie scelerisque neque eget, viverra facilisis enim. Etiam cursus venenatis velit, eleifend ultrices felis molestie eget. Etiam congue vehicula dui, molestie sagittis massa cursus sed. Nunc congue accumsan est at suscipit. Sed ut congue massa. Nulla non dui quis velit interdum pharetra. Proin posuere bibendum nibh non tincidunt. Phasellus id lectus lacus. In hac habitasse platea dictumst. Etiam placerat consequat scelerisque. Praesent vitae risus at felis laoreet congue. Donec rhoncus lacus eget dignissim convallis. Duis nisl neque, ultricies euismod nisl et, sagittis congue urna. Fusce rhoncus elit sit amet tellus convallis tempus. Etiam malesuada varius ex, sit amet feugiat sapien rutrum quis. Mauris at turpis cursus, vestibulum sem nec, consectetur libero. Morbi rutrum varius elementum. Proin scelerisque purus in libero laoreet, nec interdum sapien condimentum. Aliquam imperdiet ligula nec leo elementum pharetra. Quisque ac libero id nisi lobortis efficitur. Aliquam erat volutpat. Donec consectetur suscipit arcu sit amet posuere. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Pellentesque pulvinar sollicitudin odio a semper. Sed consectetur dui vel nisl egestas, et aliquam est iaculis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sodales lorem. Phasellus at pharetra ex, nec euismod massa. Cras sollicitudin interdum dignissim. Aliquam commodo efficitur posuere. Quisque et dolor in quam vulputate semper. Suspendisse euismod fermentum dictum. Sed pretium diam lacus. Sed sed erat tempor, gravida sem id, facilisis nibh. Aenean scelerisque urna non fermentum laoreet. Quisque faucibus lacinia sapien elementum faucibus. Duis id lorem a magna mollis efficitur. Integer venenatis eget leo nec viverra. Etiam ac felis sollicitudin, venenatis erat molestie, blandit ante. Aenean volutpat arcu enim, in ultrices arcu suscipit ac. Curabitur porta venenatis maximus. Vivamus sed viverra ipsum, nec posuere elit. Morbi placerat egestas massa, non convallis sem dignissim sit amet. Quisque arcu ex, auctor at elit non, dignissim vulputate lorem. Mauris pulvinar in est vitae consequat. Mauris volutpat justo non ligula malesuada, et porttitor dui auctor. Cras sit amet ex volutpat, aliquam mauris quis, aliquam justo. Praesent non orci nec dui bibendum faucibus porttitor sed elit. Praesent lobortis lacus nec erat commodo, ut lobortis dolor lobortis. Mauris rhoncus arcu vel nisl fringilla pellentesque. Pellentesque sit amet nunc convallis, tincidunt neque vel, elementum dolor. Quisque sit amet imperdiet quam. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Morbi ultricies tellus dolor, ac rhoncus nulla posuere ac. Sed rutrum consequat condimentum. In at lacus est. Ut varius mi nunc. Proin aliquet justo lacus. Etiam ut mauris lacinia, placerat purus eget, elementum felis. Aliquam commodo ac tortor nec elementum. Nulla imperdiet erat nec justo tristique laoreet. Vivamus quis eros gravida, dignissim ante in, scelerisque tellus. Aenean euismod hendrerit ex vel porta. Nunc ac nisl eros. Morbi efficitur lorem lectus, in rhoncus purus tempor vel. Phasellus id mi placerat, venenatis dui eu, sagittis risus. Ut ac ornare leo. Duis condimentum lorem ut est scelerisque malesuada. Etiam varius ornare libero, nec consequat magna tristique porttitor. Cras dapibus, augue vel hendrerit fermentum, nibh lectus venenatis dui, quis porta odio lorem dignissim lacus. Aliquam tempor eros et volutpat tincidunt. Vestibulum vel sagittis libero, pretium iaculis enim. Etiam libero nulla, consequat quis nunc id, viverra condimentum turpis. Nulla facilisi. Mauris sit amet auctor justo. Ut faucibus erat a ornare malesuada. Duis a justo pharetra, ullamcorper lacus quis, iaculis lectus. Morbi dapibus nisl mauris, ac tincidunt est vehicula eu. Suspendisse purus risus, efficitur ac rhoncus eu, congue vel ipsum. Ut pharetra tristique feugiat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam ut rutrum massa. Suspendisse tincidunt tempor mauris, vitae auctor nisl viverra quis. Quisque vitae bibendum turpis. Morbi ut lectus eros. Aliquam sed quam vitae risus semper bibendum vitae pretium augue. Integer rhoncus consectetur orci eget mollis. Vestibulum cursus ut leo vitae sagittis. Integer pretium eu lorem vel elementum. Nunc vehicula sit amet augue ultrices commodo. Cras in ornare est. Cras tristique luctus nibh, non lacinia orci pretium nec. Integer a ligula non velit dignissim facilisis nec ut lectus. Maecenas eget lobortis lectus. Ut pretium mi in purus interdum, ut mattis tortor vulputate. Nunc eu blandit magna, nec efficitur augue. Etiam ac hendrerit sapien. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Etiam eu gravida lorem. Phasellus accumsan porta lacinia. Nam eu augue non dolor consectetur hendrerit vitae non massa. Etiam commodo vel dolor eu vestibulum. Ut euismod tempus urna, et commodo nibh varius sit amet. Nam posuere ornare faucibus. In hac habitasse platea dictumst. Integer elit tellus, vehicula nec odio ac, efficitur ultricies nunc. Sed laoreet volutpat facilisis. Integer orci massa, posuere sed enim ut, vulputate viverra ex. Mauris consectetur turpis ac porta interdum. Nam eu porta leo. Nam at justo enim. Nam dictum facilisis mattis. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Fusce eget blandit ex, nec elementum erat. Vivamus purus purus, bibendum quis hendrerit sed, vehicula vitae arcu. Nam enim ligula, rutrum vitae imperdiet vitae, tristique id urna. Aenean rutrum sed nunc vel ultricies. Suspendisse iaculis, dolor vel blandit blandit, lacus tellus sodales nulla, id aliquam est nisl eu ligula. Nulla fermentum neque quis metus tristique scelerisque. Nulla aliquam vel libero sit amet mollis. Nulla ut consequat nisl. Proin eu dignissim nisi.    Show more data Hide data Remove Auto Make Auto      const dynamicElementStyles = document.querySelector('.dynamic-content').style; // show, hide content document.querySelector('.show-dynamic-content').addEventListener('click', () = { dynamicElementStyles.display = 'block'; }); document.querySelector('.hide-dynamic-content').addEventListener('click', () = { dynamicElementStyles.display = 'none'; }); // turn off, on the automatic scroll document.querySelector('.remove-auto-attribute').addEventListener('click', () = { document.querySelector('.auto').removeAttribute('automatic'); }); document.querySelector('.add-auto-attribute').addEventListener('click', () = { document.querySelector('.auto').setAttribute('automatic', 'automatic'); });    "},{"id":43,"href":"/GameUIComponents/en/components/slider/","title":"Slider","content":"The gameface-slider is part of the Gameface custom components suite. As most of the components in this suite it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-slider\nUsage # The gameface-slider component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the gameface-slider component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-slider/umd/slider.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the gameface-slider component to your html:  \u0026lt;gameface-slider class=\u0026quot;gameface-slider-component\u0026quot;\u0026gt;\u0026lt;/gameface-slider\u0026gt;  This is all! Load the file in Gameface to see the gameface-slider.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the gameface-slider from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import GamefaceSlider from 'coherent-gameface-slider';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import GamefaceSlider from './node_modules/coherent-gameface-slider/umd/slider.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const GamefaceSlider = require('coherent-gameface-slider');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nAdd the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;styles/horizontal.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;styles/vertical.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\n"},{"id":44,"href":"/GameUIComponents/en/examples/slider/","title":"Slider","content":"   body { background-color: transparent; } .horizontal-slider-component { margin-left: 100px; }          "},{"id":45,"href":"/GameUIComponents/en/components/switch/","title":"Switch","content":"The gameface-switch is part of the Gameface custom components suite. As most of the components in this suite it uses slots to allow dynamic content.\nUsage # The gameface-switch component comes with UMD and CJS builds.\nInstallation # npm i coherent-gameface-switch\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the gameface-switch component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-switch/umd/switch.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the gameface-switch component to your html:  \u0026lt;gameface-switch\u0026gt;\u0026lt;/gameface-switch\u0026gt;  This is all! Load the file in Gameface to see the switch.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the switch from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import switch from 'coherent-gameface-switch';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import switch from './node_modules/coherent-gameface-switch/umd/switch.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const switch = require('coherent-gameface-switch');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nAdd the styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\nLoad the HTML file in Gameface to see the switch.\nHow to use # To use simply add\n\u0026lt;gameface-switch\u0026gt;\u0026lt;/gameface-switch\u0026gt;  to your html file.\nYou can also add labels for your checked and unchecked values by using component-slot\n\u0026lt;gameface-switch\u0026gt; \u0026lt;component-slot data-name=\u0026quot;switch-unchecked\u0026quot;\u0026gt;Off\u0026lt;/component-slot\u0026gt; \u0026lt;component-slot data-name=\u0026quot;switch-checked\u0026quot;\u0026gt;On\u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-switch\u0026gt;  You can use the following attributes to customize the switch\n   Attribute Type Default Description Notes     type String default The type of the switch It can be default, inset or text-inside   checked Boolean false If the switch is checked when rendered    disabled Boolean false Disables the switch     Examples # \u0026lt;gameface-switch type=\u0026quot;inset\u0026quot; disabled checked\u0026gt; \u0026lt;component-slot data-name=\u0026quot;switch-unchecked\u0026quot;\u0026gt;Off\u0026lt;/component-slot\u0026gt; \u0026lt;component-slot data-name=\u0026quot;switch-checked\u0026quot;\u0026gt;On\u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-switch\u0026gt; \u0026lt;gameface-switch type=\u0026quot;text-inside\u0026quot;\u0026gt; \u0026lt;component-slot data-name=\u0026quot;switch-unchecked\u0026quot;\u0026gt;Off\u0026lt;/component-slot\u0026gt; \u0026lt;component-slot data-name=\u0026quot;switch-checked\u0026quot;\u0026gt;On\u0026lt;/component-slot\u0026gt; \u0026lt;/gameface-switch\u0026gt;  Using the custom event # The switch component emits a custom switch_toggle event that you can listen for.\nconst switch = document.querySelector('switch'); switch.addEventListener('switch_toggle', ({detail}) =\u0026gt; { doSomething(detail); //Where detail returns true or false based on the state of the switch })  "},{"id":46,"href":"/GameUIComponents/en/examples/switch/","title":"Switch","content":"  body { background-color: transparent; } .row { display: flex; } .cell { width: 25%; display: flex; align-items: center; justify-content: center; height: 50px; }    type=\"default\" type=\"inset\" type=\"text-inside\"  Unchecked  Off On   Off On   Off On    Checked Off On   Off On   Off On    Unchecked disabled Off On   Off On   Off On    Checked disabled Off On   Off On   Off On        "},{"id":47,"href":"/GameUIComponents/en/components/tabs/","title":"Tabs","content":"The tabs component is part of the Gameface custom components suite. As most of the components in this suite, it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-tabs\nUsage # The tabs component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the tabs component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-tabs/umd/tabs.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the tabs component to your html:  \u0026lt;gameface-tabs\u0026gt;\u0026lt;/gameface-tabs\u0026gt;  This is all! Load the file in Gameface to see the tabs.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the tabs from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import tabs from 'coherent-gameface-modal';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import tabs from './node_modules/coherent-gameface-tabs/umd/tabs.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const tabs = require('coherent-gameface-tabs');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nCustomizing the Tabs # Use the slots to put customized background or label.\nThe tabs component has two slots:\n tab - this is where the tab headings are added. panel - this is where the corresponding panels are added.  Use the \u0026lt;component-import\u0026gt; to import the tabs. Put any custom slots as children of the \u0026lt;component-import\u0026gt;.\n\u0026lt;gameface-tabs\u0026gt; \u0026lt;tab-heading slot=\u0026quot;tab\u0026quot;\u0026gt;Chapter One\u0026lt;/tab-heading\u0026gt; \u0026lt;tab-panel slot=\u0026quot;panel\u0026quot;\u0026gt;Chapter One Content\u0026lt;/tab-panel\u0026gt; \u0026lt;tab-heading slot=\u0026quot;tab\u0026quot;\u0026gt;Chapter Two\u0026lt;/tab-heading\u0026gt; \u0026lt;tab-panel slot=\u0026quot;panel\u0026quot;\u0026gt;Chapter Two Content\u0026lt;/tab-panel\u0026gt; \u0026lt;tab-heading slot=\u0026quot;tab\u0026quot;\u0026gt;Chapter Three\u0026lt;/tab-heading\u0026gt; \u0026lt;tab-panel slot=\u0026quot;panel\u0026quot;\u0026gt;Chapter Three Content\u0026lt;/tab-panel\u0026gt; \u0026lt;tab-heading slot=\u0026quot;tab\u0026quot;\u0026gt;Chapter Four\u0026lt;/tab-heading\u0026gt; \u0026lt;tab-panel slot=\u0026quot;panel\u0026quot;\u0026gt;Chapter Four Content\u0026lt;/tab-panel\u0026gt; \u0026lt;/gameface-tabs\u0026gt;  You can put any custom styles inline or use class names and add an external file.\nThe tabs component registers two more custom elements - The \u0026lt;tab-heading\u0026gt; and \u0026lt;tab-panel\u0026gt;. Every time you create an element of one of these types an index is assigned to it. This index ensures that your heading will be linked to its corresponding panel. This means that you can add new tabs and panels like this and they will work:\nconst tab = document.createElement('tab-heading'); tab.innerText = 'My new tab.'; tab.slot = 'tab'; document.querySelector('[data-name=\u0026quot;tab\u0026quot;]').appendChild(tab); const panel = document.createElement('tab-panel'); panel.innerText = 'My new panel.'; panel.slot = 'panel'; document.querySelector('[data-name=\u0026quot;panel\u0026quot;]').appendChild(panel);  Add the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;styles.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\n"},{"id":48,"href":"/GameUIComponents/en/examples/tabs/","title":"Tabs","content":"  Document  .page-wrapper { position: relative; height: 45vh; } tab-panel { border-width: 2px; border-style: solid; padding: 10px; width: 496px; height: 205px; box-sizing: border-box; background-color: #ffffff; } [data-dark-mode] gameface-tabs { color: black; }     Chapter One Chapter One Content Chapter Two Chapter Two Content Chapter Three Chapter Three Content Chapter Four Chapter Four Content      "},{"id":49,"href":"/GameUIComponents/en/components/text-field/","title":"Text field","content":"The gameface-text-field is part of the Gameface custom components suite. As most of the components in this suite, it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-text-field\nUsage # The gameface-text-field component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the gameface-text-field component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-text-field/umd/text-field.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the gameface-text-field component to your HTML:  \u0026lt;gameface-text-field type=\u0026quot;text\u0026quot;\u0026gt;\u0026lt;/gameface-text-field\u0026gt;  This is all! Load the file in Gameface to see the text field.\nIf you wish to import the modules using JavaScript you can remove the script tags which import the components and the text-field from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import TextField from 'coherent-gameface-text-field';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively, you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import TextField from './node_modules/coherent-gameface-text-field/umd/text-field.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const TextField = require('coherent-gameface-text-field');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler to use them in a browser.\nText field attributes # Attributes are used for configuration when the gameface-text-field component is initialized like \u0026lt;gameface-text-field type=\u0026quot;password\u0026quot;\u0026gt;\u0026lt;/gameface-text-field\u0026gt; that will display text field for typing a password inside.\nCommon attributes #    Attribute Required Accepted values Default value Usage     type No text, password, email, number, search, url text Used to specify the text field type. More about the text field type you can check in the next section.   value No Strings '' Used to specify the default value of the text field.   disabled No N/A N/A Used to specify if the text field is disabled. If it is then its value could not be selected or edited.   readonly No N/A N/A Used to specify if the text field is read only. If it is then its value could not be edited but can be selected.   label No Strings '' Used to specify the label of the text field.   placeholder No Strings '' Used to specify the placeholder of the text field that will be displayed when the value is empty.   text-field-control-disabled No N/А N/A Used to specify hide the control when the type of the text field is search or number.    Text types related attribute # The next attributes are working with all the \u0026lt;gameface-text-field\u0026gt; types without the number type.\n   Attribute Required Accepted values Default value Usage     maxlength No Strings that are valid numbers N/A Used to specify the maximum symbols from the text field the can be typed.   minlength No Strings that are valid numbers N/A Used to specify the minimum symbols from the text field the can be typed.    Number type related attribute # The next attributes are working just when the gameface-text-field type is number.\n   Attribute Required Accepted values Default value Usage     min No Strings that are valid numbers N/A Used to specify the numerical lower limit of the text field. The number control won\u0026rsquo;t overstep the lower limit when it is used.   max No Strings that are valid numbers N/A Used to specify the numerical upper limit of the text field. The number control won\u0026rsquo;t overstep the upper limit when it is used.   step No Strings that are valid numbers 1 Used to specify the step of the text field that will be done when the number control is used.    Text field types # The type of the text field is defined by the type attribute.\n text - The text field will accept any string input. password - The text field will accept any string input but it will be masked with the * character. email - The text field will accept any string input. When the text field is used inside a gameface-form-control component it will be validated on submit if its value is a valid email (a string that includes the @ symbol). url - The text field will accept any string input. When the text field is used inside a gameface-form-control component it will be validated on submit if its value is a valid url. search - The text field will accept any string input. The text field will display additional control (cross button) that can be used to clear the input value. number - The text field will accept any number input. The text field will display additional control (arrow up and down) that can be used to increase/decrease the value with the step specified. By default, the arrows will change the value with step that is 1. The number type does not support the e symbol!  Input events to a gameface text input # You can add input specific events directly to the gameface-text-field element like input, change, focus, blur by the addEventListener interface.\nChange gameface text field properties programmatically # To change runtime the type of the text field for example you can:\n Get the text field element like const textField = document.querySelector('gameface-text-field'). Change the type like textField.type = 'password'.  The available properties that can be changed runtime are:\n type - will change the text field\u0026rsquo;s type. textField.type = 'number'. value - will change the text field\u0026rsquo;s value. textField.value = 'some different value'. disabled - will enable/disable the text field. textField.disabled = true will disable the field and textField.disabled = false will enable it again. readonly - will make the text field readonly. textField.readonly = true will make the field readonly and textField.readonly = false will enable it again. label - will change the text field\u0026rsquo;s label. textField.label = 'User name:'. placeholder - will change the text field\u0026rsquo;s placeholder. textField.placeholder = 'Type your username here'. inputControlDisabled - will hide/show text field control for type - search and number. textField.inputControlDisabled = true will hide the control and textField.inputControlDisabled = false will show the control. maxlength - will change the max length of the text field. textField.maxlength = 10. minlength - will change the min length of the text field. textField.minlength = 2. max - will change the maximum limit of the text field when the type is number. textField.max = 10. min - will change the minimum limit of the text field when the type is number. textField.min = 1. step - will change the step of the text field when the type is number. textField.step = 0.5.  Example # You can check the demo.html where can be found a lot of examples with the gameface-text-field. There you can find:\n How to use all the available gameface-text-field attributes. How to customize the default gameface-text-field elements. How to use events with gameface-text-field.  "},{"id":50,"href":"/GameUIComponents/en/examples/text-field/","title":"Text field","content":"   .text-fields-container { display: flex; flex-direction: row; flex-wrap: wrap; } .text-fields-container [type=search] { -webkit-appearance: none; outline-offset: unset; } .case { margin: 5px; } .guic-text-field-container { margin-bottom: 5px; } .custom-text-field-styles .guic-text-field-label { font-size: 2em; color: aqua; } .custom-text-field-styles .guic-text-field-with-controls { width: 300px; height: 50px; border-radius: 5px; border-color: red; background-color: black; } .custom-text-field-styles .guic-text-field { font-size: 20px; color: greenyellow; } .custom-text-field-styles { --text-field-number-arrow-color: yellow; --text-field-search-cross-color: yellow; } .custom-text-field-styles .guic-search-remove:hover { --text-field-search-cross-color: brown; } .custom-text-field-styles .guic-number-increase:hover { border-bottom-color: red; } .custom-text-field-styles .guic-number-decrease:hover { border-top-color: blueviolet; }    Text              Password              Search               Number                      document.querySelector('#test1').addEventListener('change', (event) = console.log('change event', event.target.value)); document.querySelector('#test1').addEventListener('blur', (event) = console.log('blur event', event.target.value)); document.querySelector('#test1').addEventListener('focus', (event) = console.log('focus event', event.target.value)); document.querySelector('#test1').addEventListener('input', (event) = console.log('input event', event.target.value)); document.querySelector('#test1').addEventListener('click', (event) = console.log('click event', event.currentTarget.value));   "},{"id":51,"href":"/GameUIComponents/en/components/tooltip/","title":"Tooltip","content":"The tooltip is part of the Gameface custom components suite. As most of the components in this suite it uses slots to allow dynamic content.\nInstallation # npm i coherent-gameface-tooltip\nUsage # The tooltip component comes with UMD and CJS builds.\nUsage with UMD modules: #  import the components library:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-components/umd/components.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   import the tooltip component:  \u0026lt;script src=\u0026quot;./node_modules/coherent-gameface-tooltip/umd/tooltip.production.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;   add the tooltip component to your html:  \u0026lt;gameface-tooltip target=\u0026quot;.container\u0026quot;\u0026gt; \u0026lt;div slot=\u0026quot;message\u0026quot;\u0026gt;Hello!\u0026lt;/div\u0026gt; \u0026lt;/gameface-tooltip\u0026gt;  If you wish to import the modules using JavaScript you can remove the script tags which import the components and the tooltip from the node_modules folder and import them like this:\nimport components from 'coherent-gameface-components'; import Tooltip from 'coherent-gameface-tooltip';  Note that this approach requires a module bundler like Webpack or Rollup to resolve the modules from the node_modules folder. Alternatively you can import them directly from node_modules:\nimport components from './node_modules/coherent-gameface-components/umd/components.production.min.js'; import Tooltip from './node_modules/coherent-gameface-tooltip/umd/tooltip.production.min.js';  Usage with CJS modules: #  Import the components library:  const components = require('coherent-gameface-components'); const Tooltip = require('coherent-gameface-tooltip');  The CommonJS(CJS) modules are used in a NodeJS environment, be sure to use a module bundler in order to be use them in a browser.\nSpecifying the content # Use the message slot to specify the message of the tooltip.\nFull list of the available attributes can be found here.\n\u0026lt;gameface-tooltip target=\u0026quot;.container\u0026quot; on=\u0026quot;mouseenter\u0026quot; off=\u0026quot;mouseleave\u0026quot; position=\u0026quot;left\u0026quot;\u0026gt; \u0026lt;div slot=\u0026quot;message\u0026quot;\u0026gt;Message on left\u0026lt;/div\u0026gt; \u0026lt;/gameface-tooltip\u0026gt;  You can also put more complex content like interactive controls such as buttons:\n\u0026lt;gameface-tooltip id=\u0026quot;tutorial\u0026quot; target=\u0026quot;.container\u0026quot; on=\u0026quot;mouseenter\u0026quot; position=\u0026quot;top\u0026quot; off=\u0026quot;click\u0026quot;\u0026gt; \u0026lt;div slot=\u0026quot;message\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;msg-container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;title\u0026quot;\u0026gt;Wellcome!\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;text\u0026quot;\u0026gt; Hello, this is your first tutorial. Click the next button to continue. \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;button\u0026quot;\u0026gt;Next\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/gameface-tooltip\u0026gt;  You can add more flexibility using JavaScript. In the above example the tooltip will be closed on click anywhere inside it. If you wish to close it only if the customer clicks for the example on the Next button you can manually attach a listener and call the hide method of the tooltip:\ndocument.querySelector('.button').addEventListener('click', (e) =\u0026gt; { document.querySelector('#tutorial').hide(); });  Add the Styles # \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;coherent-gameface-components-theme.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  To overwrite the default styles, simply create new rules for the class names that you wish to change and include them after the default styles.\nYou can put any custom styles inline or use class names and add an external file.\nHow to use # Usually a tooltip is displayed as a result of an action performed on another element. For example, you need to show a tooltip with more data when you hover on an item in the inventory. To specify the trigger element use the target attribute. Its value is a query string used to get the element. Refer to the table below for the full list of attributes.\nSetting a message # To set or change the tooltip message, use the setMessage method.\nWhen the async attribute is present in \u0026lt;gameface-tooltip\u0026gt;, a callback that returns a Promise must be provided to the setMessage method. Async mode use case is shown in the demo page.\nAttributes #    Attribute Type Default Accepted values Description     target DOMString N/A Any Specify the element on which the tooltip should be displayed.   on String click click, mouseover, etc. Specify the event which will trigger the show method of the tooltip   off String click click, mouseover, etc. Specify the event which will trigger the hide method of the tooltip   position String top top, bottom, left, right Specify the position of the tooltip relative to the element specified using the target attribute.   async N/A N/A N/A Enable to use an asynchronous function to set the tooltip message with the setMessage method.    Properties #    Property Type Description     message getter Returns the textContent of the message slot.    Methods #    Method Accepted values Description     setMessage A string, number or functions returning a value or a Promise. Sets or changes the tooltip message.    "},{"id":52,"href":"/GameUIComponents/en/examples/tooltip/","title":"Tooltip","content":"  Document  body { margin: 0; } .rows { display: flex; flex-direction: row; align-items: center; position: absolute; top: 200px; width: 100%; } .column { display: flex; flex-direction: column; align-items: center; flex: 1; padding: 10px; } .min-width-column { min-width: 550px; } .auto, .manual, .async { width: 150px; text-align: center; background-color: #6e6d6d; color: #ffffff; padding: 10px; } .container { display: flex; flex-direction: column; padding: 0; } .title, .button { height: 40px; background-color: var(--default-color-gray); display: flex; justify-content: center; align-items: center; } .button { background-color: var(--default-color-gray); cursor: pointer; } [data-dark-mode] .button, [data-dark-mode] .title { background-color: #6e6d6d; } /* Hugo example modifications */ .rows { flex-direction: column; position: relative; top: auto; }    Show or hide automatically\nHover over me  Show or hide manually using a callback\nClick me  Replace with dynamic content when available\nHover over me   Welcome! Hello, this is your first tutorial. Click the next button to continue.  Next    Message on the left  Message on the bottom  Message on the right       document.querySelector('.button').addEventListener('click', (e) = { document.querySelector('#tutorial').hide(); }); let timeout; // Mock dynamic content function mockContentAsync() { return new Promise(resolve = { if (timeout) clearTimeout(timeout); timeout = setTimeout(() = { resolve('Delayed message received!'); }, 2000); }); } async function show() { const delayedContent = mockContentAsync; const tooltipAsync = document.getElementById('async-tooltip'); await tooltipAsync.setMessage(delayedContent); } document.querySelector('#async').addEventListener('mouseenter', show);    "}]