(()=>{"use strict";const e=new RegExp("^s+|s+$","g"),t=["input","textarea"];function r(e){return t.indexOf(e.tagName.toLowerCase())>-1}window.GUIComponentsDefinedElements={},window.GUIComponentsDefinedElements||(window.GUIComponentsDefinedElements={});class i extends HTMLElement{get instanceType(){return"BaseComponent"}setupTemplate(e,t){if(!this.isConnected)return console.log(`DEBUG: component ${this.tagName} was not initialized because it was disconnected from the DOM!`);this.template=e.template,t(e.template)}isStatePropValid(e,t){const r=this.stateSchema[e];if(!r)return console.error(`A property ${e} does not exist on type ${this.tagName.toLowerCase()}!`),!1;const i=typeof t;return!(!r.type.includes("array")||!Array.isArray(t))||(!!r.type.includes(i)||(console.error(`Property ${e} can not be of type - ${i}. Allowed types are: ${r.type.join(",")}`),!1))}}class s{get instanceType(){return"Validator"}static isFormElement(e){for(e=e.parentElement;e;){if("GAMEFACE-FORM-CONTROL"===e.tagName||"gameface-form-control"===e.tagName)return!0;e=e.parentElement}return!1}static tooLong(){return!1}static tooShort(){return!1}static rangeOverflow(){return!1}static rangeUnderflow(){return!1}static valueMissing(e){return e.hasAttribute("required")&&!e.value}static nameMissing(e){return!e.name&&!e.getAttribute("name")}static isRequired(e){return e.hasAttribute("required")}static customError(){return!1}static willSerialize(e){return!this.nameMissing(e)}static isBadURL(){return!1}static isBadEmail(){return!1}}class n{get instanceType(){return"NativeElementValidator"}constructor(e){this.element=e}isFormElement(){return s.isFormElement(this.element)}tooLong(){return r(this.element)?a.tooLong(this.element):s.tooLong()}tooShort(){return r(this.element)?a.tooShort(this.element):s.tooShort()}rangeOverflow(){return r(this.element)?a.rangeOverflow(this.element):s.rangeOverflow()}rangeUnderflow(){return r(this.element)?a.rangeUnderflow(this.element):s.rangeUnderflow()}valueMissing(){return s.valueMissing(this.element)}nameMissing(){return s.nameMissing(this.element)}customError(){return s.customError()}isRequired(){return s.isRequired(this.element)}willSerialize(){return s.willSerialize(this.element)}isBadEmail(){return!!r(this.element)&&a.isBadEmail(this.element)}isBadURL(){return!!r(this.element)&&a.isBadURL(this.element)}}class o extends i{get instanceType(){return"CustomElementValidator"}isFormElement(){return s.isFormElement(this)}tooLong(){return s.tooLong(this)}tooShort(){return s.tooShort(this)}valueMissing(){return s.valueMissing(this)}nameMissing(){return s.nameMissing(this)}customError(){return s.customError()}isRequired(){return s.isRequired(this)}rangeOverflow(){return s.rangeOverflow(this)}rangeUnderflow(){return s.rangeUnderflow(this)}willSerialize(){return s.willSerialize(this)}isBadEmail(){return s.isBadEmail(this)}isBadURL(){return s.isBadURL(this)}}class a{get instanceType(){return"TextFieldValidator"}static tooLong(e){const t=e.getAttribute("maxlength");return!!t&&e.value.length>parseFloat(t)}static tooShort(e){const t=e.getAttribute("minlength");return!!t&&e.value.length<parseFloat(t)}static rangeOverflow(e){const t=e.getAttribute("max");return!!t&&parseFloat(e.value)>parseFloat(t)}static rangeUnderflow(e){const t=e.getAttribute("min");return!!t&&parseFloat(e.value)<parseFloat(t)}static isBadURL(e){if("url"!==e.getAttribute("type"))return!1;const t=e.pattern||e.getAttribute("pattern");return!!t&&!e.value.match(t)}static isBadEmail(e){return"email"===e.getAttribute("type")&&!e.value.match("@")}}const l=new function(){const t="component-slot",r={DOWN:40,LEFT:37,RIGHT:39,UP:38,HOME:36,END:35,ENTER:13,ESCAPE:27,TAB:9,SHIFT:16,CTRL:17,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,LETTER_A:65},l=new class{constructor(){this.imported=this.imported||[],this.KEYCODES=r,this.cachedComponents={},this.CustomElementValidator=o,this.NativeElementValidator=n,this.TextFieldValidator=a,this.Validator=s,this.BaseComponent=i}importScript(e){const t=document.createElement("script");t.setAttribute("src",e),document.body.appendChild(t)}loadHTML(e){return this.loadResource(e).then((e=>e.template))}whenDefined(e){if(void 0!==window.GUIComponentsDefinedElements[e])return window.GUIComponentsDefinedElements[e].promise;const t=window.GUIComponentsDefinedElements[e]={};return t.promise=new Promise(((e,r)=>{t.resolve=e,t.reject=r})),t.promise}defineCustomElement(e,t){window.GUIComponentsDefinedElements[e]||customElements.get(e)||(this.whenDefined(e),customElements.define(e,t),window.GUIComponentsDefinedElements[e].resolve(t))}importComponent(e){requestAnimationFrame((()=>{this.importScript(e+"/script.js")}))}removeSlashes(e){return e.replace(/[/|\\]/g,"")}removeNewLines(t){return t.replace(e,"").trim()}removeCopyrightNotice(e){return e.replace("\x3c!--Copyright (c) Coherent Labs AD. All rights reserved. Licensed under the MIT License. See License.txt in the project root for license information. --\x3e","").trim()}resolveWithTemplate(e){return new Promise((t=>{t({template:e.template,url:e.url})}))}loadResource(e){if(e.template&&"string"==typeof e.template){if(e.isRendered)return this.resolveWithTemplate(e);const t=this.removeCopyrightNotice(e.template);return new Promise((r=>{r({template:this.removeNewLines(t),url:e.url})}))}if("object"==typeof e.template&&e.isRendered)return this.resolveWithTemplate(e);if(window.__optimize){const t=this.removeSlashes(e.url),r=document.getElementById(t).firstChild;return r?new Promise((t=>{t({template:r.innerHTML,url:e.url})})):this.requestResource(e.url)}return this.requestResource(e.url)}requestResource(e){const t=new XMLHttpRequest,r=new Promise((function(r,i){t.onload=s=>{200==t.status?r({template:t.responseText,url:e}):i(s)},t.onerror=i}));return t.open("GET",e),t.send(),r}findSlots(e,r,i={}){const s=e.children,n=s.length;for(let e=0;e<n;++e){const n=s[e],o=n.tagName.toLowerCase();if("component-slot"===o){const e=n.dataset.name;i[e]||(i[e]=[]),i[e].push(n),this.findSlots(n,r,i)}else if(n.hasAttribute("slot")){const e=n.getAttribute("slot");i[e]||(i[e]=[]),i[e].push(n),this.findSlots(n,r,i)}else("gameface-scrollable-container"===o||o!==t&&r!==o&&!window.GUIComponentsDefinedElements[o])&&this.findSlots(n,r,i)}return i}replaceSlots(e,t){const r=t[0];if(e.length&&r.childNodes.length)for(;r.firstChild;)r.removeChild(r.lastChild);const i=r.parentNode;i.removeChild(r);for(let t=0;t<e.length;++t)i.appendChild(e[t])}transferContent(e,t){for(;t.childNodes.length>0;){const e=t.childNodes;t.removeChild(e[e.length-1])}for(;e.childNodes.length>0;){const r=e.childNodes[0];e.removeChild(r),t.appendChild(r)}}renderOnce(e){return!e.isRendered&&(this.render(e),e.isRendered=!0,!0)}render(e){const t=document.createElement("div");t.innerHTML=e.template;const r=e.tagName.toLowerCase(),i=this.findSlots(t,r),s=this.findSlots(e,r),n=Object.keys(s);if(Object.keys(i).length)for(const e of n)s[e]&&i[e]&&this.replaceSlots(s[e],i[e]);this.transferContent(t,e)}transferChildren(e,t,r){const i=document.createElement("div");i.innerHTML=e.template;const s=i.querySelector(t);r.forEach((e=>s.appendChild(e))),this.transferContent(i,e)}waitForFrames(e=(()=>{}),t=3){if(0===t)return e();t--,requestAnimationFrame((()=>this.waitForFrames(e,t)))}isBrowserGameface(){return navigator.userAgent.match("Cohtml")}};class h extends HTMLElement{constructor(){super(),this.originalAppendChild=this.appendChild,this.originalInsertBefore=this.insertBefore,this.originalReplaceChild=this.replaceChild,this.originalRemoveChild=this.removeChild,this.appendChild=e=>{const t=this.originalAppendChild(e);return this.disptachSlotChange(t),t},this.insertBefore=(e,t)=>{const r=this.originalInsertBefore(e,t);return this.disptachSlotChange(r),r},this.replaceChild=(e,t)=>{const r=this.originalReplaceChild(e,t);return this.disptachSlotChange(r),r},this.removeChild=e=>{const t=this.originalRemoveChild(e);return this.disptachSlotChange(t),t}}disptachSlotChange(e){this.dispatchEvent(new CustomEvent("slotchange"),{target:this,child:e})}}return l.defineCustomElement(t,h),l},h=l.BaseComponent,c=".guic-carousel-content-wrapper",u=".guic-carousel";l.defineCustomElement("gameface-carousel",class extends h{constructor(){super(),this.template='<div> <div class="guic-carousel"> <div class="guic-carousel-content-wrapper"> <component-slot data-name="carousel-content"></component-slot> </div> <div class="guic-carousel-btn-next guic-carousel-arrow guic-carousel-right-arrow"> <component-slot data-name="carousel-next" class="guic-carousel-arrow-slot"> <div class="guic-carousel-inner-arrow guic-carousel-inner-arrow-right"></div> </component-slot> </div> <div class="guic-carousel-btn-prev guic-carousel-arrow guic-carousel-left-arrow"> <component-slot data-name="carousel-previous" class="guic-carousel-arrow-slot"> <div class="guic-carousel-inner-arrow guic-carousel-inner-arrow-left"></div> </component-slot> </div> </div> <div class="guic-carousel-dots"></div> </div>',this.init=this.init.bind(this),this._pageSize=2,this._navArrowStepSize=1,this.currentItemIndex=0,this.itemsDirection=1}connectedCallback(){l.loadResource(this).then(this.init).catch((e=>console.error(e)))}init(e){this.setupTemplate(e,(()=>{l.renderOnce(this),this.contentWrapper=this.querySelector(c),l.waitForFrames((()=>{if(!this.items||!this.items[0])return console.warn("No items were added to the carousel!");const{width:e,height:t}=this.items[0].getBoundingClientRect();this.itemWidth=e,this.itemHeight=t,this.resize()})),this.style.visibility="visible",this.createPaginationControls(),this.attachControlButtonsListeners(),this.shouldShowNavArrow(1,this.nextStepIndex(this.navArrowStepSize)),this.shouldShowNavArrow(-1,this.prevStepIndex(this.navArrowStepSize))}))}get pages(){return this.items?.length/this.pageSize||0}get items(){return this.querySelector(c).children}get itemsLength(){return this.items.length}get visibleItemsIndexes(){return Array.from({length:this.pageSize},((e,t)=>t+this.currentItemIndex))}get visibleItems(){const e=this.items;return this.visibleItemsIndexes.map((t=>e[t]))}get leftArrow(){return document.querySelector(".guic-carousel-left-arrow")}get rightArrow(){return document.querySelector(".guic-carousel-right-arrow")}get navArrowStepSize(){return this._navArrowStepSize}set navArrowStepSize(e){this._navArrowStepSize=e}get currentItemIndex(){return this._currentItemIndex}set currentItemIndex(e){this._currentItemIndex=e}get pageSize(){return this._pageSize}set pageSize(e){this._pageSize=e,this.resize(),this.createPaginationControls()}hideArrow(e){if(1===e)return this.rightArrow.classList.add("guic-carousel-hidden");this.leftArrow.classList.add("guic-carousel-hidden")}showArrow(e){if(1===e)return this.rightArrow.classList.remove("guic-carousel-hidden");this.leftArrow.classList.remove("guic-carousel-hidden")}overflows(e){return this.itemsLength-e<this.pageSize}nextStepIndex(e){return(this.currentItemIndex+e)%this.items.length}prevStepIndex(e){const t=this.items.length;return(this.currentItemIndex-e+t)%t}shouldShowNavArrow(e,t){if(this.overflows(t))return this.hideArrow(e);this.showArrow(e)}addItem(e,t){const r=this.querySelector(c);if(void 0===t||t<0)r.appendChild(e);else{const r=this.items[t-1];r.parentNode.insertBefore(e,r)}this.createPaginationControls()}removeItem(e=0){const t=this.items;Array.from(t)[e].remove(),this.createPaginationControls()}previous(e){const t=this.items.length;let r=(this.currentItemIndex-e+t)%t;this.overflows(r)&&(r=0),this.currentItemIndex=r,this.moveTo(-this.currentItemIndex),this.shouldShowNavArrow(-1,this.prevStepIndex(this.navArrowStepSize)),this.shouldShowNavArrow(1,this.nextStepIndex(this.navArrowStepSize))}next(e){const t=(this.currentItemIndex+e)%this.items.length;this.overflows(t)||(this.currentItemIndex=t,this.moveTo(-this.currentItemIndex)),this.shouldShowNavArrow(-1,this.prevStepIndex(this.navArrowStepSize)),this.shouldShowNavArrow(1,this.nextStepIndex(this.navArrowStepSize))}moveTo(e){this.contentWrapper.style.left=e*this.itemWidth+"px"}createDot(e){const t=document.createElement("div");return t.classList.add("guic-carousel-dot"),t.dataset.page=e,t}createPaginationControls(){const e=this.querySelector(".guic-carousel-dots");e.innerHTML="";for(let t=0;t<this.pages;t++)e.appendChild(this.createDot(t));const t=e.querySelectorAll(".guic-carousel-dot");for(let e=0;e<t.length;e++)t[e].addEventListener("click",(e=>this.onClickOnNavDot(e)))}onClickOnNavDot(e){const t=e.currentTarget.dataset.page;this.currentItemIndex=Number(t)*this.pageSize,this.moveTo(-this.currentItemIndex),this.shouldShowNavArrow(1,this.nextStepIndex(this.navArrowStepSize)),this.shouldShowNavArrow(-1,this.prevStepIndex(this.navArrowStepSize))}resize(){this.querySelector(u).style.width=this.pageSize*this.itemWidth+"px",this.querySelector(u).style.height=this.itemHeight+"px",this.style.width=this.pageSize*this.itemWidth+"px"}attachControlButtonsListeners(){const e=this.querySelector(".guic-carousel-btn-next"),t=this.querySelector(".guic-carousel-btn-prev");e.addEventListener("click",(e=>this.next(1))),t.addEventListener("click",(e=>this.previous(1)))}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,